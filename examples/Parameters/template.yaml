# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Example project for Powertools for AWS Lambda (.NET) Parameters utility


Mappings:
  Constants:
    DynamoDB:
      SingleParamTableName: PowertoolsParametersExampleSingle
      SingleParamId: my-parameter
      MultiParamTableName: PowertoolsParametersExampleMultiple
      MultiParamId: my-hash-key
    SSM:
      SingleParamName: /powertools-parameters-example/path/prefix/parameter
      OtherParamName: /powertools-parameters-example/path/prefix/other-parameter
      MultiParamPrefix: /powertools-parameters-example/path/prefix
    SecretsManager:
      SecretName: PowertoolsParametersExampleSecret


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: powertools-dotnet-parameters-sample
        DYNAMO_SINGLE_PARAM_TABLE_NAME:
          Fn::FindInMap:
            - Constants
            - DynamoDB
            - SingleParamTableName
        DYNAMO_SINGLE_PARAM_ID:
          Fn::FindInMap:
            - Constants
            - DynamoDB
            - SingleParamId
        DYNAMO_MULTI_PARAM_TABLE_NAME:
          Fn::FindInMap:
            - Constants
            - DynamoDB
            - MultiParamTableName
        DYNAMO_MULTI_PARAM_ID:
          Fn::FindInMap:
            - Constants
            - DynamoDB
            - MultiParamId

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Runtime: dotnet6
      CodeUri: ./src/HelloWorld/
      Handler: HelloWorld::HelloWorld.Function::FunctionHandler
      MemorySize: 256
      Role: !Sub ${HelloWorldFunctionRole.Arn}
      Environment:
        Variables:
          SSM_SINGLE_PARAM_NAME:
            Fn::FindInMap:
              - Constants
              - SSM
              - SingleParamName
          SSM_MULTI_PARAM_PREFIX:
            Fn::FindInMap:
              - Constants
              - SSM
              - MultiParamPrefix
          SECRET_NAME:
            Fn::FindInMap:
              - Constants
              - SecretsManager
              - SecretName
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

  HelloWorldFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -   PolicyName: "AllowReadOperationsOnDynamoDB"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - 'dynamodb:GetItem'
                    - 'dynamodb:DescribeTable'
                    - 'dynamodb:Scan'
                    - 'dynamodb:Query'
                    - 'dynamodb:BatchGetItem'
                  Resource:
                    - !Sub ${PowertoolsSingleParamTable.Arn}
                    - !Sub ${PowertoolsMultiParamTable.Arn}
        -   PolicyName: "AllowReadOperationsOnSSMParameters"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - 'ssm:GetParameter'
                    - 'ssm:GetParametersByPath'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SingleParameter}'
                    - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${OtherParameter}'
                    - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/powertools-parameters-example/path/prefix'
        -   PolicyName: "AllowReadOperationsOnSecrets"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - 'secretsmanager:GetSecretValue'
                  Resource:
                    - !Ref SingleSecret

  SingleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::FindInMap:
          - Constants
          - SSM
          - SingleParamName
      Type: String
      Value: my-parameter-value

  OtherParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::FindInMap:
          - Constants
          - SSM
          - OtherParamName
      Type: String
      Value: my-other-parameter-value

  SingleSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name:
        Fn::FindInMap:
          - Constants
          - SecretsManager
          - SecretName
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"Username": "test-user"}'
        GenerateStringKey: "Password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  PowertoolsSingleParamTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Fn::FindInMap:
          - Constants
          - DynamoDB
          - SingleParamTableName
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
  
  PowertoolsMultiParamTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Fn::FindInMap:
          - Constants
          - DynamoDB
          - MultiParamTableName
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        -
          AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        -
          AttributeName: sk
          AttributeType: S

  InitCustomResource:
    Type: Custom::InitCustomResource
    DependsOn:
    - PowertoolsSingleParamTable
    - PowertoolsMultiParamTable
    Properties:
      ServiceToken: !GetAtt InitCustomResourcFunction.Arn
      Region: !Ref 'AWS::Region'
      Version: "1.0"
    Version: "1.0"
    
  InitCustomResourcFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      CodeUri: ./cfn/HelloWorld.Cfn/
      Handler: HelloWorld.Cfn::HelloWorld.Cfn.Function::FunctionHandler
      MemorySize: 256
      Role: !Sub ${InitCustomResourcFunctionRole.Arn}

  InitCustomResourcFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -   PolicyName: "AllowCRUDOperationsOnDynamoDB"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - 'dynamodb:GetItem'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:DescribeTable'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Scan'
                    - 'dynamodb:Query'
                    - 'dynamodb:UpdateItem'
                    - 'dynamodb:BatchWriteItem'
                    - 'dynamodb:BatchGetItem'
                  Resource:
                    - !Sub ${PowertoolsSingleParamTable.Arn}
                    - !Sub ${PowertoolsMultiParamTable.Arn}


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
