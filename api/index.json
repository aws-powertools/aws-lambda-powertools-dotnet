{
  "api/AWS.Lambda.Powertools.Common.AspectEventArgs.html": {
    "href": "api/AWS.Lambda.Powertools.Common.AspectEventArgs.html",
    "title": "Class AspectEventArgs | Powertools for AWS Lambda (.NET)",
    "keywords": "Class AspectEventArgs Class AspectEventArgs. Implements the Inheritance System.Object AspectEventArgs Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public class AspectEventArgs : EventArgs Properties Args Gets the arguments. Declaration public IReadOnlyList<object> Args { get; } Property Value Type Description IReadOnlyList < System.Object > The arguments. Instance Gets the instance. Declaration public object Instance { get; } Property Value Type Description System.Object The instance. Method Gets the method. Declaration public MethodBase Method { get; } Property Value Type Description MethodBase The method. Name Gets the name. Declaration public string Name { get; } Property Value Type Description System.String The name. ReturnType Gets the type of the return. Declaration public Type ReturnType { get; } Property Value Type Description Type The type of the return. Triggers Gets the triggers. Declaration public Attribute[] Triggers { get; } Property Value Type Description Attribute [] The triggers. Type Gets the type. Declaration public Type Type { get; } Property Value Type Description Type The type."
  },
  "api/AWS.Lambda.Powertools.Common.html": {
    "href": "api/AWS.Lambda.Powertools.Common.html",
    "title": "Namespace AWS.Lambda.Powertools.Common | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Common Classes AspectEventArgs Class AspectEventArgs. Implements the MethodAspectAttribute Class MethodAspectAttribute. Implements the UniversalWrapperAttribute PascalCaseNamingPolicy Class PascalCaseNamingPolicy Implements the PowertoolsConfigurations Class PowertoolsConfigurations. Implements the IPowertoolsConfigurations PowertoolsEnvironment Interface for PowertoolsEnvironment SnakeCaseNamingPolicy Class SnakeCaseNamingPolicy Implements the StringUtils Class StringUtils SystemWrapper Class SystemWrapper. Implements the ISystemWrapper UniversalWrapperAspect Class UniversalWrapperAspect. UniversalWrapperAttribute Class UniversalWrapperAttribute. Implements the Interfaces IMethodAspectHandler Interface IMethodAspectHandler IPowertoolsConfigurations Interface IPowertoolsConfigurations IPowertoolsEnvironment Interface for PowertoolsEnvironment ISystemWrapper Interface ISystemWrapper"
  },
  "api/AWS.Lambda.Powertools.Common.IMethodAspectHandler.html": {
    "href": "api/AWS.Lambda.Powertools.Common.IMethodAspectHandler.html",
    "title": "Interface IMethodAspectHandler | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IMethodAspectHandler Interface IMethodAspectHandler Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public interface IMethodAspectHandler Methods OnEntry(AspectEventArgs) Handles the Entry event. Declaration void OnEntry(AspectEventArgs eventArgs) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. OnException<T>(AspectEventArgs, Exception) Called when [exception]. Declaration T OnException<T>(AspectEventArgs eventArgs, Exception exception) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Exception exception The exception. Returns Type Description T T. Type Parameters Name Description T OnExit(AspectEventArgs) Handles the Exit event. Declaration void OnExit(AspectEventArgs eventArgs) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. OnSuccess(AspectEventArgs, Object) Called when [success]. Declaration void OnSuccess(AspectEventArgs eventArgs, object result) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. System.Object result The result."
  },
  "api/AWS.Lambda.Powertools.Common.IPowertoolsConfigurations.html": {
    "href": "api/AWS.Lambda.Powertools.Common.IPowertoolsConfigurations.html",
    "title": "Interface IPowertoolsConfigurations | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IPowertoolsConfigurations Interface IPowertoolsConfigurations Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public interface IPowertoolsConfigurations Properties IdempotencyDisabled Gets a value indicating whether [Idempotency is disabled]. Declaration bool IdempotencyDisabled { get; } Property Value Type Description System.Boolean true if [Idempotency is disabled]; otherwise, false . IsLambdaEnvironment Gets a value indicating whether this instance is Lambda. Declaration bool IsLambdaEnvironment { get; } Property Value Type Description System.Boolean true if this instance is Lambda; otherwise, false . IsSamLocal Gets a value indicating whether this instance is sam local. Declaration bool IsSamLocal { get; } Property Value Type Description System.Boolean true if this instance is sam local; otherwise, false . IsServiceDefined Gets a value indicating whether this instance is service defined. Declaration bool IsServiceDefined { get; } Property Value Type Description System.Boolean true if this instance is service defined; otherwise, false . LoggerLogEvent Gets a value indicating whether [logger log event]. Declaration bool LoggerLogEvent { get; } Property Value Type Description System.Boolean true if [logger log event]; otherwise, false . LoggerOutputCase Gets the logger output casing. Declaration string LoggerOutputCase { get; } Property Value Type Description System.String The logger output casing. Defaults to snake case. LoggerSampleRate Gets the logger sample rate. Declaration double? LoggerSampleRate { get; } Property Value Type Description System.Nullable < System.Double > The logger sample rate. LogLevel Gets the log level. Declaration string LogLevel { get; } Property Value Type Description System.String The log level. MetricsNamespace Gets the metrics namespace. Declaration string MetricsNamespace { get; } Property Value Type Description System.String The metrics namespace. Service Gets the service. Declaration string Service { get; } Property Value Type Description System.String The service. TracerCaptureError Gets a value indicating whether [tracer capture error]. Declaration bool TracerCaptureError { get; } Property Value Type Description System.Boolean true if [tracer capture error]; otherwise, false . TracerCaptureResponse Gets a value indicating whether [tracer capture response]. Declaration bool TracerCaptureResponse { get; } Property Value Type Description System.Boolean true if [tracer capture response]; otherwise, false . TracingDisabled Gets a value indicating whether [tracing is disabled]. Declaration bool TracingDisabled { get; } Property Value Type Description System.Boolean true if [tracing is disabled]; otherwise, false . XRayTraceId Gets the X-Ray trace identifier. Declaration string XRayTraceId { get; } Property Value Type Description System.String The X-Ray trace identifier. Methods GetEnvironmentVariable(String) Gets the environment variable. Declaration string GetEnvironmentVariable(string variable) Parameters Type Name Description System.String variable The variable. Returns Type Description System.String System.String. GetEnvironmentVariableOrDefault(String, Boolean) Gets the environment variable or default. Declaration bool GetEnvironmentVariableOrDefault(string variable, bool defaultValue) Parameters Type Name Description System.String variable The variable. System.Boolean defaultValue if set to true [default value]. Returns Type Description System.Boolean true if XXXX, false otherwise. GetEnvironmentVariableOrDefault(String, String) Gets the environment variable or default. Declaration string GetEnvironmentVariableOrDefault(string variable, string defaultValue) Parameters Type Name Description System.String variable The variable. System.String defaultValue The default value. Returns Type Description System.String System.String. SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T"
  },
  "api/AWS.Lambda.Powertools.Common.IPowertoolsEnvironment.html": {
    "href": "api/AWS.Lambda.Powertools.Common.IPowertoolsEnvironment.html",
    "title": "Interface IPowertoolsEnvironment | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IPowertoolsEnvironment Interface for PowertoolsEnvironment Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public interface IPowertoolsEnvironment Methods GetAssemblyName<T>(T) Get the calling Type Assembly Name Declaration string GetAssemblyName<T>(T type) Parameters Type Name Description T type Returns Type Description System.String Assembly Name Type Parameters Name Description T GetAssemblyVersion<T>(T) Get the calling Type Assembly Version Declaration string GetAssemblyVersion<T>(T type) Parameters Type Name Description T type Returns Type Description System.String Assembly Version in the Major.Minor.Build format Type Parameters Name Description T GetEnvironmentVariable(String) Get environment variable by variable name Declaration string GetEnvironmentVariable(string variableName) Parameters Type Name Description System.String variableName Returns Type Description System.String Environment variable SetEnvironmentVariable(String, String) Set environment variable Declaration void SetEnvironmentVariable(string variableName, string value) Parameters Type Name Description System.String variableName System.String value Setting this to null will remove environment variable with that name"
  },
  "api/AWS.Lambda.Powertools.Common.ISystemWrapper.html": {
    "href": "api/AWS.Lambda.Powertools.Common.ISystemWrapper.html",
    "title": "Interface ISystemWrapper | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface ISystemWrapper Interface ISystemWrapper Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public interface ISystemWrapper Methods GetEnvironmentVariable(String) Gets the environment variable. Declaration string GetEnvironmentVariable(string variable) Parameters Type Name Description System.String variable The variable. Returns Type Description System.String System.String. GetRandom() Gets random number Declaration double GetRandom() Returns Type Description System.Double System.Double. Log(String) Logs the specified value. Declaration void Log(string value) Parameters Type Name Description System.String value The value. LogLine(String) Logs the line. Declaration void LogLine(string value) Parameters Type Name Description System.String value The value. SetEnvironmentVariable(String, String) Sets the environment variable. Declaration void SetEnvironmentVariable(string variable, string value) Parameters Type Name Description System.String variable The variable. System.String value SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T"
  },
  "api/AWS.Lambda.Powertools.Common.MethodAspectAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Common.MethodAspectAttribute.html",
    "title": "Class MethodAspectAttribute | Powertools for AWS Lambda (.NET)",
    "keywords": "Class MethodAspectAttribute Class MethodAspectAttribute. Implements the UniversalWrapperAttribute Inheritance System.Object UniversalWrapperAttribute MethodAspectAttribute LoggingAttribute MetricsAttribute TracingAttribute Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public abstract class MethodAspectAttribute : UniversalWrapperAttribute Methods CreateHandler() Creates the handler. Declaration protected abstract IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. WrapAsync<T>(Func<Object[], Task<T>>, Object[], AspectEventArgs) Wrap as an asynchronous operation. Declaration protected override sealed Task<T> WrapAsync<T>(Func<object[], Task<T>> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func < System.Object [], Task <T>> target The target. System.Object [] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description Task <T> A Task<T> representing the asynchronous operation. Type Parameters Name Description T Overrides AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.WrapAsync<T>(Func<System.Object[], Task<T>>, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) WrapSync<T>(Func<Object[], T>, Object[], AspectEventArgs) Wraps as a synchronous operation. Declaration protected override sealed T WrapSync<T>(Func<object[], T> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func < System.Object [], T> target The target. System.Object [] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description T T. Type Parameters Name Description T Overrides AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.WrapSync<T>(Func<System.Object[], T>, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) See Also UniversalWrapperAttribute"
  },
  "api/AWS.Lambda.Powertools.Common.PascalCaseNamingPolicy.html": {
    "href": "api/AWS.Lambda.Powertools.Common.PascalCaseNamingPolicy.html",
    "title": "Class PascalCaseNamingPolicy | Powertools for AWS Lambda (.NET)",
    "keywords": "Class PascalCaseNamingPolicy Class PascalCaseNamingPolicy Implements the Inheritance System.Object PascalCaseNamingPolicy Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public class PascalCaseNamingPolicy : JsonNamingPolicy Properties Instance Instance of PascalCaseNamingPolicy Declaration public static PascalCaseNamingPolicy Instance { get; } Property Value Type Description PascalCaseNamingPolicy Methods ConvertName(String) Converts key to pascal case Declaration public override string ConvertName(string name) Parameters Type Name Description System.String name Name of key Returns Type Description System.String"
  },
  "api/AWS.Lambda.Powertools.Common.PowertoolsConfigurations.html": {
    "href": "api/AWS.Lambda.Powertools.Common.PowertoolsConfigurations.html",
    "title": "Class PowertoolsConfigurations | Powertools for AWS Lambda (.NET)",
    "keywords": "Class PowertoolsConfigurations Class PowertoolsConfigurations. Implements the IPowertoolsConfigurations Inheritance System.Object PowertoolsConfigurations Implements IPowertoolsConfigurations Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public class PowertoolsConfigurations : object, IPowertoolsConfigurations Fields MaxDimensions The maximum dimensions Declaration public const int MaxDimensions = null Field Value Type Description System.Int32 MaxMetrics The maximum metrics Declaration public const int MaxMetrics = null Field Value Type Description System.Int32 Properties IdempotencyDisabled Gets a value indicating whether [Idempotency is disabled]. Declaration public bool IdempotencyDisabled { get; } Property Value Type Description System.Boolean true if [Idempotency is disabled]; otherwise, false . Instance Gets the instance. Declaration public static IPowertoolsConfigurations Instance { get; } Property Value Type Description IPowertoolsConfigurations The instance. IsLambdaEnvironment Gets a value indicating whether this instance is Lambda. Declaration public bool IsLambdaEnvironment { get; } Property Value Type Description System.Boolean true if this instance is Lambda; otherwise, false . IsSamLocal Gets a value indicating whether this instance is sam local. Declaration public bool IsSamLocal { get; } Property Value Type Description System.Boolean true if this instance is sam local; otherwise, false . IsServiceDefined Gets a value indicating whether this instance is service defined. Declaration public bool IsServiceDefined { get; } Property Value Type Description System.Boolean true if this instance is service defined; otherwise, false . LoggerLogEvent Gets a value indicating whether [logger log event]. Declaration public bool LoggerLogEvent { get; } Property Value Type Description System.Boolean true if [logger log event]; otherwise, false . LoggerOutputCase Gets the logger output casing. Declaration public string LoggerOutputCase { get; } Property Value Type Description System.String The logger output casing. Defaults to snake case. LoggerSampleRate Gets the logger sample rate. Declaration public double? LoggerSampleRate { get; } Property Value Type Description System.Nullable < System.Double > The logger sample rate. LogLevel Gets the log level. Declaration public string LogLevel { get; } Property Value Type Description System.String The log level. MetricsNamespace Gets the metrics namespace. Declaration public string MetricsNamespace { get; } Property Value Type Description System.String The metrics namespace. Service Gets the service. Declaration public string Service { get; } Property Value Type Description System.String The service. TracerCaptureError Gets a value indicating whether [tracer capture error]. Declaration public bool TracerCaptureError { get; } Property Value Type Description System.Boolean true if [tracer capture error]; otherwise, false . TracerCaptureResponse Gets a value indicating whether [tracer capture response]. Declaration public bool TracerCaptureResponse { get; } Property Value Type Description System.Boolean true if [tracer capture response]; otherwise, false . TracingDisabled Gets a value indicating whether [tracing is disabled]. Declaration public bool TracingDisabled { get; } Property Value Type Description System.Boolean true if [tracing is disabled]; otherwise, false . XRayTraceId Gets the X-Ray trace identifier. Declaration public string XRayTraceId { get; } Property Value Type Description System.String The X-Ray trace identifier. Methods GetEnvironmentVariable(String) Gets the environment variable. Declaration public string GetEnvironmentVariable(string variable) Parameters Type Name Description System.String variable The variable. Returns Type Description System.String System.String. GetEnvironmentVariableOrDefault(String, Boolean) Gets the environment variable or default. Declaration public bool GetEnvironmentVariableOrDefault(string variable, bool defaultValue) Parameters Type Name Description System.String variable The variable. System.Boolean defaultValue if set to true [default value]. Returns Type Description System.Boolean true if XXXX, false otherwise. GetEnvironmentVariableOrDefault(String, String) Gets the environment variable or default. Declaration public string GetEnvironmentVariableOrDefault(string variable, string defaultValue) Parameters Type Name Description System.String variable The variable. System.String defaultValue The default value. Returns Type Description System.String System.String. SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration public void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T Implements IPowertoolsConfigurations See Also IPowertoolsConfigurations"
  },
  "api/AWS.Lambda.Powertools.Common.PowertoolsEnvironment.html": {
    "href": "api/AWS.Lambda.Powertools.Common.PowertoolsEnvironment.html",
    "title": "Class PowertoolsEnvironment | Powertools for AWS Lambda (.NET)",
    "keywords": "Class PowertoolsEnvironment Interface for PowertoolsEnvironment Inheritance System.Object PowertoolsEnvironment Implements IPowertoolsEnvironment Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public class PowertoolsEnvironment : object, IPowertoolsEnvironment Properties Instance Gets the instance. Declaration public static IPowertoolsEnvironment Instance { get; } Property Value Type Description IPowertoolsEnvironment The instance. Methods GetAssemblyName<T>(T) Get the calling Type Assembly Name Declaration public string GetAssemblyName<T>(T type) Parameters Type Name Description T type Returns Type Description System.String Assembly Name Type Parameters Name Description T GetAssemblyVersion<T>(T) Get the calling Type Assembly Version Declaration public string GetAssemblyVersion<T>(T type) Parameters Type Name Description T type Returns Type Description System.String Assembly Version in the Major.Minor.Build format Type Parameters Name Description T GetEnvironmentVariable(String) Get environment variable by variable name Declaration public string GetEnvironmentVariable(string variableName) Parameters Type Name Description System.String variableName Returns Type Description System.String Environment variable SetEnvironmentVariable(String, String) Set environment variable Declaration public void SetEnvironmentVariable(string variableName, string value) Parameters Type Name Description System.String variableName System.String value Setting this to null will remove environment variable with that name Implements IPowertoolsEnvironment"
  },
  "api/AWS.Lambda.Powertools.Common.SnakeCaseNamingPolicy.html": {
    "href": "api/AWS.Lambda.Powertools.Common.SnakeCaseNamingPolicy.html",
    "title": "Class SnakeCaseNamingPolicy | Powertools for AWS Lambda (.NET)",
    "keywords": "Class SnakeCaseNamingPolicy Class SnakeCaseNamingPolicy Implements the Inheritance System.Object SnakeCaseNamingPolicy Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public class SnakeCaseNamingPolicy : JsonNamingPolicy Properties Instance Instance of SnakeCaseNamingPolicy Declaration public static SnakeCaseNamingPolicy Instance { get; } Property Value Type Description SnakeCaseNamingPolicy Methods ConvertName(String) Converts key name to snake case Declaration public override string ConvertName(string name) Parameters Type Name Description System.String name Name of key Returns Type Description System.String"
  },
  "api/AWS.Lambda.Powertools.Common.StringUtils.html": {
    "href": "api/AWS.Lambda.Powertools.Common.StringUtils.html",
    "title": "Class StringUtils | Powertools for AWS Lambda (.NET)",
    "keywords": "Class StringUtils Class StringUtils Inheritance System.Object StringUtils Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public static class StringUtils : object Methods ToPascalCase(String) Extension method to convert string to pascal case Declaration public static string ToPascalCase(this string str) Parameters Type Name Description System.String str string Returns Type Description System.String Pascal case formatted string ToSnakeCase(String) Extension method to convert string to snake case Declaration public static string ToSnakeCase(this string str) Parameters Type Name Description System.String str string Returns Type Description System.String Snake case formatted string"
  },
  "api/AWS.Lambda.Powertools.Common.SystemWrapper.html": {
    "href": "api/AWS.Lambda.Powertools.Common.SystemWrapper.html",
    "title": "Class SystemWrapper | Powertools for AWS Lambda (.NET)",
    "keywords": "Class SystemWrapper Class SystemWrapper. Implements the ISystemWrapper Inheritance System.Object SystemWrapper Implements ISystemWrapper Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public class SystemWrapper : object, ISystemWrapper Constructors SystemWrapper(IPowertoolsEnvironment) Prevents a default instance of the SystemWrapper class from being created. Declaration public SystemWrapper(IPowertoolsEnvironment powertoolsEnvironment) Parameters Type Name Description IPowertoolsEnvironment powertoolsEnvironment Properties Instance Gets the instance. Declaration public static ISystemWrapper Instance { get; } Property Value Type Description ISystemWrapper The instance. Methods GetEnvironmentVariable(String) Gets the environment variable. Declaration public string GetEnvironmentVariable(string variable) Parameters Type Name Description System.String variable The variable. Returns Type Description System.String System.String. GetRandom() Gets random number Declaration public double GetRandom() Returns Type Description System.Double System.Double. Log(String) Logs the specified value. Declaration public void Log(string value) Parameters Type Name Description System.String value The value. LogLine(String) Logs the line. Declaration public void LogLine(string value) Parameters Type Name Description System.String value The value. SetEnvironmentVariable(String, String) Sets the environment variable. Declaration public void SetEnvironmentVariable(string variable, string value) Parameters Type Name Description System.String variable The variable. System.String value SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration public void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T Implements ISystemWrapper See Also ISystemWrapper"
  },
  "api/AWS.Lambda.Powertools.Common.UniversalWrapperAspect.html": {
    "href": "api/AWS.Lambda.Powertools.Common.UniversalWrapperAspect.html",
    "title": "Class UniversalWrapperAspect | Powertools for AWS Lambda (.NET)",
    "keywords": "Class UniversalWrapperAspect Class UniversalWrapperAspect. Inheritance System.Object UniversalWrapperAspect Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public class UniversalWrapperAspect : object Methods Handle(Object, Type, MethodBase, Func<Object[], Object>, String, Object[], Type, Attribute[]) Handles the specified instance. Declaration public object Handle(object instance, Type type, MethodBase method, Func<object[], object> target, string name, object[] args, Type returnType, Attribute[] triggers) Parameters Type Name Description System.Object instance The instance. Type type The type. MethodBase method The method. Func < System.Object [], System.Object > target The target. System.String name The name. System.Object [] args The arguments. Type returnType Type of the return. Attribute [] triggers The triggers. Returns Type Description System.Object System.Object."
  },
  "api/AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.html",
    "title": "Class UniversalWrapperAttribute | Powertools for AWS Lambda (.NET)",
    "keywords": "Class UniversalWrapperAttribute Class UniversalWrapperAttribute. Implements the Inheritance System.Object UniversalWrapperAttribute MethodAspectAttribute IdempotentAttribute Namespace : AWS.Lambda.Powertools.Common Assembly : AWS.Lambda.Powertools.Common.dll Syntax public abstract class UniversalWrapperAttribute : Attribute Methods WrapAsync<T>(Func<Object[], Task<T>>, Object[], AspectEventArgs) Wraps as an asynchronous operation. Declaration protected virtual Task<T> WrapAsync<T>(Func<object[], Task<T>> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func < System.Object [], Task <T>> target The target. System.Object [] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description Task <T> Task<T>. Type Parameters Name Description T WrapSync<T>(Func<Object[], T>, Object[], AspectEventArgs) Wraps as a synchronous operation. Declaration protected virtual T WrapSync<T>(Func<object[], T> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func < System.Object [], T> target The target. System.Object [] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description T T. Type Parameters Name Description T"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.html",
    "title": "Namespace AWS.Lambda.Powertools.Idempotency.Exceptions | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Idempotency.Exceptions Classes IdempotencyAlreadyInProgressException This exception is thrown when the same payload is sent while the previous one was not yet fully stored in the persistence layer (marked as COMPLETED). Implements the IdempotencyConfigurationException Exception thrown when Idempotency is not well configured: An annotated method does not return anything An annotated method does not use Task as return value An annotated method does not have parameters IdempotencyInconsistentStateException Exception can happen under rare but expected cases when persistent state changes in the small-time between put and get requests. IdempotencyItemAlreadyExistsException Exception thrown when trying to store an item which already exists. IdempotencyItemNotFoundException Exception thrown when the item was not found in the persistence store. IdempotencyKeyException Exception thrown only when using ThrowOnNoIdempotencyKey and if a key could not be found in the event (for example when having a bad JMESPath configured) IdempotencyPersistenceLayerException Exception thrown when a technical error occurred with the persistence layer (eg. insertion, deletion, ... in database) IdempotencyValidationException Exception thrown only when using PayloadValidationJmesPath is configured and the payload changed between two calls (but with the same idempotency key)."
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyAlreadyInProgressException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyAlreadyInProgressException.html",
    "title": "Class IdempotencyAlreadyInProgressException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyAlreadyInProgressException This exception is thrown when the same payload is sent while the previous one was not yet fully stored in the persistence layer (marked as COMPLETED). Implements the Inheritance System.Object IdempotencyAlreadyInProgressException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyAlreadyInProgressException : Exception Constructors IdempotencyAlreadyInProgressException() Creates a new IdempotencyAlreadyInProgressException Declaration public IdempotencyAlreadyInProgressException() IdempotencyAlreadyInProgressException(String) Declaration public IdempotencyAlreadyInProgressException(string message) Parameters Type Name Description System.String message IdempotencyAlreadyInProgressException(String, Exception) Declaration public IdempotencyAlreadyInProgressException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyConfigurationException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyConfigurationException.html",
    "title": "Class IdempotencyConfigurationException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyConfigurationException Exception thrown when Idempotency is not well configured: An annotated method does not return anything An annotated method does not use Task as return value An annotated method does not have parameters Inheritance System.Object IdempotencyConfigurationException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyConfigurationException : Exception Constructors IdempotencyConfigurationException() Creates a new IdempotencyConfigurationException Declaration public IdempotencyConfigurationException() IdempotencyConfigurationException(String) Declaration public IdempotencyConfigurationException(string message) Parameters Type Name Description System.String message IdempotencyConfigurationException(String, Exception) Declaration public IdempotencyConfigurationException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyInconsistentStateException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyInconsistentStateException.html",
    "title": "Class IdempotencyInconsistentStateException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyInconsistentStateException Exception can happen under rare but expected cases when persistent state changes in the small-time between put and get requests. Inheritance System.Object IdempotencyInconsistentStateException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyInconsistentStateException : Exception Constructors IdempotencyInconsistentStateException() Creates a new IdempotencyInconsistentStateException Declaration public IdempotencyInconsistentStateException() IdempotencyInconsistentStateException(String) Declaration public IdempotencyInconsistentStateException(string message) Parameters Type Name Description System.String message IdempotencyInconsistentStateException(String, Exception) Declaration public IdempotencyInconsistentStateException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyItemAlreadyExistsException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyItemAlreadyExistsException.html",
    "title": "Class IdempotencyItemAlreadyExistsException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyItemAlreadyExistsException Exception thrown when trying to store an item which already exists. Inheritance System.Object IdempotencyItemAlreadyExistsException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyItemAlreadyExistsException : Exception Constructors IdempotencyItemAlreadyExistsException() Creates a new IdempotencyItemAlreadyExistsException Declaration public IdempotencyItemAlreadyExistsException() IdempotencyItemAlreadyExistsException(String) Declaration public IdempotencyItemAlreadyExistsException(string message) Parameters Type Name Description System.String message IdempotencyItemAlreadyExistsException(String, Exception) Declaration public IdempotencyItemAlreadyExistsException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyItemNotFoundException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyItemNotFoundException.html",
    "title": "Class IdempotencyItemNotFoundException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyItemNotFoundException Exception thrown when the item was not found in the persistence store. Inheritance System.Object IdempotencyItemNotFoundException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyItemNotFoundException : Exception Constructors IdempotencyItemNotFoundException() Creates a new IdempotencyItemNotFoundException Declaration public IdempotencyItemNotFoundException() IdempotencyItemNotFoundException(String) Declaration public IdempotencyItemNotFoundException(string message) Parameters Type Name Description System.String message IdempotencyItemNotFoundException(String, Exception) Declaration public IdempotencyItemNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyKeyException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyKeyException.html",
    "title": "Class IdempotencyKeyException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyKeyException Exception thrown only when using ThrowOnNoIdempotencyKey and if a key could not be found in the event (for example when having a bad JMESPath configured) Inheritance System.Object IdempotencyKeyException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyKeyException : Exception Constructors IdempotencyKeyException() Creates a new IdempotencyKeyException Declaration public IdempotencyKeyException() IdempotencyKeyException(String) Declaration public IdempotencyKeyException(string message) Parameters Type Name Description System.String message IdempotencyKeyException(String, Exception) Declaration public IdempotencyKeyException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyPersistenceLayerException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyPersistenceLayerException.html",
    "title": "Class IdempotencyPersistenceLayerException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyPersistenceLayerException Exception thrown when a technical error occurred with the persistence layer (eg. insertion, deletion, ... in database) Inheritance System.Object IdempotencyPersistenceLayerException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyPersistenceLayerException : Exception Constructors IdempotencyPersistenceLayerException() Creates a new IdempotencyPersistenceLayerException Declaration public IdempotencyPersistenceLayerException() IdempotencyPersistenceLayerException(String) Declaration public IdempotencyPersistenceLayerException(string message) Parameters Type Name Description System.String message IdempotencyPersistenceLayerException(String, Exception) Declaration public IdempotencyPersistenceLayerException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyValidationException.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Exceptions.IdempotencyValidationException.html",
    "title": "Class IdempotencyValidationException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyValidationException Exception thrown only when using PayloadValidationJmesPath is configured and the payload changed between two calls (but with the same idempotency key). Inheritance System.Object IdempotencyValidationException Namespace : AWS.Lambda.Powertools.Idempotency.Exceptions Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyValidationException : Exception Constructors IdempotencyValidationException() Creates a new IdempotencyValidationException Declaration public IdempotencyValidationException() IdempotencyValidationException(String) Declaration public IdempotencyValidationException(string message) Parameters Type Name Description System.String message IdempotencyValidationException(String, Exception) Declaration public IdempotencyValidationException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AWS.Lambda.Powertools.Idempotency.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.html",
    "title": "Namespace AWS.Lambda.Powertools.Idempotency | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Idempotency Classes Idempotency Holds the configuration for idempotency: The persistence layer to use for persisting the request and response of the function (mandatory). The general configurations for idempotency (optional, see {@link IdempotencyConfig.Builder} methods to see defaults values. Use it before the function handler get called. Example: Idempotency.Configure(builder => builder.WithPersistenceStore(...)); Idempotency.IdempotencyBuilder Create a builder that can be used to configure and create Idempotency IdempotencyOptions Configuration of the idempotency feature. Use the Builder to create an instance. IdempotencyOptionsBuilder Create a builder that can be used to configure and create IdempotencyOptions IdempotentAttribute Idempotent is used to signal that the annotated method is idempotent: Calling this method one or multiple times with the same parameter will always return the same result. This annotation can be placed on any method of a Lambda function [Idempotent] public Task<string> FunctionHandler(string input, ILambdaContext context) { return Task.FromResult(input.ToUpper()); } Environment variables <br /> --------------------- <br /> Variable name Description AWS_LAMBDA_FUNCTION_NAME string, function name AWS_REGION string, AWS region POWERTOOLS_IDEMPOTENCY_DISABLED string, Enable or disable the Idempotency"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Idempotency.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Idempotency.html",
    "title": "Class Idempotency | Powertools for AWS Lambda (.NET)",
    "keywords": "Class Idempotency Holds the configuration for idempotency: The persistence layer to use for persisting the request and response of the function (mandatory). The general configurations for idempotency (optional, see {@link IdempotencyConfig.Builder} methods to see defaults values. Use it before the function handler get called. Example: Idempotency.Configure(builder => builder.WithPersistenceStore(...)); Inheritance System.Object Idempotency Namespace : AWS.Lambda.Powertools.Idempotency Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public sealed class Idempotency : object Properties IdempotencyOptions The general configurations for the idempotency Declaration public IdempotencyOptions IdempotencyOptions { get; } Property Value Type Description IdempotencyOptions Instance Holds the idempotency Instance: Declaration public static Idempotency Instance { get; } Property Value Type Description Idempotency PersistenceStore The persistence layer to use for persisting the request and response of the function Declaration public BasePersistenceStore PersistenceStore { get; } Property Value Type Description BasePersistenceStore Methods Configure(Action<Idempotency.IdempotencyBuilder>) Use this method to configure persistence layer (mandatory) and idempotency options (optional) Declaration public static void Configure(Action<Idempotency.IdempotencyBuilder> configurationAction) Parameters Type Name Description Action < Idempotency.IdempotencyBuilder > configurationAction"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Idempotency.IdempotencyBuilder.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Idempotency.IdempotencyBuilder.html",
    "title": "Class Idempotency.IdempotencyBuilder | Powertools for AWS Lambda (.NET)",
    "keywords": "Class Idempotency.IdempotencyBuilder Create a builder that can be used to configure and create Idempotency Inheritance System.Object Idempotency.IdempotencyBuilder Namespace : AWS.Lambda.Powertools.Idempotency Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyBuilder : object Methods UseDynamoDb(Action<DynamoDBPersistenceStoreBuilder>) Configure Idempotency to use DynamoDBPersistenceStore Declaration public Idempotency.IdempotencyBuilder UseDynamoDb(Action<DynamoDBPersistenceStoreBuilder> builderAction) Parameters Type Name Description Action < DynamoDBPersistenceStoreBuilder > builderAction The builder being used to configure the BasePersistenceStore Returns Type Description Idempotency.IdempotencyBuilder IdempotencyBuilder UseDynamoDb(String) Configure Idempotency to use DynamoDBPersistenceStore Declaration public Idempotency.IdempotencyBuilder UseDynamoDb(string tableName) Parameters Type Name Description System.String tableName The DynamoDb table name Returns Type Description Idempotency.IdempotencyBuilder IdempotencyBuilder WithOptions(Action<IdempotencyOptionsBuilder>) Set the idempotency configurations Declaration public Idempotency.IdempotencyBuilder WithOptions(Action<IdempotencyOptionsBuilder> builderAction) Parameters Type Name Description Action < IdempotencyOptionsBuilder > builderAction The builder being used to configure the IdempotencyOptions . Returns Type Description Idempotency.IdempotencyBuilder IdempotencyBuilder WithOptions(IdempotencyOptions) Set the default idempotency configurations Declaration public Idempotency.IdempotencyBuilder WithOptions(IdempotencyOptions options) Parameters Type Name Description IdempotencyOptions options Returns Type Description Idempotency.IdempotencyBuilder IdempotencyBuilder WithPersistenceStore(BasePersistenceStore) Set the persistence layer to use for storing the request and response Declaration public Idempotency.IdempotencyBuilder WithPersistenceStore(BasePersistenceStore persistenceStore) Parameters Type Name Description BasePersistenceStore persistenceStore Returns Type Description Idempotency.IdempotencyBuilder IdempotencyBuilder"
  },
  "api/AWS.Lambda.Powertools.Idempotency.IdempotencyOptions.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.IdempotencyOptions.html",
    "title": "Class IdempotencyOptions | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyOptions Configuration of the idempotency feature. Use the Builder to create an instance. Inheritance System.Object IdempotencyOptions Namespace : AWS.Lambda.Powertools.Idempotency Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyOptions : object Properties EventKeyJmesPath A JMESPath expression to extract the idempotency key from the event record. https://jmespath.org for more details Common paths: powertools_json(Body) for APIGatewayProxyRequest Records[*].powertools_json(Body) for SQSEvent Records[0].Sns.Message | powertools_json(@) for SNSEvent Detail for ScheduledEvent (EventBridge / CloudWatch events) Declaration public string EventKeyJmesPath { get; } Property Value Type Description System.String ExpirationInSeconds The number of seconds to wait before a record is expired Declaration public long ExpirationInSeconds { get; } Property Value Type Description System.Int64 HashFunction Algorithm to use for calculating hashes, as supported by (eg. SHA1, SHA-256, ...) Declaration public string HashFunction { get; } Property Value Type Description System.String LocalCacheMaxItems The maximum number of items to store in local cache Declaration public int LocalCacheMaxItems { get; } Property Value Type Description System.Int32 PayloadValidationJmesPath JMES Path of a part of the payload to be used for validation See https://jmespath.org/ Declaration public string PayloadValidationJmesPath { get; } Property Value Type Description System.String ThrowOnNoIdempotencyKey Boolean to indicate if we must throw an Exception when idempotency key could not be found in the payload. Declaration public bool ThrowOnNoIdempotencyKey { get; } Property Value Type Description System.Boolean UseLocalCache Whether to locally cache idempotency results, by default false Declaration public bool UseLocalCache { get; } Property Value Type Description System.Boolean"
  },
  "api/AWS.Lambda.Powertools.Idempotency.IdempotencyOptionsBuilder.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.IdempotencyOptionsBuilder.html",
    "title": "Class IdempotencyOptionsBuilder | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotencyOptionsBuilder Create a builder that can be used to configure and create IdempotencyOptions Inheritance System.Object IdempotencyOptionsBuilder Namespace : AWS.Lambda.Powertools.Idempotency Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotencyOptionsBuilder : object Methods Build() Initialize and return an instance of IdempotencyConfig. Example: IdempotencyConfig.Builder().WithUseLocalCache().Build(); This instance must then be passed to the Idempotency.Config: Idempotency.Config().WithConfig(config).Configure(); Declaration public IdempotencyOptions Build() Returns Type Description IdempotencyOptions an instance of IdempotencyConfig WithEventKeyJmesPath(String) A JMESPath expression to extract the idempotency key from the event record. See https://jmespath.org/ for more details. Declaration public IdempotencyOptionsBuilder WithEventKeyJmesPath(string eventKeyJmesPath) Parameters Type Name Description System.String eventKeyJmesPath path of the key in the Lambda event Returns Type Description IdempotencyOptionsBuilder the instance of the builder (to chain operations) WithExpiration(TimeSpan) The number of seconds to wait before a record is expired Declaration public IdempotencyOptionsBuilder WithExpiration(TimeSpan duration) Parameters Type Name Description TimeSpan duration expiration of the record in the store Returns Type Description IdempotencyOptionsBuilder the instance of the builder (to chain operations) WithHashFunction(String) Function to use for calculating hashes, by default MD5. Declaration public IdempotencyOptionsBuilder WithHashFunction(string hashFunction) Parameters Type Name Description System.String hashFunction Can be any algorithm supported by HashAlgorithm.Create Returns Type Description IdempotencyOptionsBuilder the instance of the builder (to chain operations) WithPayloadValidationJmesPath(String) A JMESPath expression to extract the payload to be validated from the event record. See https://jmespath.org/ for more details. Declaration public IdempotencyOptionsBuilder WithPayloadValidationJmesPath(string payloadValidationJmesPath) Parameters Type Name Description System.String payloadValidationJmesPath JMES Path of a part of the payload to be used for validation Returns Type Description IdempotencyOptionsBuilder the instance of the builder (to chain operations) WithThrowOnNoIdempotencyKey(Boolean) Whether to throw an exception if no idempotency key was found in the request, by default false Declaration public IdempotencyOptionsBuilder WithThrowOnNoIdempotencyKey(bool throwOnNoIdempotencyKey) Parameters Type Name Description System.Boolean throwOnNoIdempotencyKey boolean to indicate if we must throw an Exception when idempotency key could not be found in the payload. Returns Type Description IdempotencyOptionsBuilder the instance of the builder (to chain operations) WithUseLocalCache(Boolean) Whether to locally cache idempotency results, by default false Declaration public IdempotencyOptionsBuilder WithUseLocalCache(bool useLocalCache) Parameters Type Name Description System.Boolean useLocalCache Indicate if a local cache must be used in addition to the persistence store. Returns Type Description IdempotencyOptionsBuilder the instance of the builder (to chain operations)"
  },
  "api/AWS.Lambda.Powertools.Idempotency.IdempotentAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.IdempotentAttribute.html",
    "title": "Class IdempotentAttribute | Powertools for AWS Lambda (.NET)",
    "keywords": "Class IdempotentAttribute Idempotent is used to signal that the annotated method is idempotent: Calling this method one or multiple times with the same parameter will always return the same result. This annotation can be placed on any method of a Lambda function [Idempotent] public Task<string> FunctionHandler(string input, ILambdaContext context) { return Task.FromResult(input.ToUpper()); } Environment variables <br /> --------------------- <br /> Variable name Description AWS_LAMBDA_FUNCTION_NAME string, function name AWS_REGION string, AWS region POWERTOOLS_IDEMPOTENCY_DISABLED string, Enable or disable the Idempotency Inheritance System.Object UniversalWrapperAttribute IdempotentAttribute Inherited Members AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.WrapSync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.WrapAsync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) Namespace : AWS.Lambda.Powertools.Idempotency Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class IdempotentAttribute : UniversalWrapperAttribute Methods WrapAsync<T>(Func<Object[], Task<T>>, Object[], AspectEventArgs) Wrap as an asynchronous operation. Declaration protected override sealed Task<T> WrapAsync<T>(Func<object[], Task<T>> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func < System.Object [], Task <T>> target The target. System.Object [] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description Task <T> A Task<T> representing the asynchronous operation. Type Parameters Name Description T WrapSync<T>(Func<Object[], T>, Object[], AspectEventArgs) Wraps as a synchronous operation, simply throws IdempotencyConfigurationException Declaration protected override sealed T WrapSync<T>(Func<object[], T> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func < System.Object [], T> target The target. System.Object [] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description T T. Type Parameters Name Description T"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Persistence.BasePersistenceStore.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Persistence.BasePersistenceStore.html",
    "title": "Class BasePersistenceStore | Powertools for AWS Lambda (.NET)",
    "keywords": "Class BasePersistenceStore Persistence layer that will store the idempotency result. Base implementation. See DynamoDBPersistenceStore for an implementation (default one) Extend this class to use your own implementation (DocumentDB, ElastiCache, ...) Inheritance System.Object BasePersistenceStore DynamoDBPersistenceStore Implements IPersistenceStore Namespace : AWS.Lambda.Powertools.Idempotency.Persistence Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public abstract class BasePersistenceStore : object, IPersistenceStore Fields PayloadValidationEnabled Boolean to indicate whether or not payload validation is enabled Declaration protected bool PayloadValidationEnabled Field Value Type Description System.Boolean Methods Configure(IdempotencyOptions, String) Initialize the base persistence layer from the configuration settings Declaration public void Configure(IdempotencyOptions idempotencyOptions, string functionName) Parameters Type Name Description IdempotencyOptions idempotencyOptions Idempotency configuration settings System.String functionName The name of the function being decorated DeleteRecord(JsonDocument, Exception) Delete record from the persistence store Declaration public virtual Task DeleteRecord(JsonDocument data, Exception throwable) Parameters Type Name Description JsonDocument data Payload Exception throwable The throwable thrown by the function Returns Type Description Task DeleteRecord(String) Remove item from persistence store Declaration public abstract Task DeleteRecord(string idempotencyKey) Parameters Type Name Description System.String idempotencyKey idempotencyKey the key of the record Returns Type Description Task GetRecord(JsonDocument, DateTimeOffset) Retrieve idempotency key for data provided, fetch from persistence store, and convert to DataRecord. Declaration public virtual Task<DataRecord> GetRecord(JsonDocument data, DateTimeOffset now) Parameters Type Name Description JsonDocument data Payload DateTimeOffset now Returns Type Description Task < DataRecord > DataRecord representation of existing record found in persistence store GetRecord(String) Retrieve item from persistence store using idempotency key and return it as a DataRecord instance. Declaration public abstract Task<DataRecord> GetRecord(string idempotencyKey) Parameters Type Name Description System.String idempotencyKey idempotencyKey the key of the record Returns Type Description Task < DataRecord > DataRecord representation of existing record found in persistence store Exceptions Type Condition IdempotencyItemNotFoundException Exception thrown if no record exists in persistence store with the idempotency key PutRecord(DataRecord, DateTimeOffset) Add a DataRecord to persistence store if it does not already exist with that key Declaration public abstract Task PutRecord(DataRecord record, DateTimeOffset now) Parameters Type Name Description DataRecord record record DataRecord instance DateTimeOffset now Returns Type Description Task Exceptions Type Condition IdempotencyItemAlreadyExistsException if a non-expired entry already exists. SaveInProgress(JsonDocument, DateTimeOffset) Save record of function's execution being in progress Declaration public virtual Task SaveInProgress(JsonDocument data, DateTimeOffset now) Parameters Type Name Description JsonDocument data Payload DateTimeOffset now The current date time Returns Type Description Task Exceptions Type Condition IdempotencyItemAlreadyExistsException SaveSuccess(JsonDocument, Object, DateTimeOffset) Save record of function's execution completing successfully Declaration public virtual Task SaveSuccess(JsonDocument data, object result, DateTimeOffset now) Parameters Type Name Description JsonDocument data Payload System.Object result the response from the function DateTimeOffset now The current date time Returns Type Description Task UpdateRecord(DataRecord) Update item in persistence store Declaration public abstract Task UpdateRecord(DataRecord record) Parameters Type Name Description DataRecord record DataRecord instance Returns Type Description Task Implements IPersistenceStore"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Persistence.DataRecord.DataRecordStatus.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Persistence.DataRecord.DataRecordStatus.html",
    "title": "Enum DataRecord.DataRecordStatus | Powertools for AWS Lambda (.NET)",
    "keywords": "Enum DataRecord.DataRecordStatus Status of the record: -- INPROGRESS: record initialized when function starts -- COMPLETED: record updated with the result of the function when it ends -- EXPIRED: record expired, idempotency will not happen Namespace : AWS.Lambda.Powertools.Idempotency.Persistence Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public enum DataRecordStatus : int Fields Name Description COMPLETED record updated with the result of the function when it ends EXPIRED record expired, idempotency will not happen INPROGRESS record initialized when function starts"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Persistence.DataRecord.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Persistence.DataRecord.html",
    "title": "Class DataRecord | Powertools for AWS Lambda (.NET)",
    "keywords": "Class DataRecord Data Class for idempotency records. This is actually the item that will be stored in the persistence layer. Inheritance System.Object DataRecord Namespace : AWS.Lambda.Powertools.Idempotency.Persistence Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class DataRecord : object Constructors DataRecord(String, DataRecord.DataRecordStatus, Int64, String, String) Creates a new DataRecord Declaration public DataRecord(string idempotencyKey, DataRecord.DataRecordStatus status, long expiryTimestamp, string responseData, string payloadHash) Parameters Type Name Description System.String idempotencyKey Hash representation of either entire event or specific configured subject of the event DataRecord.DataRecordStatus status The DataRecordStatus System.Int64 expiryTimestamp Unix timestamp of when record expires System.String responseData JSON serialized invocation results System.String payloadHash A hash representation of the entire event Properties ExpiryTimestamp Unix timestamp of when record expires Declaration public long ExpiryTimestamp { get; } Property Value Type Description System.Int64 IdempotencyKey A hash representation of either the entire event or a specific configured subset of the event Declaration public string IdempotencyKey { get; } Property Value Type Description System.String PayloadHash A hash representation of the entire event Declaration public string PayloadHash { get; } Property Value Type Description System.String ResponseData JSON serialized invocation results Declaration public string ResponseData { get; } Property Value Type Description System.String Status Represents the DataRecord.DataRecordStatus Status Declaration public DataRecord.DataRecordStatus Status { get; } Property Value Type Description DataRecord.DataRecordStatus Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 IsExpired(DateTimeOffset) Check if data record is expired (based on expiration configured in the IdempotencyConfig Declaration public bool IsExpired(DateTimeOffset now) Parameters Type Name Description DateTimeOffset now Returns Type Description System.Boolean Whether the record is currently expired or not"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Persistence.DynamoDBPersistenceStore.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Persistence.DynamoDBPersistenceStore.html",
    "title": "Class DynamoDBPersistenceStore | Powertools for AWS Lambda (.NET)",
    "keywords": "Class DynamoDBPersistenceStore DynamoDB version of the BasePersistenceStore . Will store idempotency data in DynamoDB. Inheritance System.Object BasePersistenceStore DynamoDBPersistenceStore Implements IPersistenceStore Inherited Members BasePersistenceStore.PayloadValidationEnabled BasePersistenceStore.Configure(IdempotencyOptions, String) BasePersistenceStore.SaveSuccess(JsonDocument, Object, DateTimeOffset) BasePersistenceStore.SaveInProgress(JsonDocument, DateTimeOffset) BasePersistenceStore.DeleteRecord(JsonDocument, Exception) BasePersistenceStore.GetRecord(JsonDocument, DateTimeOffset) Namespace : AWS.Lambda.Powertools.Idempotency.Persistence Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class DynamoDBPersistenceStore : BasePersistenceStore, IPersistenceStore Methods DeleteRecord(String) Remove item from persistence store Declaration public override Task DeleteRecord(string idempotencyKey) Parameters Type Name Description System.String idempotencyKey idempotencyKey the key of the record Returns Type Description Task Overrides BasePersistenceStore.DeleteRecord(String) GetRecord(String) Retrieve item from persistence store using idempotency key and return it as a DataRecord instance. Declaration public override Task<DataRecord> GetRecord(string idempotencyKey) Parameters Type Name Description System.String idempotencyKey idempotencyKey the key of the record Returns Type Description Task < DataRecord > DataRecord representation of existing record found in persistence store Overrides BasePersistenceStore.GetRecord(String) Exceptions Type Condition IdempotencyItemNotFoundException Exception thrown if no record exists in persistence store with the idempotency key PutRecord(DataRecord, DateTimeOffset) Add a DataRecord to persistence store if it does not already exist with that key Declaration public override Task PutRecord(DataRecord record, DateTimeOffset now) Parameters Type Name Description DataRecord record record DataRecord instance DateTimeOffset now Returns Type Description Task Overrides BasePersistenceStore.PutRecord(DataRecord, DateTimeOffset) Exceptions Type Condition IdempotencyItemAlreadyExistsException if a non-expired entry already exists. UpdateRecord(DataRecord) Update item in persistence store Declaration public override Task UpdateRecord(DataRecord record) Parameters Type Name Description DataRecord record DataRecord instance Returns Type Description Task Overrides BasePersistenceStore.UpdateRecord(DataRecord) Implements IPersistenceStore"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Persistence.DynamoDBPersistenceStoreBuilder.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Persistence.DynamoDBPersistenceStoreBuilder.html",
    "title": "Class DynamoDBPersistenceStoreBuilder | Powertools for AWS Lambda (.NET)",
    "keywords": "Class DynamoDBPersistenceStoreBuilder Use this builder to get an instance of DynamoDBPersistenceStore . With this builder you can configure the characteristics of the DynamoDB Table (name, key, sort key, and other field names). You can also set a custom AmazonDynamoDBClient for further tuning. Inheritance System.Object DynamoDBPersistenceStoreBuilder Namespace : AWS.Lambda.Powertools.Idempotency.Persistence Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class DynamoDBPersistenceStoreBuilder : object Methods Build() Initialize and return a new instance of {@link DynamoDBPersistenceStore}. Example: DynamoDBPersistenceStore.builder().withTableName(\"idempotency_store\").build(); Declaration public DynamoDBPersistenceStore Build() Returns Type Description DynamoDBPersistenceStore WithDataAttr(String) DynamoDB attribute name for response data (optional), by default \"data\" Declaration public DynamoDBPersistenceStoreBuilder WithDataAttr(string dataAttr) Parameters Type Name Description System.String dataAttr dataAttr name of the data attribute in the table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithDynamoDBClient(AmazonDynamoDBClient) Custom DynamoDbClient used to query DynamoDB (optional). The default one uses UrlConnectionHttpClient as a http client and Declaration public DynamoDBPersistenceStoreBuilder WithDynamoDBClient(AmazonDynamoDBClient dynamoDbClient) Parameters Type Name Description AmazonDynamoDBClient dynamoDbClient dynamoDbClient the DynamoDbClient instance to use Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithExpiryAttr(String) DynamoDB attribute name for expiry timestamp (optional), by default \"expiration\" Declaration public DynamoDBPersistenceStoreBuilder WithExpiryAttr(string expiryAttr) Parameters Type Name Description System.String expiryAttr expiryAttr name of the expiry attribute in the table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithKeyAttr(String) DynamoDB attribute name for partition key (optional), by default \"id\" Declaration public DynamoDBPersistenceStoreBuilder WithKeyAttr(string keyAttr) Parameters Type Name Description System.String keyAttr keyAttr name of the key attribute in the table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithSortKeyAttr(String) DynamoDB attribute name for the sort key (optional) Declaration public DynamoDBPersistenceStoreBuilder WithSortKeyAttr(string sortKeyAttr) Parameters Type Name Description System.String sortKeyAttr sortKeyAttr name of the sort key attribute in the table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithStaticPkValue(String) DynamoDB attribute value for partition key (optional), by default \"idempotency#[function-name]\". This will be used if the {@link #sortKeyAttr} is set. Declaration public DynamoDBPersistenceStoreBuilder WithStaticPkValue(string staticPkValue) Parameters Type Name Description System.String staticPkValue staticPkValue name of the partition key attribute in the table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithStatusAttr(String) DynamoDB attribute name for status (optional), by default \"status\" Declaration public DynamoDBPersistenceStoreBuilder WithStatusAttr(string statusAttr) Parameters Type Name Description System.String statusAttr statusAttr name of the status attribute in the table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithTableName(String) Name of the table to use for storing execution records (mandatory) Declaration public DynamoDBPersistenceStoreBuilder WithTableName(string tableName) Parameters Type Name Description System.String tableName tableName Name of the DynamoDB table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations) WithValidationAttr(String) DynamoDB attribute name for validation (optional), by default \"validation\" Declaration public DynamoDBPersistenceStoreBuilder WithValidationAttr(string validationAttr) Parameters Type Name Description System.String validationAttr validationAttr name of the validation attribute in the table Returns Type Description DynamoDBPersistenceStoreBuilder the builder instance (to chain operations)"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Persistence.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Persistence.html",
    "title": "Namespace AWS.Lambda.Powertools.Idempotency.Persistence | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Idempotency.Persistence Classes BasePersistenceStore Persistence layer that will store the idempotency result. Base implementation. See DynamoDBPersistenceStore for an implementation (default one) Extend this class to use your own implementation (DocumentDB, ElastiCache, ...) DataRecord Data Class for idempotency records. This is actually the item that will be stored in the persistence layer. DynamoDBPersistenceStore DynamoDB version of the BasePersistenceStore . Will store idempotency data in DynamoDB. DynamoDBPersistenceStoreBuilder Use this builder to get an instance of DynamoDBPersistenceStore . With this builder you can configure the characteristics of the DynamoDB Table (name, key, sort key, and other field names). You can also set a custom AmazonDynamoDBClient for further tuning. Interfaces IPersistenceStore Persistence layer that will store the idempotency result. In order to provide another implementation, extends {@link BasePersistenceStore}. Enums DataRecord.DataRecordStatus Status of the record: -- INPROGRESS: record initialized when function starts -- COMPLETED: record updated with the result of the function when it ends -- EXPIRED: record expired, idempotency will not happen"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Persistence.IPersistenceStore.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Persistence.IPersistenceStore.html",
    "title": "Interface IPersistenceStore | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IPersistenceStore Persistence layer that will store the idempotency result. In order to provide another implementation, extends {@link BasePersistenceStore}. Namespace : AWS.Lambda.Powertools.Idempotency.Persistence Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public interface IPersistenceStore Methods DeleteRecord(String) Remove item from persistence store Declaration Task DeleteRecord(string idempotencyKey) Parameters Type Name Description System.String idempotencyKey idempotencyKey the key of the record Returns Type Description Task GetRecord(String) Retrieve item from persistence store using idempotency key and return it as a DataRecord instance. Declaration Task<DataRecord> GetRecord(string idempotencyKey) Parameters Type Name Description System.String idempotencyKey idempotencyKey the key of the record Returns Type Description Task < DataRecord > DataRecord representation of existing record found in persistence store Exceptions Type Condition IdempotencyItemNotFoundException Exception thrown if no record exists in persistence store with the idempotency key PutRecord(DataRecord, DateTimeOffset) Add a DataRecord to persistence store if it does not already exist with that key Declaration Task PutRecord(DataRecord record, DateTimeOffset now) Parameters Type Name Description DataRecord record record DataRecord instance DateTimeOffset now Returns Type Description Task Exceptions Type Condition IdempotencyItemAlreadyExistsException if a non-expired entry already exists. UpdateRecord(DataRecord) Update item in persistence store Declaration Task UpdateRecord(DataRecord record) Parameters Type Name Description DataRecord record DataRecord instance Returns Type Description Task"
  },
  "api/AWS.Lambda.Powertools.Idempotency.Serialization.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Serialization.html",
    "title": "Namespace AWS.Lambda.Powertools.Idempotency.Serialization | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Idempotency.Serialization Classes JsonFunction Creates JMESPath function powertools_json() to treat the payload as a JSON object rather than a string."
  },
  "api/AWS.Lambda.Powertools.Idempotency.Serialization.JsonFunction.html": {
    "href": "api/AWS.Lambda.Powertools.Idempotency.Serialization.JsonFunction.html",
    "title": "Class JsonFunction | Powertools for AWS Lambda (.NET)",
    "keywords": "Class JsonFunction Creates JMESPath function powertools_json() to treat the payload as a JSON object rather than a string. Inheritance System.Object JsonFunction Namespace : AWS.Lambda.Powertools.Idempotency.Serialization Assembly : AWS.Lambda.Powertools.Idempotency.dll Syntax public class JsonFunction : JmesPathFunction Constructors JsonFunction() Declaration public JsonFunction() Methods Execute(JmesPathFunctionArgument[]) Declaration public override JToken Execute(params JmesPathFunctionArgument[] args) Parameters Type Name Description JmesPathFunctionArgument [] args Returns Type Description JToken"
  },
  "api/AWS.Lambda.Powertools.Logging.CorrelationIdPaths.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.CorrelationIdPaths.html",
    "title": "Class CorrelationIdPaths | Powertools for AWS Lambda (.NET)",
    "keywords": "Class CorrelationIdPaths Supported Event types from which Correlation ID can be extracted Inheritance System.Object CorrelationIdPaths Namespace : AWS.Lambda.Powertools.Logging Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public static class CorrelationIdPaths : object Fields ApiGatewayHttp To use when function is expecting API Gateway HTTP API request event Declaration public const string ApiGatewayHttp = null Field Value Type Description System.String ApiGatewayRest To use when function is expecting API Gateway Rest API request event Declaration public const string ApiGatewayRest = null Field Value Type Description System.String ApplicationLoadBalancer To use when function is expecting Application Load balancer request event Declaration public const string ApplicationLoadBalancer = null Field Value Type Description System.String EventBridge To use when function is expecting EventBridge request event Declaration public const string EventBridge = null Field Value Type Description System.String"
  },
  "api/AWS.Lambda.Powertools.Logging.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.html",
    "title": "Namespace AWS.Lambda.Powertools.Logging | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Logging Classes CorrelationIdPaths Supported Event types from which Correlation ID can be extracted Logger Class Logger. LoggerConfiguration Class LoggerConfiguration. Implements the Microsoft.Extensions.Options.IOptions{LoggerConfiguration} LoggerExtensions Class LoggerExtensions. LoggingAttribute Provides a Lambda optimized logger with output structured as JSON. Key features --------------------- Capture key fields from Lambda context and cold start Log Lambda event when instructed (disabled by default) Log sampling enables DEBUG log level for a percentage of requests (disabled by default) Append additional keys to structured log at any point in time Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_LOG_LEVEL string, logging level (e.g. Information, Debug, and Trace) POWERTOOLS_LOGGER_CASE string, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) POWERTOOLS_LOGGER_SAMPLE_RATE double, sampling rate ranging from 0 to 1, 1 being 100% sampling Parameters ----------- Parameter name Description Service string, service name to be appended in logs, by default \"service_undefined\" LogLevel enum, logging level (e.g. Information, Debug, and Trace), by default Information LoggerOutputCase enum, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) SamplingRate double, sample rate for debug calls within execution context defaults to 0.0 CorrelationIdPath string, pointer path to extract correlation id from input parameter ClearState bool, clear all custom keys on each request, by default false Enums LoggerOutputCase Enum LoggerOutputCase"
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.Converters.ConstantClassConverter.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.Converters.ConstantClassConverter.html",
    "title": "Class ConstantClassConverter | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ConstantClassConverter JsonConvert to handle the AWS SDK for .NET custom enum classes that derive from the class called ConstantClass. Inheritance System.Object ConstantClassConverter Namespace : AWS.Lambda.Powertools.Logging.Internal.Converters Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public class ConstantClassConverter : JsonConverter<object> Methods CanConvert(Type) Check to see if the type is derived from ConstantClass. Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type which should be converted. Returns Type Description System.Boolean True if the type is derived from ConstantClass, False otherwise. Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Converter throws NotSupportedException. Deserializing ConstantClass is not allowed. Declaration public override object Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Reference to the JsonReader Type typeToConvert The type which should be converted. JsonSerializerOptions options The Json serializer options. Returns Type Description System.Object Write(Utf8JsonWriter, Object, JsonSerializerOptions) Write the ConstantClass instance as JSON. Declaration public override void Write(Utf8JsonWriter writer, object value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The unicode JsonWriter. System.Object value The exception instance. JsonSerializerOptions options The JsonSerializer options."
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.Converters.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.Converters.html",
    "title": "Namespace AWS.Lambda.Powertools.Logging.Internal.Converters | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Logging.Internal.Converters Classes ConstantClassConverter JsonConvert to handle the AWS SDK for .NET custom enum classes that derive from the class called ConstantClass."
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.html",
    "title": "Namespace AWS.Lambda.Powertools.Logging.Internal | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Logging.Internal Classes LoggerProvider Class LoggerProvider. This class cannot be inherited. Implements the Microsoft.Extensions.Logging.ILoggerProvider"
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.LoggerProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.LoggerProvider.html",
    "title": "Class LoggerProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Class LoggerProvider Class LoggerProvider. This class cannot be inherited. Implements the Microsoft.Extensions.Logging.ILoggerProvider Inheritance System.Object LoggerProvider Namespace : AWS.Lambda.Powertools.Logging.Internal Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public sealed class LoggerProvider : ILoggerProvider Constructors LoggerProvider(IOptions<LoggerConfiguration>) Initializes a new instance of the LoggerProvider class. Declaration public LoggerProvider(IOptions<LoggerConfiguration> config) Parameters Type Name Description IOptions < LoggerConfiguration > config The configuration. Methods CreateLogger(String) Creates a new Microsoft.Extensions.Logging.ILogger instance. Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description System.String categoryName The category name for messages produced by the logger. Returns Type Description ILogger The instance of Microsoft.Extensions.Logging.ILogger that was created. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() See Also Microsoft.Extensions.Logging.ILoggerProvider"
  },
  "api/AWS.Lambda.Powertools.Logging.Logger.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Logger.html",
    "title": "Class Logger | Powertools for AWS Lambda (.NET)",
    "keywords": "Class Logger Class Logger. Inheritance System.Object Logger Namespace : AWS.Lambda.Powertools.Logging Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public class Logger : object Methods AppendKey(String, Object) Appending additional key to the log context. Declaration public static void AppendKey(string key, object value) Parameters Type Name Description System.String key The key. System.Object value The value. AppendKeys(IEnumerable<KeyValuePair<String, Object>>) Appending additional key to the log context. Declaration public static void AppendKeys(IEnumerable<KeyValuePair<string, object>> keys) Parameters Type Name Description IEnumerable < KeyValuePair < System.String , System.Object >> keys The list of keys. AppendKeys(IEnumerable<KeyValuePair<String, String>>) Appending additional key to the log context. Declaration public static void AppendKeys(IEnumerable<KeyValuePair<string, string>> keys) Parameters Type Name Description IEnumerable < KeyValuePair < System.String , System.String >> keys The list of keys. Create(String) Creates a new Microsoft.Extensions.Logging.ILogger instance. Declaration public static ILogger Create(string categoryName) Parameters Type Name Description System.String categoryName The category name for messages produced by the logger. Returns Type Description ILogger The instance of Microsoft.Extensions.Logging.ILogger that was created. Create<T>() Creates a new Microsoft.Extensions.Logging.ILogger instance. Declaration public static ILogger Create<T>() Returns Type Description ILogger The instance of Microsoft.Extensions.Logging.ILogger that was created. Type Parameters Name Description T GetAllKeys() Returns all additional keys added to the log context. Declaration public static IEnumerable<KeyValuePair<string, object>> GetAllKeys() Returns Type Description IEnumerable < KeyValuePair < System.String , System.Object >> IEnumerable<KeyValuePair<System.String, System.Object>>. Log(LogLevel, EventId, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message. System.Object [] args An object array that contains zero or more objects to format. Log(LogLevel, EventId, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, EventId eventId, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. System.String message Format string of the log message. System.Object [] args An object array that contains zero or more objects to format. Log(LogLevel, Exception) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, Exception exception) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. Examples logger.Log(LogLevel.Information, exception) Log(LogLevel, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, Exception exception, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. System.String message Format string of the log message. System.Object [] args An object array that contains zero or more objects to format. Log(LogLevel, Object) Formats and writes a log message as JSON at the specified log level. Declaration public static void Log(LogLevel logLevel, object message) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. System.Object message The object to be serialized as JSON. Examples logger.Log(LogLevel.Information, new {User = user, Address = address}) Log(LogLevel, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. System.String message Format string of the log message. System.Object [] args An object array that contains zero or more objects to format. Log<T>(LogLevel, T, EventId, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, exception, \"Error while processing request from {Address}\", address) Log<T>(LogLevel, T, EventId, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, \"Processing request from {Address}\", address) Log<T>(LogLevel, T, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, exception, \"Error while processing request from {Address}\", address) Log<T>(LogLevel, T, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, \"Processing request from {Address}\", address) Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Writes a log entry. Declaration public static void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func <TState, Exception , System.String > formatter Function to create a System.String message of the state and exception . Type Parameters Name Description TState The type of the object to be written. LogCritical(EventId, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(0, exception, \"Error while processing request from {Address}\", address) LogCritical(EventId, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(0, \"Processing request from {Address}\", address) LogCritical(Exception) Formats and writes an critical log message. Declaration public static void LogCritical(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogCritical(exception) LogCritical(Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(exception, \"Error while processing request from {Address}\", address) LogCritical(Object) Formats and writes a critical log message as JSON. Declaration public static void LogCritical(object message) Parameters Type Name Description System.Object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogCritical(String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(string message, params object[] args) Parameters Type Name Description System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(\"Processing request from {Address}\", address) LogCritical<T>(T, EventId, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(T, EventId, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, \"Processing request from {Address}\", address) LogCritical<T>(T, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(T, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, \"Processing request from {Address}\", address) LogDebug(EventId, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(0, exception, \"Error while processing request from {Address}\", address) LogDebug(EventId, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(0, \"Processing request from {Address}\", address) LogDebug(Exception) Formats and writes an debug log message. Declaration public static void LogDebug(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogDebug(exception) LogDebug(Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(exception, \"Error while processing request from {Address}\", address) LogDebug(Object) Formats and writes a debug log message as JSON. Declaration public static void LogDebug(object message) Parameters Type Name Description System.Object message The object to be serialized as JSON. Examples logger.LogDebug(new {User = user, Address = address}) LogDebug(String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(string message, params object[] args) Parameters Type Name Description System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(\"Processing request from {Address}\", address) LogDebug<T>(T, EventId, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(T, EventId, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, \"Processing request from {Address}\", address) LogDebug<T>(T, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(T, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, \"Processing request from {Address}\", address) LogError(EventId, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogError(0, exception, \"Error while processing request from {Address}\", address) LogError(EventId, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogError(0, \"Processing request from {Address}\", address) LogError(Exception) Formats and writes an error log message. Declaration public static void LogError(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogError(exception) LogError(Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogError(exception, \"Error while processing request from {Address}\", address) LogError(Object) Formats and writes a error log message as JSON. Declaration public static void LogError(object message) Parameters Type Name Description System.Object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogError(String, Object[]) Formats and writes an error log message. Declaration public static void LogError(string message, params object[] args) Parameters Type Name Description System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogError(\"Processing request from {Address}\", address) LogError<T>(T, EventId, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogError<T>(T, EventId, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, \"Processing request from {Address}\", address) LogError<T>(T, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, exception, \"Error while processing request from {Address}\", address) LogError<T>(T, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, \"Processing request from {Address}\", address) LogInformation(EventId, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(0, exception, \"Error while processing request from {Address}\", address) LogInformation(EventId, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(0, \"Processing request from {Address}\", address) LogInformation(Exception) Formats and writes an information log message. Declaration public static void LogInformation(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogInformation(exception) LogInformation(Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(exception, \"Error while processing request from {Address}\", address) LogInformation(Object) Formats and writes an information log message as JSON. Declaration public static void LogInformation(object message) Parameters Type Name Description System.Object message The object to be serialized as JSON. Examples logger.LogInformation(new {User = user, Address = address}) LogInformation(String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(string message, params object[] args) Parameters Type Name Description System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(\"Processing request from {Address}\", address) LogInformation<T>(T, EventId, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(T, EventId, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, \"Processing request from {Address}\", address) LogInformation<T>(T, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(T, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, \"Processing request from {Address}\", address) LogTrace(EventId, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(0, exception, \"Error while processing request from {Address}\", address) LogTrace(EventId, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(0, \"Processing request from {Address}\", address) LogTrace(Exception) Formats and writes an trace log message. Declaration public static void LogTrace(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogTrace(exception) LogTrace(Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(exception, \"Error while processing request from {Address}\", address) LogTrace(Object) Formats and writes a trace log message as JSON. Declaration public static void LogTrace(object message) Parameters Type Name Description System.Object message The object to be serialized as JSON. Examples logger.LogTrace(new {User = user, Address = address}) LogTrace(String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(string message, params object[] args) Parameters Type Name Description System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(\"Processing request from {Address}\", address) LogTrace<T>(T, EventId, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(T, EventId, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, \"Processing request from {Address}\", address) LogTrace<T>(T, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(T, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, \"Processing request from {Address}\", address) LogWarning(EventId, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(0, exception, \"Error while processing request from {Address}\", address) LogWarning(EventId, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(0, \"Processing request from {Address}\", address) LogWarning(Exception) Formats and writes an warning log message. Declaration public static void LogWarning(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogWarning(exception) LogWarning(Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(exception, \"Error while processing request from {Address}\", address) LogWarning(Object) Formats and writes a warning log message as JSON. Declaration public static void LogWarning(object message) Parameters Type Name Description System.Object message The object to be serialized as JSON. Examples logger.LogWarning(new {User = user, Address = address}) LogWarning(String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(string message, params object[] args) Parameters Type Name Description System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(\"Processing request from {Address}\", address) LogWarning<T>(T, EventId, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(T, EventId, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, \"Processing request from {Address}\", address) LogWarning<T>(T, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(T, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, \"Processing request from {Address}\", address) RemoveKeys(String[]) Remove additional keys from the log context. Declaration public static void RemoveKeys(params string[] keys) Parameters Type Name Description System.String [] keys The list of keys."
  },
  "api/AWS.Lambda.Powertools.Logging.LoggerConfiguration.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggerConfiguration.html",
    "title": "Class LoggerConfiguration | Powertools for AWS Lambda (.NET)",
    "keywords": "Class LoggerConfiguration Class LoggerConfiguration. Implements the Microsoft.Extensions.Options.IOptions{LoggerConfiguration} Inheritance System.Object LoggerConfiguration Namespace : AWS.Lambda.Powertools.Logging Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public class LoggerConfiguration : IOptions<LoggerConfiguration> Properties LoggerOutputCase The logger output case. This can be also set using the environment variable POWERTOOLS_LOGGER_CASE . Declaration public LoggerOutputCase? LoggerOutputCase { get; set; } Property Value Type Description System.Nullable < LoggerOutputCase > The logger output case. MinimumLevel Specify the minimum log level for logging (Information, by default). This can be also set using the environment variable POWERTOOLS_LOG_LEVEL . Declaration public LogLevel? MinimumLevel { get; set; } Property Value Type Description System.Nullable < LogLevel > The minimum level. SamplingRate Dynamically set a percentage of logs to DEBUG level. This can be also set using the environment variable POWERTOOLS_LOGGER_SAMPLE_RATE . Declaration public double? SamplingRate { get; set; } Property Value Type Description System.Nullable < System.Double > The sampling rate. Service Service name is used for logging. This can be also set using the environment variable POWERTOOLS_SERVICE_NAME . Declaration public string Service { get; set; } Property Value Type Description System.String The service. See Also Microsoft.Extensions.Options.IOptions{LoggerConfiguration}"
  },
  "api/AWS.Lambda.Powertools.Logging.LoggerExtensions.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggerExtensions.html",
    "title": "Class LoggerExtensions | Powertools for AWS Lambda (.NET)",
    "keywords": "Class LoggerExtensions Class LoggerExtensions. Inheritance System.Object LoggerExtensions Namespace : AWS.Lambda.Powertools.Logging Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public static class LoggerExtensions : object Methods Log(ILogger, LogLevel, Exception) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, Exception exception) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. Examples logger.Log(LogLevel.Information, exception) Log(ILogger, LogLevel, Object) Formats and writes a log message as JSON at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, object message) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. LogLevel logLevel Entry will be written on this level. System.Object message The object to be serialized as JSON. Examples logger.Log(LogLevel.Information, new {User = user, Address = address}) Log<T>(ILogger, LogLevel, T, EventId, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, exception, \"Error while processing request from {Address}\", address) Log<T>(ILogger, LogLevel, T, EventId, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, \"Processing request from {Address}\", address) Log<T>(ILogger, LogLevel, T, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, exception, \"Error while processing request from {Address}\", address) Log<T>(ILogger, LogLevel, T, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, \"Processing request from {Address}\", address) LogCritical(ILogger, Exception) Formats and writes an critical log message. Declaration public static void LogCritical(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. Exception exception The exception to log. Examples logger.LogCritical(exception) LogCritical(ILogger, Object) Formats and writes a critical log message as JSON. Declaration public static void LogCritical(this ILogger logger, object message) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. System.Object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogCritical<T>(ILogger, T, EventId, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(ILogger, T, EventId, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, \"Processing request from {Address}\", address) LogCritical<T>(ILogger, T, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(ILogger, T, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, \"Processing request from {Address}\", address) LogDebug(ILogger, Exception) Formats and writes an debug log message. Declaration public static void LogDebug(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. Exception exception The exception to log. Examples logger.LogDebug(exception) LogDebug(ILogger, Object) Formats and writes a debug log message as JSON. Declaration public static void LogDebug(this ILogger logger, object message) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. System.Object message The object to be serialized as JSON. Examples logger.LogDebug(new {User = user, Address = address}) LogDebug<T>(ILogger, T, EventId, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(ILogger, T, EventId, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, \"Processing request from {Address}\", address) LogDebug<T>(ILogger, T, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(ILogger, T, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, \"Processing request from {Address}\", address) LogError(ILogger, Exception) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. Exception exception The exception to log. Examples logger.LogError(exception) LogError(ILogger, Object) Formats and writes a error log message as JSON. Declaration public static void LogError(this ILogger logger, object message) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. System.Object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogError<T>(ILogger, T, EventId, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogError<T>(ILogger, T, EventId, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, \"Processing request from {Address}\", address) LogError<T>(ILogger, T, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, exception, \"Error while processing request from {Address}\", address) LogError<T>(ILogger, T, String, Object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, \"Processing request from {Address}\", address) LogInformation(ILogger, Exception) Formats and writes an information log message. Declaration public static void LogInformation(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. Exception exception The exception to log. Examples logger.LogInformation(exception) LogInformation(ILogger, Object) Formats and writes an information log message as JSON. Declaration public static void LogInformation(this ILogger logger, object message) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. System.Object message The object to be serialized as JSON. Examples logger.LogInformation(new {User = user, Address = address}) LogInformation<T>(ILogger, T, EventId, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(ILogger, T, EventId, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, \"Processing request from {Address}\", address) LogInformation<T>(ILogger, T, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(ILogger, T, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, \"Processing request from {Address}\", address) LogTrace(ILogger, Exception) Formats and writes an trace log message. Declaration public static void LogTrace(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. Exception exception The exception to log. Examples logger.LogTrace(exception) LogTrace(ILogger, Object) Formats and writes a trace log message as JSON. Declaration public static void LogTrace(this ILogger logger, object message) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. System.Object message The object to be serialized as JSON. Examples logger.LogTrace(new {User = user, Address = address}) LogTrace<T>(ILogger, T, EventId, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(ILogger, T, EventId, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, \"Processing request from {Address}\", address) LogTrace<T>(ILogger, T, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(ILogger, T, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, \"Processing request from {Address}\", address) LogWarning(ILogger, Exception) Formats and writes an warning log message. Declaration public static void LogWarning(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. Exception exception The exception to log. Examples logger.LogWarning(exception) LogWarning(ILogger, Object) Formats and writes a warning log message as JSON. Declaration public static void LogWarning(this ILogger logger, object message) Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. System.Object message The object to be serialized as JSON. Examples logger.LogWarning(new {User = user, Address = address}) LogWarning<T>(ILogger, T, EventId, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(ILogger, T, EventId, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, \"Processing request from {Address}\", address) LogWarning<T>(ILogger, T, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(ILogger, T, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The Microsoft.Extensions.Logging.ILogger to write to. T extraKeys Additional keys will be appended to the log entry. System.String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" System.Object [] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, \"Processing request from {Address}\", address)"
  },
  "api/AWS.Lambda.Powertools.Logging.LoggerOutputCase.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggerOutputCase.html",
    "title": "Enum LoggerOutputCase | Powertools for AWS Lambda (.NET)",
    "keywords": "Enum LoggerOutputCase Enum LoggerOutputCase Namespace : AWS.Lambda.Powertools.Logging Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public enum LoggerOutputCase : int Fields Name Description CamelCase Camel Case PascalCase Pascal Case SnakeCase Snake Case"
  },
  "api/AWS.Lambda.Powertools.Logging.LoggingAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggingAttribute.html",
    "title": "Class LoggingAttribute | Powertools for AWS Lambda (.NET)",
    "keywords": "Class LoggingAttribute Provides a Lambda optimized logger with output structured as JSON. Key features --------------------- Capture key fields from Lambda context and cold start Log Lambda event when instructed (disabled by default) Log sampling enables DEBUG log level for a percentage of requests (disabled by default) Append additional keys to structured log at any point in time Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_LOG_LEVEL string, logging level (e.g. Information, Debug, and Trace) POWERTOOLS_LOGGER_CASE string, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) POWERTOOLS_LOGGER_SAMPLE_RATE double, sampling rate ranging from 0 to 1, 1 being 100% sampling Parameters ----------- Parameter name Description Service string, service name to be appended in logs, by default \"service_undefined\" LogLevel enum, logging level (e.g. Information, Debug, and Trace), by default Information LoggerOutputCase enum, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) SamplingRate double, sample rate for debug calls within execution context defaults to 0.0 CorrelationIdPath string, pointer path to extract correlation id from input parameter ClearState bool, clear all custom keys on each request, by default false Inheritance System.Object UniversalWrapperAttribute MethodAspectAttribute LoggingAttribute Inherited Members AWS.Lambda.Powertools.Common.MethodAspectAttribute.WrapSync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) AWS.Lambda.Powertools.Common.MethodAspectAttribute.WrapAsync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) Namespace : AWS.Lambda.Powertools.Logging Assembly : AWS.Lambda.Powertools.Logging.dll Syntax public class LoggingAttribute : MethodAspectAttribute Examples [Logging( Service = \"Example\", LogEvent = true, ClearState = true, LogLevel = LogLevel.Debug, LoggerOutputCase = LoggerOutputCase.SnakeCase, CorrelationIdPath = \"/headers/my_request_id_header\") ] public async Task<APIGatewayProxyResponse> FunctionHandler (APIGatewayProxyRequest apigProxyEvent, ILambdaContext context) { ... } Properties ClearState Logger is commonly initialized in the global scope. Due to Lambda Execution Context reuse, this means that custom keys can be persisted across invocations. Set this attribute to true if you want all custom keys to be deleted on each request. Declaration public bool ClearState { get; set; } Property Value Type Description System.Boolean true if [clear state]; otherwise, false . CorrelationIdPath Pointer path to extract correlation id from input parameter. The first handler parameter is the input to the handler, which can be event data (published by an event source) or custom input that you provide such as a string or any custom data object. Declaration public string CorrelationIdPath { get; set; } Property Value Type Description System.String The correlation identifier path. LogEvent Explicitly log any incoming event, The first handler parameter is the input to the handler, which can be event data (published by an event source) or custom input that you provide such as a string or any custom data object. Declaration public bool LogEvent { get; set; } Property Value Type Description System.Boolean true if [log event]; otherwise, false . LoggerOutputCase Specify output case for logging (SnakeCase, by default). This can be also set using the environment variable POWERTOOLS_LOGGER_CASE . Declaration public LoggerOutputCase LoggerOutputCase { get; set; } Property Value Type Description LoggerOutputCase The log level. LogLevel Specify the minimum log level for logging (Information, by default). This can be also set using the environment variable POWERTOOLS_LOG_LEVEL . Declaration public LogLevel LogLevel { get; set; } Property Value Type Description LogLevel The log level. SamplingRate Dynamically set a percentage of logs to DEBUG level. This can be also set using the environment variable POWERTOOLS_LOGGER_SAMPLE_RATE . Declaration public double SamplingRate { get; set; } Property Value Type Description System.Double The sampling rate. Service Service name is used for logging. This can be also set using the environment variable POWERTOOLS_SERVICE_NAME . Declaration public string Service { get; set; } Property Value Type Description System.String The service. Methods CreateHandler() Creates the handler. Declaration protected override IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. Overrides MethodAspectAttribute.CreateHandler()"
  },
  "api/AWS.Lambda.Powertools.Metrics.DimensionSet.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.DimensionSet.html",
    "title": "Class DimensionSet | Powertools for AWS Lambda (.NET)",
    "keywords": "Class DimensionSet List of key-value pairs with Metric Dimensions Inheritance System.Object DimensionSet Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class DimensionSet : object Constructors DimensionSet(String, String) Initializes a new instance of the DimensionSet class. Declaration public DimensionSet(string key, string value) Parameters Type Name Description System.String key The key. System.String value The value. Properties DimensionKeys Gets the dimension keys. Declaration public List<string> DimensionKeys { get; } Property Value Type Description List < System.String > The dimension keys."
  },
  "api/AWS.Lambda.Powertools.Metrics.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.html",
    "title": "Namespace AWS.Lambda.Powertools.Metrics | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Metrics Classes DimensionSet List of key-value pairs with Metric Dimensions JsonNamingPolicyDecorator Class JsonNamingPolicyDecorator Implements the Metadata Class Metadata. MetricDefinition Class MetricDefinition. MetricDirective Class MetricDirective. Metrics Class Metrics. Implements the IMetrics MetricsAttribute Creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF). Key features --------------------- Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob) Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc) Metrics are created asynchronously by CloudWatch service, no custom stacks needed Context manager to create a one off metric with a different dimension Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_METRICS_NAMESPACE string, metric namespace Parameters ----------- Parameter name Description Service string, service name is used for metric dimension across all metrics, by default service_undefined Namespace string, logical container where all metrics will be placed CaptureColdStart bool, captures cold start during Lambda execution, by default false RaiseOnEmptyMetrics bool, instructs metrics validation to throw exception if no metrics are provided, by default false MetricsContext Class MetricsContext. Implements the RootNode Class RootNode. SchemaValidationException Class SchemaValidationException. Implements the StringEnumConverter Class StringEnumConverter. Implements the UnixMillisecondDateTimeConverter Class UnixMillisecondDateTimeConverter. Implements the Interfaces IMetrics Interface IMetrics Implements the Enums MetricResolution Enum MetricResolution MetricUnit Enum MetricUnit"
  },
  "api/AWS.Lambda.Powertools.Metrics.IMetrics.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.IMetrics.html",
    "title": "Interface IMetrics | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IMetrics Interface IMetrics Implements the Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public interface IMetrics : IDisposable Methods AddDimension(String, String) Adds a dimension Declaration void AddDimension(string key, string value) Parameters Type Name Description System.String key Dimension key System.String value Dimension value AddMetadata(String, Object) Adds metadata Declaration void AddMetadata(string key, object value) Parameters Type Name Description System.String key Metadata key System.Object value Metadata value AddMetric(String, Double, MetricUnit, MetricResolution) Adds metric Declaration void AddMetric(string key, double value, MetricUnit unit, MetricResolution metricResolution) Parameters Type Name Description System.String key Metric key System.Double value Metric value MetricUnit unit Metric unit MetricResolution metricResolution ClearDefaultDimensions() Clears both default dimensions and dimensions lists Declaration void ClearDefaultDimensions() Flush(Boolean) Flushes metrics to CloudWatch Declaration void Flush(bool metricsOverflow = false) Parameters Type Name Description System.Boolean metricsOverflow if set to true [metrics overflow]. GetNamespace() Gets the namespace Declaration string GetNamespace() Returns Type Description System.String System.String. GetService() Gets the service Declaration string GetService() Returns Type Description System.String System.String. PushSingleMetric(String, Double, MetricUnit, String, String, Dictionary<String, String>, MetricResolution) Pushes a single metric with custom namespace, service and dimensions. Declaration void PushSingleMetric(string metricName, double value, MetricUnit unit, string nameSpace = null, string service = null, Dictionary<string, string> defaultDimensions = null, MetricResolution metricResolution = default(MetricResolution)) Parameters Type Name Description System.String metricName Name of the metric System.Double value Metric value MetricUnit unit Metric unit System.String nameSpace Metric namespace System.String service Metric service Dictionary < System.String , System.String > defaultDimensions Metric default dimensions MetricResolution metricResolution Metrics resolution Serialize() Serializes metrics instance Declaration string Serialize() Returns Type Description System.String System.String. SetDefaultDimensions(Dictionary<String, String>) Sets the default dimensions Declaration void SetDefaultDimensions(Dictionary<string, string> defaultDimension) Parameters Type Name Description Dictionary < System.String , System.String > defaultDimension Default dimensions SetNamespace(String) Sets the namespace Declaration void SetNamespace(string nameSpace) Parameters Type Name Description System.String nameSpace Metrics namespace"
  },
  "api/AWS.Lambda.Powertools.Metrics.JsonNamingPolicyDecorator.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.JsonNamingPolicyDecorator.html",
    "title": "Class JsonNamingPolicyDecorator | Powertools for AWS Lambda (.NET)",
    "keywords": "Class JsonNamingPolicyDecorator Class JsonNamingPolicyDecorator Implements the Inheritance System.Object JsonNamingPolicyDecorator Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class JsonNamingPolicyDecorator : JsonNamingPolicy Constructors JsonNamingPolicyDecorator(JsonNamingPolicy) JsonNamingPolicy decorator Declaration protected JsonNamingPolicyDecorator(JsonNamingPolicy underlyingNamingPolicy) Parameters Type Name Description JsonNamingPolicy underlyingNamingPolicy Name of the underlying JsonNamingPolicy Methods ConvertName(String) When overridden in a derived class, converts the specified name according to the policy. Declaration public override string ConvertName(string name) Parameters Type Name Description System.String name The name to convert. Returns Type Description System.String The converted name."
  },
  "api/AWS.Lambda.Powertools.Metrics.Metadata.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.Metadata.html",
    "title": "Class Metadata | Powertools for AWS Lambda (.NET)",
    "keywords": "Class Metadata Class Metadata. Inheritance System.Object Metadata Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class Metadata : object Constructors Metadata() Create Metadata object Declaration public Metadata() Properties CloudWatchMetrics Gets the cloud watch metrics. Declaration public List<MetricDirective> CloudWatchMetrics { get; } Property Value Type Description List < MetricDirective > The cloud watch metrics. CustomMetadata Gets the custom metadata. Declaration public Dictionary<string, object> CustomMetadata { get; } Property Value Type Description Dictionary < System.String , System.Object > The custom metadata. Timestamp Gets the timestamp. Declaration public DateTime Timestamp { get; } Property Value Type Description DateTime The timestamp."
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricDefinition.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricDefinition.html",
    "title": "Class MetricDefinition | Powertools for AWS Lambda (.NET)",
    "keywords": "Class MetricDefinition Class MetricDefinition. Inheritance System.Object MetricDefinition Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class MetricDefinition : object Constructors MetricDefinition(String, MetricUnit, List<Double>, MetricResolution) Creates a MetricDefinition object with multiple values Declaration public MetricDefinition(string name, MetricUnit unit, List<double> values, MetricResolution metricResolution) Parameters Type Name Description System.String name Metric name MetricUnit unit Metric unit List < System.Double > values List of metric values MetricResolution metricResolution Metric resolution MetricDefinition(String, MetricUnit, Double, MetricResolution) Creates a MetricDefinition object Declaration public MetricDefinition(string name, MetricUnit unit, double value, MetricResolution metricResolution) Parameters Type Name Description System.String name Metric name MetricUnit unit Metric unit System.Double value Metric value MetricResolution metricResolution Metric resolution MetricDefinition(String, Double) Creates a MetricDefinition object. MetricUnit is set to NONE since it is not provided. Declaration public MetricDefinition(string name, double value) Parameters Type Name Description System.String name Metric name System.Double value Metric value Properties Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description System.String The name. StorageResolution Gets or sets the StorageResolution. Declaration public MetricResolution StorageResolution { get; set; } Property Value Type Description MetricResolution The unit. Unit Gets or sets the unit. Declaration public MetricUnit Unit { get; set; } Property Value Type Description MetricUnit The unit. Values Gets the values. Declaration public List<double> Values { get; } Property Value Type Description List < System.Double > The values. Methods AddValue(Double) Adds value to existing metric with same key Declaration public void AddValue(double value) Parameters Type Name Description System.Double value Metric value to add to existing key"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricDirective.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricDirective.html",
    "title": "Class MetricDirective | Powertools for AWS Lambda (.NET)",
    "keywords": "Class MetricDirective Class MetricDirective. Inheritance System.Object MetricDirective Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class MetricDirective : object Constructors MetricDirective() Creates empty MetricDirective object Declaration public MetricDirective() MetricDirective(String) Creates MetricDirective object with specific namespace identifier Declaration public MetricDirective(string nameSpace) Parameters Type Name Description System.String nameSpace Metrics namespace identifier MetricDirective(String, List<DimensionSet>) Creates MetricDirective object with specific namespace identifier and default dimensions list Declaration public MetricDirective(string nameSpace, List<DimensionSet> defaultDimensions) Parameters Type Name Description System.String nameSpace Metrics namespace identifier List < DimensionSet > defaultDimensions Default dimensions list Properties AllDimensionKeys Creates list with all dimensions. Needed for correct EMF payload creation Declaration public List<List<string>> AllDimensionKeys { get; } Property Value Type Description List < List < System.String >> All dimension keys. DefaultDimensions Gets the default dimensions. Declaration public List<DimensionSet> DefaultDimensions { get; } Property Value Type Description List < DimensionSet > The default dimensions. Dimensions Gets the dimensions. Declaration public List<DimensionSet> Dimensions { get; } Property Value Type Description List < DimensionSet > The dimensions. Metrics Gets the metrics. Declaration public List<MetricDefinition> Metrics { get; } Property Value Type Description List < MetricDefinition > The metrics. Namespace Gets the namespace. Declaration public string Namespace { get; } Property Value Type Description System.String The namespace. Service Gets the service. Declaration public string Service { get; } Property Value Type Description System.String The service. Methods AddMetric(String, Double, MetricUnit, MetricResolution) Adds metric to memory Declaration public void AddMetric(string name, double value, MetricUnit unit, MetricResolution metricResolution) Parameters Type Name Description System.String name Metric name. Cannot be null, empty or whitespace System.Double value Metric value MetricUnit unit Metric unit MetricResolution metricResolution Metric Resolution, Standard (default), High"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricResolution.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricResolution.html",
    "title": "Enum MetricResolution | Powertools for AWS Lambda (.NET)",
    "keywords": "Enum MetricResolution Enum MetricResolution Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public enum MetricResolution : int Fields Name Description Default When not set default to not sending metric resolution High High resolution, with data at a granularity of one second Standard Standard resolution, with data having a one-minute granularity"
  },
  "api/AWS.Lambda.Powertools.Metrics.Metrics.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.Metrics.html",
    "title": "Class Metrics | Powertools for AWS Lambda (.NET)",
    "keywords": "Class Metrics Class Metrics. Implements the IMetrics Inheritance System.Object Metrics Implements IMetrics IDisposable Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class Metrics : object, IMetrics, IDisposable Methods AddDimension(String, String) Adds new dimension to memory. Declaration public static void AddDimension(string key, string value) Parameters Type Name Description System.String key Dimension key. Must not be null, empty or whitespace. System.String value Dimension value AddMetadata(String, Object) Adds metadata to memory. Declaration public static void AddMetadata(string key, object value) Parameters Type Name Description System.String key Metadata key. Must not be null, empty or whitespace System.Object value Metadata value AddMetric(String, Double, MetricUnit, MetricResolution) Adds new metric to memory. Declaration public static void AddMetric(string key, double value, MetricUnit unit = MetricUnit.None, MetricResolution metricResolution = default(MetricResolution)) Parameters Type Name Description System.String key Metric Key. Must not be null, empty or whitespace System.Double value Metric Value MetricUnit unit Metric Unit MetricResolution metricResolution ClearDefaultDimensions() Clears both default dimensions and dimensions lists Declaration public static void ClearDefaultDimensions() Dispose() Implementation of IDisposable interface Declaration public void Dispose() GetNamespace() Retrieves namespace identifier. Declaration public static string GetNamespace() Returns Type Description System.String Namespace identifier PushSingleMetric(String, Double, MetricUnit, String, String, Dictionary<String, String>, MetricResolution) Pushes single metric to CloudWatch using Embedded Metric Format. This can be used to push metrics with a different context. Declaration public static void PushSingleMetric(string metricName, double value, MetricUnit unit, string nameSpace = null, string service = null, Dictionary<string, string> defaultDimensions = null, MetricResolution metricResolution = default(MetricResolution)) Parameters Type Name Description System.String metricName Metric Name. Metric key cannot be null, empty or whitespace System.Double value Metric Value MetricUnit unit Metric Unit System.String nameSpace Metric Namespace System.String service Service Name Dictionary < System.String , System.String > defaultDimensions Default dimensions list MetricResolution metricResolution Metrics resolution Serialize() Serialize global context object Declaration public string Serialize() Returns Type Description System.String Serialized global context object SetDefaultDimensions(Dictionary<String, String>) Set default dimension list Declaration public static void SetDefaultDimensions(Dictionary<string, string> defaultDimensions) Parameters Type Name Description Dictionary < System.String , System.String > defaultDimensions Default Dimension List SetNamespace(String) Sets metrics namespace identifier. Declaration public static void SetNamespace(string nameSpace) Parameters Type Name Description System.String nameSpace Metrics Namespace Identifier Explicit Interface Implementations IMetrics.AddDimension(String, String) Implements interface that adds a dimension. Declaration void IMetrics.AddDimension(string key, string value) Parameters Type Name Description System.String key Dimension key. Must not be null, empty or whitespace System.String value Dimension value IMetrics.AddMetadata(String, Object) Implements interface that adds metadata. Declaration void IMetrics.AddMetadata(string key, object value) Parameters Type Name Description System.String key Metadata key. Must not be null, empty or whitespace System.Object value Metadata value IMetrics.AddMetric(String, Double, MetricUnit, MetricResolution) Implements interface that adds new metric to memory. Declaration void IMetrics.AddMetric(string key, double value, MetricUnit unit, MetricResolution metricResolution) Parameters Type Name Description System.String key Metric Key System.Double value Metric Value MetricUnit unit Metric Unit MetricResolution metricResolution Metric resolution IMetrics.ClearDefaultDimensions() Clears both default dimensions and dimensions lists Declaration void IMetrics.ClearDefaultDimensions() IMetrics.Flush(Boolean) Flushes metrics in Embedded Metric Format (EMF) to Standard Output. In Lambda, this output is collected automatically and sent to Cloudwatch. Declaration void IMetrics.Flush(bool metricsOverflow) Parameters Type Name Description System.Boolean metricsOverflow If enabled, non-default dimensions are cleared after flushing metrics Exceptions Type Condition SchemaValidationException true IMetrics.GetNamespace() Implements interface that allows retrieval of namespace identifier. Declaration string IMetrics.GetNamespace() Returns Type Description System.String Namespace identifier IMetrics.GetService() Implements interface to get service name Declaration string IMetrics.GetService() Returns Type Description System.String System.String. IMetrics.PushSingleMetric(String, Double, MetricUnit, String, String, Dictionary<String, String>, MetricResolution) Implements the interface that pushes single metric to CloudWatch using Embedded Metric Format. This can be used to push metrics with a different context. Declaration void IMetrics.PushSingleMetric(string metricName, double value, MetricUnit unit, string nameSpace, string service, Dictionary<string, string> defaultDimensions, MetricResolution metricResolution) Parameters Type Name Description System.String metricName Metric Name. Metric key cannot be null, empty or whitespace System.Double value Metric Value MetricUnit unit Metric Unit System.String nameSpace Metric Namespace System.String service Service Name Dictionary < System.String , System.String > defaultDimensions Default dimensions list MetricResolution metricResolution Metrics resolution IMetrics.SetDefaultDimensions(Dictionary<String, String>) Implements interface that sets default dimension list Declaration void IMetrics.SetDefaultDimensions(Dictionary<string, string> defaultDimensions) Parameters Type Name Description Dictionary < System.String , System.String > defaultDimensions Default Dimension List IMetrics.SetNamespace(String) Implements interface that sets metrics namespace identifier. Declaration void IMetrics.SetNamespace(string nameSpace) Parameters Type Name Description System.String nameSpace Metrics Namespace Identifier Implements IMetrics IDisposable See Also IMetrics"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricsAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricsAttribute.html",
    "title": "Class MetricsAttribute | Powertools for AWS Lambda (.NET)",
    "keywords": "Class MetricsAttribute Creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF). Key features --------------------- Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob) Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc) Metrics are created asynchronously by CloudWatch service, no custom stacks needed Context manager to create a one off metric with a different dimension Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_METRICS_NAMESPACE string, metric namespace Parameters ----------- Parameter name Description Service string, service name is used for metric dimension across all metrics, by default service_undefined Namespace string, logical container where all metrics will be placed CaptureColdStart bool, captures cold start during Lambda execution, by default false RaiseOnEmptyMetrics bool, instructs metrics validation to throw exception if no metrics are provided, by default false Inheritance System.Object UniversalWrapperAttribute MethodAspectAttribute MetricsAttribute Inherited Members AWS.Lambda.Powertools.Common.MethodAspectAttribute.WrapSync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) AWS.Lambda.Powertools.Common.MethodAspectAttribute.WrapAsync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class MetricsAttribute : MethodAspectAttribute Examples [Metrics( Service = \"Example\", Namespace = \"ExampleNamespace\", CaptureColdStart = true, RaiseOnEmptyMetrics = true) ] public async Task<APIGatewayProxyResponse> FunctionHandler (APIGatewayProxyRequest apigProxyEvent, ILambdaContext context) { ... } Properties CaptureColdStart Captures cold start during Lambda execution Declaration public bool CaptureColdStart { get; set; } Property Value Type Description System.Boolean true if [capture cold start]; otherwise, false . Namespace Set namespace. The default is the environment variable POWERTOOLS_METRICS_NAMESPACE . Declaration public string Namespace { get; set; } Property Value Type Description System.String The namespace. RaiseOnEmptyMetrics Instructs metrics validation to throw exception if no metrics are provided. Declaration public bool RaiseOnEmptyMetrics { get; set; } Property Value Type Description System.Boolean true if [raise on empty metrics]; otherwise, false . Service Service name is used for metric dimension across all metrics. This can be also set using the environment variable POWERTOOLS_SERVICE_NAME . Declaration public string Service { get; set; } Property Value Type Description System.String The service. Methods CreateHandler() Creates the handler. Declaration protected override IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. Overrides MethodAspectAttribute.CreateHandler()"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricsContext.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricsContext.html",
    "title": "Class MetricsContext | Powertools for AWS Lambda (.NET)",
    "keywords": "Class MetricsContext Class MetricsContext. Implements the Inheritance System.Object MetricsContext Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class MetricsContext : IDisposable Constructors MetricsContext() Creates empty MetricsContext object Declaration public MetricsContext() Methods AddDimension(String, String) Adds new dimension to memory Declaration public void AddDimension(string key, string value) Parameters Type Name Description System.String key Dimension key. Cannot be null, empty or whitespace System.String value Dimension value AddMetadata(String, Object) Adds metadata to memory Declaration public void AddMetadata(string key, object value) Parameters Type Name Description System.String key Metadata key System.Object value Metadata value AddMetric(String, Double, MetricUnit, MetricResolution) Adds Metric to memory Declaration public void AddMetric(string key, double value, MetricUnit unit, MetricResolution metricResolution) Parameters Type Name Description System.String key Metric key. Cannot be null, empty or whitespace System.Double value Metric value MetricUnit unit Metric unit MetricResolution metricResolution Metric Resolution, Standard (default), High ClearDefaultDimensions() Clears both default dimensions and dimensions lists Declaration public void ClearDefaultDimensions() ClearMetrics() Clears all metrics from memory Declaration public void ClearMetrics() Dispose() Implements IDisposable interface Declaration public void Dispose() GetMetrics() Retrieves all metrics stored in memory Declaration public List<MetricDefinition> GetMetrics() Returns Type Description List < MetricDefinition > List of Metrics Serialize() Serializes metrics object to string using Embedded Metric Format (EMF) Declaration public string Serialize() Returns Type Description System.String String object representing all metrics in memory SetDefaultDimensions(List<DimensionSet>) Sets default dimensions list Declaration public void SetDefaultDimensions(List<DimensionSet> defaultDimensions) Parameters Type Name Description List < DimensionSet > defaultDimensions Default dimensions list SetNamespace(String) Sets metrics namespace identifier Declaration public void SetNamespace(string metricNamespace) Parameters Type Name Description System.String metricNamespace Metrics namespace identifier SetService(String) Sets service name identifier Declaration public void SetService(string service) Parameters Type Name Description System.String service Service name"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricUnit.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricUnit.html",
    "title": "Enum MetricUnit | Powertools for AWS Lambda (.NET)",
    "keywords": "Enum MetricUnit Enum MetricUnit Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public enum MetricUnit : int Fields Name Description Bits Metrics unit in bits BitsPerSecond Metrics unit in bits per second Bytes Metrics unit in bytes BytesPerSecond Metrics unit in bytes per second Count Metrics unit count CountPerSecond Metrics unit in count per second Gigabits Metrics unit in gigabits GigabitsPerSecond Metrics unit in gigabits per second Gigabytes Metrics unit in gigabytes GigabytesPerSecond Metrics unit in gigabytes per second Kilobits Metrics unit in kilobits KilobitsPerSecond Metrics unit in kilobits per second Kilobytes Metrics unit in kilobytes KilobytesPerSecond Metrics unit in kilobytes per second Megabits Metrics unit in megabits MegabitsPerSecond Metrics unit in megabits per second Megabytes Metrics unit in megabytes MegabytesPerSecond Metrics unit in megabytes per second Microseconds Metrics unit in microseconds Milliseconds Metrics unit in milliseconds None Metrics unit none Percent Metrics unit in percent Seconds Metrics unit in seconds Terabits Metrics unit in terabits TerabitsPerSecond Metrics unit in terabits per second Terabytes Metrics unit in terabytes TerabytesPerSecond Metrics unit in terabytes per second"
  },
  "api/AWS.Lambda.Powertools.Metrics.RootNode.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.RootNode.html",
    "title": "Class RootNode | Powertools for AWS Lambda (.NET)",
    "keywords": "Class RootNode Class RootNode. Inheritance System.Object RootNode Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class RootNode : object Properties AWS Gets the aws. Declaration public Metadata AWS { get; } Property Value Type Description Metadata The aws. MetricData Gets the metric data. Declaration public Dictionary<string, object> MetricData { get; } Property Value Type Description Dictionary < System.String , System.Object > The metric data. Methods Serialize() Serializes metrics object to a valid string in JSON format Declaration public string Serialize() Returns Type Description System.String JSON EMF payload in string format Exceptions Type Condition SchemaValidationException namespace"
  },
  "api/AWS.Lambda.Powertools.Metrics.SchemaValidationException.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.SchemaValidationException.html",
    "title": "Class SchemaValidationException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class SchemaValidationException Class SchemaValidationException. Implements the Inheritance System.Object SchemaValidationException Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class SchemaValidationException : Exception Constructors SchemaValidationException(Boolean) Initializes a new instance of the SchemaValidationException class. Declaration public SchemaValidationException(bool raiseEmptyMetrics) Parameters Type Name Description System.Boolean raiseEmptyMetrics if set to true [raise empty metrics]. SchemaValidationException(String) Thrown when required property is missing on Metrics Object Declaration public SchemaValidationException(string propertyName) Parameters Type Name Description System.String propertyName Missing property name"
  },
  "api/AWS.Lambda.Powertools.Metrics.StringEnumConverter.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.StringEnumConverter.html",
    "title": "Class StringEnumConverter | Powertools for AWS Lambda (.NET)",
    "keywords": "Class StringEnumConverter Class StringEnumConverter. Implements the Inheritance System.Object StringEnumConverter Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class StringEnumConverter : JsonConverterFactory Constructors StringEnumConverter() Initializes a new instance of the StringEnumConverter class. Declaration public StringEnumConverter() Methods CanConvert(Type) When overridden in a derived class, determines whether the converter instance can convert the specified object type. Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type of the object to check whether it can be converted by this converter instance. Returns Type Description System.Boolean true if the instance can convert the specified object type; otherwise, false . CreateConverter(Type, JsonSerializerOptions) Creates a converter for a specified type. Declaration public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Type typeToConvert The type handled by the converter. JsonSerializerOptions options The serialization options to use. Returns Type Description JsonConverter A converter for which type is compatible with typeToConvert ."
  },
  "api/AWS.Lambda.Powertools.Metrics.UnixMillisecondDateTimeConverter.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.UnixMillisecondDateTimeConverter.html",
    "title": "Class UnixMillisecondDateTimeConverter | Powertools for AWS Lambda (.NET)",
    "keywords": "Class UnixMillisecondDateTimeConverter Class UnixMillisecondDateTimeConverter. Implements the Inheritance System.Object UnixMillisecondDateTimeConverter Namespace : AWS.Lambda.Powertools.Metrics Assembly : AWS.Lambda.Powertools.Metrics.dll Syntax public class UnixMillisecondDateTimeConverter : JsonConverter<DateTime> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to DateTime />. Declaration public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description DateTime The converted value. Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) Writes a specified value as JSON. Declaration public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The writer to write to. DateTime value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use."
  },
  "api/AWS.Lambda.Powertools.Parameters.Cache.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Cache.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Cache | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Cache Interfaces ICacheManager Represents a type used to manage cache. IDateTimeWrapper Represents a type used to wrap datetime."
  },
  "api/AWS.Lambda.Powertools.Parameters.Cache.ICacheManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Cache.ICacheManager.html",
    "title": "Interface ICacheManager | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface ICacheManager Represents a type used to manage cache. Namespace : AWS.Lambda.Powertools.Parameters.Cache Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface ICacheManager Methods Get(String) Retrieves a cached value by key. Declaration object? Get(string key) Parameters Type Name Description System.String key The key to retrieve. Returns Type Description System.Nullable < System.Object > The cached object. Set(String, Nullable<Object>, TimeSpan) Adds a value to the cache by key for a specific duration. Declaration void Set(string key, object? value, TimeSpan duration) Parameters Type Name Description System.String key The key to store the value. System.Nullable < System.Object > value The value to store. TimeSpan duration The expiry duration."
  },
  "api/AWS.Lambda.Powertools.Parameters.Cache.IDateTimeWrapper.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Cache.IDateTimeWrapper.html",
    "title": "Interface IDateTimeWrapper | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IDateTimeWrapper Represents a type used to wrap datetime. Namespace : AWS.Lambda.Powertools.Parameters.Cache Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface IDateTimeWrapper Properties UtcNow Gets the current UTC time. Declaration DateTime UtcNow { get; } Property Value Type Description DateTime"
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Configuration | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Configuration Classes ParameterProviderConfiguration ParameterProviderConfiguration class. ParameterProviderConfigurationBuilder ParameterProviderConfigurationBuilder class. ParameterProviderConfigurationExtensions ParameterProviderConfigurationExtensions class extensions."
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfiguration.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfiguration.html",
    "title": "Class ParameterProviderConfiguration | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ParameterProviderConfiguration ParameterProviderConfiguration class. Inheritance System.Object ParameterProviderConfiguration Namespace : AWS.Lambda.Powertools.Parameters.Configuration Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public class ParameterProviderConfiguration : object Properties ForceFetch Fetches the latest value from the store regardless if already available in cache. Declaration public bool ForceFetch { get; set; } Property Value Type Description System.Boolean MaxAge The cache maximum age. Declaration public TimeSpan? MaxAge { get; set; } Property Value Type Description System.Nullable < TimeSpan > Transformer The transformer instance. Declaration public ITransformer Transformer { get; set; } Property Value Type Description ITransformer"
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationBuilder.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationBuilder.html",
    "title": "Class ParameterProviderConfigurationBuilder | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ParameterProviderConfigurationBuilder ParameterProviderConfigurationBuilder class. Inheritance System.Object ParameterProviderConfigurationBuilder SsmProviderConfigurationBuilder Namespace : AWS.Lambda.Powertools.Parameters.Configuration Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public class ParameterProviderConfigurationBuilder : object Constructors ParameterProviderConfigurationBuilder(ParameterProvider) ParameterProviderConfigurationBuilder Constructor. Declaration public ParameterProviderConfigurationBuilder(ParameterProvider parameterProvider) Parameters Type Name Description ParameterProvider parameterProvider The parameter provider instance Properties HasTransformation Has transformation or custom transformer Declaration protected bool HasTransformation { get; } Property Value Type Description System.Boolean Methods Get(String) Get parameter value for the provided key. Declaration public string? Get(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description System.Nullable < System.String > The parameter value. Get<T>(String) Get parameter transformed value for the provided key. Declaration public T Get<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description T The parameter transformed value. Type Parameters Name Description T Target transformation type. GetAsync(String) Get parameter value for the provided key. Declaration public Task<string?> GetAsync(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < System.Nullable < System.String >> The parameter value. GetAsync<T>(String) Get parameter transformed value for the provided key. Declaration public virtual Task<T> GetAsync<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description Task <T> The parameter transformed value. Type Parameters Name Description T Target transformation type. GetMultiple(String) Get multiple parameter values for the provided key. Declaration public IDictionary<string, string?> GetMultiple(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description IDictionary < System.String , System.Nullable < System.String >> Returns a collection parameter key/value pairs. GetMultiple<T>(String) Get multiple transformed parameter values for the provided key. Declaration public IDictionary<string, T> GetMultiple<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description IDictionary < System.String , T> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T GetMultipleAsync(String) Get multiple parameter values for the provided key. Declaration public Task<IDictionary<string, string?>> GetMultipleAsync(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < IDictionary < System.String , System.Nullable < System.String >>> Returns a collection parameter key/value pairs. GetMultipleAsync<T>(String) Get multiple transformed parameter values for the provided key. Declaration public virtual Task<IDictionary<string, T>> GetMultipleAsync<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < IDictionary < System.String , T>> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T NewConfiguration() Creates and returns an instance of parameter provider configuration. Declaration protected virtual ParameterProviderConfiguration NewConfiguration() Returns Type Description ParameterProviderConfiguration The parameter provider configuration Extension Methods ParameterProviderConfigurationExtensions.ForceFetch<TConfigurationBuilder>(TConfigurationBuilder) ParameterProviderConfigurationExtensions.WithMaxAge<TConfigurationBuilder>(TConfigurationBuilder, TimeSpan) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, Transformation) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, ITransformer) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, String)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationExtensions.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationExtensions.html",
    "title": "Class ParameterProviderConfigurationExtensions | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ParameterProviderConfigurationExtensions ParameterProviderConfigurationExtensions class extensions. Inheritance System.Object ParameterProviderConfigurationExtensions Namespace : AWS.Lambda.Powertools.Parameters.Configuration Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public static class ParameterProviderConfigurationExtensions : object Methods ForceFetch<TConfigurationBuilder>(TConfigurationBuilder) Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration public static TConfigurationBuilder ForceFetch<TConfigurationBuilder>(this TConfigurationBuilder builder) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithMaxAge<TConfigurationBuilder>(TConfigurationBuilder, TimeSpan) Set the cache maximum age. Declaration public static TConfigurationBuilder WithMaxAge<TConfigurationBuilder>(this TConfigurationBuilder builder, TimeSpan maxAge) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. TimeSpan maxAge The maximum cache age Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, ITransformer) Transforms the latest value from after retrieved from the store. Declaration public static TConfigurationBuilder WithTransformation<TConfigurationBuilder>(this TConfigurationBuilder builder, ITransformer transformer) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. ITransformer transformer The instance of the transformer. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, Transformation) Transforms the latest value from after retrieved from the store. Declaration public static TConfigurationBuilder WithTransformation<TConfigurationBuilder>(this TConfigurationBuilder builder, Transformation transformation) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. Transformation transformation The transformation type. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, String) Transforms the latest value from after retrieved from the store. Declaration public static TConfigurationBuilder WithTransformation<TConfigurationBuilder>(this TConfigurationBuilder builder, string transformerName) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. System.String transformerName The name of the registered transformer. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type."
  },
  "api/AWS.Lambda.Powertools.Parameters.DynamoDB.DynamoDBProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.DynamoDB.DynamoDBProvider.html",
    "title": "Class DynamoDBProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Class DynamoDBProvider Provider to retrieve parameter values from Amazon DynamoDB table. Inheritance System.Object ParameterProvider DynamoDBProvider Implements IDynamoDBProvider IParameterProvider IParameterProviderConfigurableClient < IDynamoDBProvider , IAmazonDynamoDB , AmazonDynamoDBConfig > Inherited Members ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(String) ParameterProvider.GetAsync(String) ParameterProvider.Get<T>(String) ParameterProvider.GetAsync<T>(String) ParameterProvider.GetMultiple(String) ParameterProvider.GetMultipleAsync(String) ParameterProvider.GetMultiple<T>(String) ParameterProvider.GetMultipleAsync<T>(String) ParameterProvider.WithMaxAge(TimeSpan) ParameterProvider.ForceFetch() ParameterProvider.WithTransformation(Transformation) ParameterProvider.WithTransformation(ITransformer) ParameterProvider.WithTransformation(String) Namespace : AWS.Lambda.Powertools.Parameters.DynamoDB Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public class DynamoDBProvider : ParameterProvider, IDynamoDBProvider, IParameterProvider, IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig> Methods ConfigureClient(AmazonDynamoDBConfig) Configure client with the credentials loaded from the application's default configuration. Declaration public IDynamoDBProvider ConfigureClient(AmazonDynamoDBConfig config) Parameters Type Name Description AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration public IDynamoDBProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(AWSCredentials, AmazonDynamoDBConfig) Configure client with AWS credentials and a client configuration object. Declaration public IDynamoDBProvider ConfigureClient(AWSCredentials credentials, AmazonDynamoDBConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration public IDynamoDBProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration public IDynamoDBProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(String, String, AmazonDynamoDBConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonDynamoDBConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(String, String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(String, String, String, AmazonDynamoDBConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonDynamoDBConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(String, String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance GetAsync(String, ParameterProviderConfiguration) Get parameter value for the provided key. Declaration protected override Task<string?> GetAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < System.Nullable < System.String >> The parameter value. Overrides ParameterProvider.GetAsync(String, ParameterProviderConfiguration) GetMultipleAsync(String, ParameterProviderConfiguration) Get multiple parameter values for the provided key. Declaration protected override Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < IDictionary < System.String , System.Nullable < System.String >>> Returns a collection parameter key/value pairs. Overrides ParameterProvider.GetMultipleAsync(String, ParameterProviderConfiguration) UseClient(IAmazonDynamoDB) Use a custom client Declaration public IDynamoDBProvider UseClient(IAmazonDynamoDB client) Parameters Type Name Description IAmazonDynamoDB client The custom client Returns Type Description IDynamoDBProvider Provider instance UseTable(String) Specify the DynamoDB table Declaration public IDynamoDBProvider UseTable(string tableName) Parameters Type Name Description System.String tableName DynamoDB table name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(String, String, String) Specify the DynamoDB table Declaration public IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string valueAttribute) Parameters Type Name Description System.String tableName DynamoDB table name. System.String primaryKeyAttribute The primary key attribute name. System.String valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(String, String, String, String) Specify the DynamoDB table Declaration public IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string sortKeyAttribute, string valueAttribute) Parameters Type Name Description System.String tableName DynamoDB table name. System.String primaryKeyAttribute The primary key attribute name. System.String sortKeyAttribute The sort key attribute name. System.String valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. Implements IDynamoDBProvider IParameterProvider IParameterProviderConfigurableClient<TProvider, TClient, TConfig>"
  },
  "api/AWS.Lambda.Powertools.Parameters.DynamoDB.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.DynamoDB.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.DynamoDB | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.DynamoDB Classes DynamoDBProvider Provider to retrieve parameter values from Amazon DynamoDB table. Interfaces IDynamoDBProvider Represents a type used to retrieve parameter values from Amazon DynamoDB table."
  },
  "api/AWS.Lambda.Powertools.Parameters.DynamoDB.IDynamoDBProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.DynamoDB.IDynamoDBProvider.html",
    "title": "Interface IDynamoDBProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IDynamoDBProvider Represents a type used to retrieve parameter values from Amazon DynamoDB table. Inherited Members IParameterProvider.Get(String) IParameterProvider.GetAsync(String) IParameterProvider.Get<T>(String) IParameterProvider.GetAsync<T>(String) IParameterProvider.GetMultiple(String) IParameterProvider.GetMultipleAsync(String) IParameterProvider.GetMultiple<T>(String) IParameterProvider.GetMultipleAsync<T>(String) IParameterProvider.WithMaxAge(TimeSpan) IParameterProvider.ForceFetch() IParameterProvider.WithTransformation(Transformation) IParameterProvider.WithTransformation(ITransformer) IParameterProvider.WithTransformation(String) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.UseClient(IAmazonDynamoDB) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AmazonDynamoDBConfig) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AWSCredentials) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AWSCredentials, RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AWSCredentials, AmazonDynamoDBConfig) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(String, String) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(String, String, RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(String, String, AmazonDynamoDBConfig) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(String, String, String) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(String, String, String, RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(String, String, String, AmazonDynamoDBConfig) Namespace : AWS.Lambda.Powertools.Parameters.DynamoDB Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface IDynamoDBProvider : IParameterProvider, IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig> Methods UseTable(String) Specify the DynamoDB table Declaration IDynamoDBProvider UseTable(string tableName) Parameters Type Name Description System.String tableName DynamoDB table name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(String, String, String) Specify the DynamoDB table Declaration IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string valueAttribute) Parameters Type Name Description System.String tableName DynamoDB table name. System.String primaryKeyAttribute The primary key attribute name. System.String valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(String, String, String, String) Specify the DynamoDB table Declaration IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string sortKeyAttribute, string valueAttribute) Parameters Type Name Description System.String tableName DynamoDB table name. System.String primaryKeyAttribute The primary key attribute name. System.String sortKeyAttribute The sort key attribute name. System.String valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. Extension Methods ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager) ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, String, ITransformer) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, Boolean)"
  },
  "api/AWS.Lambda.Powertools.Parameters.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters Classes ParametersManager Class ParametersManager"
  },
  "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Internal.Provider | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Internal.Provider Interfaces IParameterProviderBaseHandler Represents a type used to retrieve parameter values from a store. IParameterProviderConfigurableClient<TProvider, TClient, TConfig> Represents a type that has an internal configurable client to retrieve data from AWS services."
  },
  "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderBaseHandler.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderBaseHandler.html",
    "title": "Interface IParameterProviderBaseHandler | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IParameterProviderBaseHandler Represents a type used to retrieve parameter values from a store. Namespace : AWS.Lambda.Powertools.Parameters.Internal.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProviderBaseHandler Methods AddCustomTransformer(String, ITransformer) Registers a new transformer instance by name. Declaration void AddCustomTransformer(string name, ITransformer transformer) Parameters Type Name Description System.String name The transformer unique name. ITransformer transformer The transformer instance. GetAsync<T>(String, ParameterProviderConfiguration, Nullable<Transformation>, Nullable<String>) Gets parameter value for the provided key and configuration. Declaration Task<T> GetAsync<T>(string key, ParameterProviderConfiguration config, Transformation? transformation, string? transformerName) where T : class Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The optional parameter provider configuration. System.Nullable < Transformation > transformation The optional transformation. System.Nullable < System.String > transformerName The optional transformer name. Returns Type Description Task <T> The parameter value. Type Parameters Name Description T Target transformation type. GetCacheManager() Gets the CacheManager instance. Declaration ICacheManager GetCacheManager() Returns Type Description ICacheManager The CacheManager instance GetDefaultMaxAge() Gets the maximum age or default value. Declaration TimeSpan? GetDefaultMaxAge() Returns Type Description System.Nullable < TimeSpan > the maxAge GetMaxAge(ParameterProviderConfiguration) Gets the maximum age or default value. Declaration TimeSpan GetMaxAge(ParameterProviderConfiguration config) Parameters Type Name Description ParameterProviderConfiguration config Returns Type Description TimeSpan the maxAge GetMultipleAsync<T>(String, ParameterProviderConfiguration, Nullable<Transformation>, Nullable<String>) Gets multiple parameter values for the provided key and configuration. Declaration Task<IDictionary<string, T>> GetMultipleAsync<T>(string key, ParameterProviderConfiguration config, Transformation? transformation, string? transformerName) where T : class Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The optional parameter provider configuration. System.Nullable < Transformation > transformation The optional transformation. System.Nullable < System.String > transformerName The optional transformer name. Returns Type Description Task < IDictionary < System.String , T>> Returns a collection parameter key/value pairs. Type Parameters Name Description T Target transformation type. SetCacheManager(ICacheManager) Sets the CacheManager. Declaration void SetCacheManager(ICacheManager cacheManager) Parameters Type Name Description ICacheManager cacheManager The CacheManager instance. SetDefaultMaxAge(TimeSpan) Sets the cache maximum age. Declaration void SetDefaultMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The cache maximum age SetRaiseTransformationError(Boolean) Configure the transformer to raise exception or return Null on transformation error Declaration void SetRaiseTransformationError(bool raiseError) Parameters Type Name Description System.Boolean raiseError true for raise error, false for return Null. SetTransformerManager(ITransformerManager) Sets the TransformerManager. Declaration void SetTransformerManager(ITransformerManager transformerManager) Parameters Type Name Description ITransformerManager transformerManager The TransformerManager instance."
  },
  "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderConfigurableClient-3.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderConfigurableClient-3.html",
    "title": "Interface IParameterProviderConfigurableClient<TProvider, TClient, TConfig> | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IParameterProviderConfigurableClient<TProvider, TClient, TConfig> Represents a type that has an internal configurable client to retrieve data from AWS services. Namespace : AWS.Lambda.Powertools.Parameters.Internal.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProviderConfigurableClient<out TProvider, in TClient, in TConfig> Type Parameters Name Description TProvider TClient TConfig Methods ConfigureClient(TConfig) Configure client with the credentials loaded from the application's default configuration. Declaration TProvider ConfigureClient(TConfig config) Parameters Type Name Description TConfig config The client configuration object. Returns Type Description TProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration TProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description TProvider Provider instance ConfigureClient(AWSCredentials, TConfig) Configure client with AWS credentials and a client configuration object. Declaration TProvider ConfigureClient(AWSCredentials credentials, TConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. TConfig config The client configuration object. Returns Type Description TProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration TProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration TProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance ConfigureClient(String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key Returns Type Description TProvider Provider instance ConfigureClient(String, String, TConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, TConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key TConfig config The client configuration object. Returns Type Description TProvider Provider instance ConfigureClient(String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance ConfigureClient(String, String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token Returns Type Description TProvider Provider instance ConfigureClient(String, String, String, TConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, TConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token TConfig config The client configuration object. Returns Type Description TProvider Provider instance ConfigureClient(String, String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance UseClient(TClient) Use a custom client Declaration TProvider UseClient(TClient client) Parameters Type Name Description TClient client The custom client Returns Type Description TProvider Provider instance"
  },
  "api/AWS.Lambda.Powertools.Parameters.ParametersManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.ParametersManager.html",
    "title": "Class ParametersManager | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ParametersManager Class ParametersManager Inheritance System.Object ParametersManager Namespace : AWS.Lambda.Powertools.Parameters Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public static class ParametersManager : object Properties DynamoDBProvider Gets the DynamoDBProvider instance. Declaration public static IDynamoDBProvider DynamoDBProvider { get; } Property Value Type Description IDynamoDBProvider The DynamoDBProvider instance. SecretsProvider Gets the SecretsProvider instance. Declaration public static ISecretsProvider SecretsProvider { get; } Property Value Type Description ISecretsProvider The SecretsProvider instance. SsmProvider Gets the SsmProvider instance. Declaration public static ISsmProvider SsmProvider { get; } Property Value Type Description ISsmProvider The SsmProvider instance. Methods AddTransformer(String, ITransformer) Registers a new transformer instance by name for all providers. Declaration public static void AddTransformer(string name, ITransformer transformer) Parameters Type Name Description System.String name The transformer unique name. ITransformer transformer The transformer instance. CreateDynamoDBProvider() Create a new instance of DynamoDBProvider. Declaration public static IDynamoDBProvider CreateDynamoDBProvider() Returns Type Description IDynamoDBProvider The DynamoDBProvider instance. CreateSecretsProvider() Create a new instance of SecretsProvider. Declaration public static ISecretsProvider CreateSecretsProvider() Returns Type Description ISecretsProvider The SecretsProvider instance. CreateSsmProvider() Create a new instance of SsmProvider. Declaration public static ISsmProvider CreateSsmProvider() Returns Type Description ISsmProvider The SsmProvider instance. DefaultMaxAge(TimeSpan) Set the caching default maximum age for all providers. Declaration public static void DefaultMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum age. RaiseTransformationError() Configure the transformer to raise exception on transformation error Declaration public static void RaiseTransformationError() RaiseTransformationError(Boolean) Configure the transformer to raise exception or return Null on transformation error Declaration public static void RaiseTransformationError(bool raiseError) Parameters Type Name Description System.Boolean raiseError true for raise error, false for return Null. UseCacheManager(ICacheManager) Set the CacheManager instance for all providers. Declaration public static void UseCacheManager(ICacheManager cacheManager) Parameters Type Name Description ICacheManager cacheManager The CacheManager instance. UseTransformerManager(ITransformerManager) Set the TransformerManager instance for all providers. Declaration public static void UseTransformerManager(ITransformerManager transformerManager) Parameters Type Name Description ITransformerManager transformerManager The TransformerManager instance."
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Provider | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Provider Classes ParameterProvider Provide a generic view of a parameter provider. This is an abstract class. ParameterProvider<TConfigurationBuilder> Provide a generic view of a parameter provider. This is an abstract class. ParameterProviderExtensions Class ParameterProviderExtensions. Interfaces IParameterProvider Represents a type used to retrieve parameter values from a store. IParameterProvider<TConfigurationBuilder> Represents a type used to retrieve parameter values from a store. Enums ParameterProviderCacheMode Enum ParameterProviderCacheMode"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider.html",
    "title": "Interface IParameterProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IParameterProvider Represents a type used to retrieve parameter values from a store. Namespace : AWS.Lambda.Powertools.Parameters.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProvider Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration ParameterProviderConfigurationBuilder ForceFetch() Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Get(String) Get parameter value for the provided key. Declaration string? Get(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description System.Nullable < System.String > The parameter value. Get<T>(String) Get parameter transformed value for the provided key. Declaration T Get<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description T The parameter transformed value. Type Parameters Name Description T Target transformation type. GetAsync(String) Get parameter value for the provided key. Declaration Task<string?> GetAsync(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < System.Nullable < System.String >> The parameter value. GetAsync<T>(String) Get parameter transformed value for the provided key. Declaration Task<T> GetAsync<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description Task <T> The parameter transformed value. Type Parameters Name Description T Target transformation type. GetMultiple(String) Get multiple parameter values for the provided key. Declaration IDictionary<string, string?> GetMultiple(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description IDictionary < System.String , System.Nullable < System.String >> Returns a collection parameter key/value pairs. GetMultiple<T>(String) Get multiple transformed parameter values for the provided key. Declaration IDictionary<string, T> GetMultiple<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description IDictionary < System.String , T> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T GetMultipleAsync(String) Get multiple parameter values for the provided key. Declaration Task<IDictionary<string, string?>> GetMultipleAsync(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < IDictionary < System.String , System.Nullable < System.String >>> Returns a collection parameter key/value pairs. GetMultipleAsync<T>(String) Get multiple transformed parameter values for the provided key. Declaration Task<IDictionary<string, T>> GetMultipleAsync<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < IDictionary < System.String , T>> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T WithMaxAge(TimeSpan) Set the cache maximum age Declaration ParameterProviderConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration ParameterProviderConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration ParameterProviderConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(String) Transforms the latest value from after retrieved from the store. Declaration ParameterProviderConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description System.String transformerName The name of the registered transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Extension Methods ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager) ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, String, ITransformer) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, Boolean)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider-1.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider-1.html",
    "title": "Interface IParameterProvider<TConfigurationBuilder> | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IParameterProvider<TConfigurationBuilder> Represents a type used to retrieve parameter values from a store. Inherited Members IParameterProvider.Get(String) IParameterProvider.GetAsync(String) IParameterProvider.Get<T>(String) IParameterProvider.GetAsync<T>(String) IParameterProvider.GetMultiple(String) IParameterProvider.GetMultipleAsync(String) IParameterProvider.GetMultiple<T>(String) IParameterProvider.GetMultipleAsync<T>(String) Namespace : AWS.Lambda.Powertools.Parameters.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProvider<out TConfigurationBuilder> : IParameterProvider where TConfigurationBuilder : ParameterProviderConfigurationBuilder Type Parameters Name Description TConfigurationBuilder The type of ConfigurationBuilder Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration TConfigurationBuilder ForceFetch() Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithMaxAge(TimeSpan) Set the cache maximum age Declaration TConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration TConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration TConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(String) Transforms the latest value from after retrieved from the store. Declaration TConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description System.String transformerName The name of the registered transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance Extension Methods ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager) ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, String, ITransformer) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, Boolean)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider.html",
    "title": "Class ParameterProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ParameterProvider Provide a generic view of a parameter provider. This is an abstract class. Inheritance System.Object ParameterProvider DynamoDBProvider ParameterProvider<TConfigurationBuilder> SecretsProvider Implements IParameterProvider Namespace : AWS.Lambda.Powertools.Parameters.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public abstract class ParameterProvider : object, IParameterProvider Properties Cache Gets the CacheManager instance. Declaration protected ICacheManager Cache { get; } Property Value Type Description ICacheManager CacheMode Gets parameter provider cache mode. Declaration protected virtual ParameterProviderCacheMode CacheMode { get; } Property Value Type Description ParameterProviderCacheMode Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration public ParameterProviderConfigurationBuilder ForceFetch() Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Get(String) Get parameter value for the provided key. Declaration public string? Get(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description System.Nullable < System.String > The parameter value. Get<T>(String) Get parameter transformed value for the provided key. Declaration public T Get<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description T The parameter transformed value. Type Parameters Name Description T Target transformation type. GetAsync(String) Get parameter value for the provided key. Declaration public Task<string?> GetAsync(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < System.Nullable < System.String >> The parameter value. GetAsync(String, ParameterProviderConfiguration) Get parameter value for the provided key. Declaration protected abstract Task<string?> GetAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < System.Nullable < System.String >> The parameter value. GetAsync<T>(String) Get parameter transformed value for the provided key. Declaration public virtual Task<T> GetAsync<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description Task <T> The parameter transformed value. Type Parameters Name Description T Target transformation type. GetMaxAge(ParameterProviderConfiguration) Get the cache maximum age based on provided configuration. Declaration protected TimeSpan GetMaxAge(ParameterProviderConfiguration config) Parameters Type Name Description ParameterProviderConfiguration config The parameter provider configuration Returns Type Description TimeSpan The cache maximum age. GetMultiple(String) Get multiple parameter values for the provided key. Declaration public IDictionary<string, string?> GetMultiple(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description IDictionary < System.String , System.Nullable < System.String >> Returns a collection parameter key/value pairs. GetMultiple<T>(String) Get multiple transformed parameter values for the provided key. Declaration public IDictionary<string, T> GetMultiple<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description IDictionary < System.String , T> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T GetMultipleAsync(String) Get multiple parameter values for the provided key. Declaration public Task<IDictionary<string, string?>> GetMultipleAsync(string key) Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < IDictionary < System.String , System.Nullable < System.String >>> Returns a collection parameter key/value pairs. GetMultipleAsync(String, ParameterProviderConfiguration) Get multiple parameter values for the provided key. Declaration protected abstract Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < IDictionary < System.String , System.Nullable < System.String >>> Returns a collection parameter key/value pairs. GetMultipleAsync<T>(String) Get multiple transformed parameter values for the provided key. Declaration public virtual Task<IDictionary<string, T>> GetMultipleAsync<T>(string key) where T : class Parameters Type Name Description System.String key The parameter key. Returns Type Description Task < IDictionary < System.String , T>> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T WithMaxAge(TimeSpan) Set the cache maximum age. Declaration public ParameterProviderConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration public ParameterProviderConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration public ParameterProviderConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(String) Transforms the latest value from after retrieved from the store. Declaration public ParameterProviderConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description System.String transformerName The name of the registered transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Implements IParameterProvider"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider-1.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider-1.html",
    "title": "Class ParameterProvider<TConfigurationBuilder> | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ParameterProvider<TConfigurationBuilder> Provide a generic view of a parameter provider. This is an abstract class. Inheritance System.Object ParameterProvider ParameterProvider<TConfigurationBuilder> SsmProvider Implements IParameterProvider Inherited Members ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(String) ParameterProvider.GetAsync(String) ParameterProvider.Get<T>(String) ParameterProvider.GetAsync<T>(String) ParameterProvider.GetMultiple(String) ParameterProvider.GetMultipleAsync(String) ParameterProvider.GetMultiple<T>(String) ParameterProvider.GetMultipleAsync<T>(String) ParameterProvider.GetAsync(String, ParameterProviderConfiguration) ParameterProvider.GetMultipleAsync(String, ParameterProviderConfiguration) Namespace : AWS.Lambda.Powertools.Parameters.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public abstract class ParameterProvider<TConfigurationBuilder> : ParameterProvider, IParameterProvider where TConfigurationBuilder : ParameterProviderConfigurationBuilder Type Parameters Name Description TConfigurationBuilder Type of the ConfigurationBuilder for the parameter provider. Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration public TConfigurationBuilder ForceFetch() Returns Type Description TConfigurationBuilder Provider Configuration Builder instance NewConfigurationBuilder() Creates a new instance of the specified type ConfigurationBuilder. Declaration protected abstract TConfigurationBuilder NewConfigurationBuilder() Returns Type Description TConfigurationBuilder A new instance of ConfigurationBuilder. WithMaxAge(TimeSpan) Set the cache maximum age. Declaration public TConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration public TConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration public TConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(String) Transforms the latest value from after retrieved from the store. Declaration public TConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description System.String transformerName The name of the registered transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance Implements IParameterProvider"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderCacheMode.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderCacheMode.html",
    "title": "Enum ParameterProviderCacheMode | Powertools for AWS Lambda (.NET)",
    "keywords": "Enum ParameterProviderCacheMode Enum ParameterProviderCacheMode Namespace : AWS.Lambda.Powertools.Parameters.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public enum ParameterProviderCacheMode : int Fields Name Description All All Disabled Disabled GetMultipleResultOnly GetMultipleResultOnly GetResultOnly GetResultOnly"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderExtensions.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderExtensions.html",
    "title": "Class ParameterProviderExtensions | Powertools for AWS Lambda (.NET)",
    "keywords": "Class ParameterProviderExtensions Class ParameterProviderExtensions. Inheritance System.Object ParameterProviderExtensions Namespace : AWS.Lambda.Powertools.Parameters.Provider Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public static class ParameterProviderExtensions : object Methods AddTransformer<TProvider>(TProvider, String, ITransformer) Registers a new transformer instance by name. Declaration public static TProvider AddTransformer<TProvider>(this TProvider provider, string name, ITransformer transformer) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. System.String name The transformer name. ITransformer transformer The transformer instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. DefaultMaxAge<TProvider>(TProvider, TimeSpan) Set the cache maximum age. Declaration public static TProvider DefaultMaxAge<TProvider>(this TProvider provider, TimeSpan maxAge) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. TimeSpan maxAge The cache maximum age. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. RaiseTransformationError<TProvider>(TProvider) Configure the transformer to raise exception on transformation error Declaration public static TProvider RaiseTransformationError<TProvider>(this TProvider provider) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. RaiseTransformationError<TProvider>(TProvider, Boolean) Configure the transformer to raise exception or return Null on transformation error Declaration public static TProvider RaiseTransformationError<TProvider>(this TProvider provider, bool raiseError) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. System.Boolean raiseError true for raise error, false for return Null. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. UseCacheManager<TProvider>(TProvider, ICacheManager) Set the CacheManager instance. Declaration public static TProvider UseCacheManager<TProvider>(this TProvider provider, ICacheManager cacheManager) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. ICacheManager cacheManager The CacheManager instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. UseTransformerManager<TProvider>(TProvider, ITransformerManager) Set the TransformerManager instance. Declaration public static TProvider UseTransformerManager<TProvider>(this TProvider provider, ITransformerManager transformerManager) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. ITransformerManager transformerManager The TransformerManager instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type."
  },
  "api/AWS.Lambda.Powertools.Parameters.SecretsManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SecretsManager.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.SecretsManager | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.SecretsManager Classes SecretsProvider Provider to retrieve parameter values from SAWS Secrets Manager. Interfaces ISecretsProvider Represents a type used to retrieve parameter values from SAWS Secrets Manager."
  },
  "api/AWS.Lambda.Powertools.Parameters.SecretsManager.ISecretsProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SecretsManager.ISecretsProvider.html",
    "title": "Interface ISecretsProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface ISecretsProvider Represents a type used to retrieve parameter values from SAWS Secrets Manager. Inherited Members IParameterProvider.Get(String) IParameterProvider.GetAsync(String) IParameterProvider.Get<T>(String) IParameterProvider.GetAsync<T>(String) IParameterProvider.GetMultiple(String) IParameterProvider.GetMultipleAsync(String) IParameterProvider.GetMultiple<T>(String) IParameterProvider.GetMultipleAsync<T>(String) IParameterProvider.WithMaxAge(TimeSpan) IParameterProvider.ForceFetch() IParameterProvider.WithTransformation(Transformation) IParameterProvider.WithTransformation(ITransformer) IParameterProvider.WithTransformation(String) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.UseClient(IAmazonSecretsManager) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AmazonSecretsManagerConfig) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AWSCredentials) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AWSCredentials, RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AWSCredentials, AmazonSecretsManagerConfig) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(String, String) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(String, String, RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(String, String, AmazonSecretsManagerConfig) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(String, String, String) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(String, String, String, RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(String, String, String, AmazonSecretsManagerConfig) Namespace : AWS.Lambda.Powertools.Parameters.SecretsManager Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface ISecretsProvider : IParameterProvider, IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig> Extension Methods ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager) ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, String, ITransformer) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, Boolean)"
  },
  "api/AWS.Lambda.Powertools.Parameters.SecretsManager.SecretsProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SecretsManager.SecretsProvider.html",
    "title": "Class SecretsProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Class SecretsProvider Provider to retrieve parameter values from SAWS Secrets Manager. Inheritance System.Object ParameterProvider SecretsProvider Implements ISecretsProvider IParameterProvider IParameterProviderConfigurableClient < ISecretsProvider , IAmazonSecretsManager , AmazonSecretsManagerConfig > Inherited Members ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(String) ParameterProvider.GetAsync(String) ParameterProvider.Get<T>(String) ParameterProvider.GetAsync<T>(String) ParameterProvider.GetMultiple(String) ParameterProvider.GetMultipleAsync(String) ParameterProvider.GetMultiple<T>(String) ParameterProvider.GetMultipleAsync<T>(String) ParameterProvider.WithMaxAge(TimeSpan) ParameterProvider.ForceFetch() ParameterProvider.WithTransformation(Transformation) ParameterProvider.WithTransformation(ITransformer) ParameterProvider.WithTransformation(String) Namespace : AWS.Lambda.Powertools.Parameters.SecretsManager Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public class SecretsProvider : ParameterProvider, ISecretsProvider, IParameterProvider, IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig> Methods ConfigureClient(AmazonSecretsManagerConfig) Configure client with the credentials loaded from the application's default configuration. Declaration public ISecretsProvider ConfigureClient(AmazonSecretsManagerConfig config) Parameters Type Name Description AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration public ISecretsProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description ISecretsProvider Provider instance ConfigureClient(AWSCredentials, AmazonSecretsManagerConfig) Configure client with AWS credentials and a client configuration object. Declaration public ISecretsProvider ConfigureClient(AWSCredentials credentials, AmazonSecretsManagerConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration public ISecretsProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration public ISecretsProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance ConfigureClient(String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key Returns Type Description ISecretsProvider Provider instance ConfigureClient(String, String, AmazonSecretsManagerConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonSecretsManagerConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance ConfigureClient(String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance ConfigureClient(String, String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token Returns Type Description ISecretsProvider Provider instance ConfigureClient(String, String, String, AmazonSecretsManagerConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonSecretsManagerConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance ConfigureClient(String, String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance GetAsync(String, ParameterProviderConfiguration) Get parameter value for the provided key. Declaration protected override Task<string?> GetAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < System.Nullable < System.String >> The parameter value. Overrides ParameterProvider.GetAsync(String, ParameterProviderConfiguration) GetMultipleAsync(String, ParameterProviderConfiguration) Get multiple parameter values for the provided key. Declaration protected override Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < IDictionary < System.String , System.Nullable < System.String >>> Returns a collection parameter key/value pairs. Overrides ParameterProvider.GetMultipleAsync(String, ParameterProviderConfiguration) UseClient(IAmazonSecretsManager) Use a custom client Declaration public ISecretsProvider UseClient(IAmazonSecretsManager client) Parameters Type Name Description IAmazonSecretsManager client The custom client Returns Type Description ISecretsProvider Provider instance Implements ISecretsProvider IParameterProvider IParameterProviderConfigurableClient<TProvider, TClient, TConfig>"
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Classes SsmProvider Provider to retrieve parameter values from AWS Systems Manager Parameter Store. SsmProviderConfigurationBuilder SsmProviderConfigurationBuilder class. Interfaces ISsmProvider Represents a type used to retrieve parameter values from AWS Systems Manager Parameter Store."
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.ISsmProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.ISsmProvider.html",
    "title": "Interface ISsmProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface ISsmProvider Represents a type used to retrieve parameter values from AWS Systems Manager Parameter Store. Inherited Members IParameterProvider<SsmProviderConfigurationBuilder>.WithMaxAge(TimeSpan) IParameterProvider<SsmProviderConfigurationBuilder>.ForceFetch() IParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(Transformation) IParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(ITransformer) IParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(String) IParameterProvider.Get(String) IParameterProvider.GetAsync(String) IParameterProvider.Get<T>(String) IParameterProvider.GetAsync<T>(String) IParameterProvider.GetMultiple(String) IParameterProvider.GetMultipleAsync(String) IParameterProvider.GetMultiple<T>(String) IParameterProvider.GetMultipleAsync<T>(String) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.UseClient(IAmazonSimpleSystemsManagement) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AmazonSimpleSystemsManagementConfig) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AWSCredentials) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AWSCredentials, RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AWSCredentials, AmazonSimpleSystemsManagementConfig) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(String, String) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(String, String, RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(String, String, AmazonSimpleSystemsManagementConfig) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(String, String, String) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(String, String, String, RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(String, String, String, AmazonSimpleSystemsManagementConfig) Namespace : AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface ISsmProvider : IParameterProvider<SsmProviderConfigurationBuilder>, IParameterProvider, IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig> Methods Recursive() Fetches all parameter values recursively based on a path prefix. For GetMultiple() only. Declaration SsmProviderConfigurationBuilder Recursive() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. WithDecryption() Automatically decrypt the parameter. Declaration SsmProviderConfigurationBuilder WithDecryption() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. Extension Methods ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager) ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, String, ITransformer) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, Boolean)"
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProvider.html",
    "title": "Class SsmProvider | Powertools for AWS Lambda (.NET)",
    "keywords": "Class SsmProvider Provider to retrieve parameter values from AWS Systems Manager Parameter Store. Inheritance System.Object ParameterProvider ParameterProvider < SsmProviderConfigurationBuilder > SsmProvider Implements ISsmProvider IParameterProvider < SsmProviderConfigurationBuilder > IParameterProvider IParameterProviderConfigurableClient < ISsmProvider , IAmazonSimpleSystemsManagement , AmazonSimpleSystemsManagementConfig > Inherited Members ParameterProvider<SsmProviderConfigurationBuilder>.WithMaxAge(TimeSpan) ParameterProvider<SsmProviderConfigurationBuilder>.ForceFetch() ParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(Transformation) ParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(ITransformer) ParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(String) ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(String) ParameterProvider.GetAsync(String) ParameterProvider.Get<T>(String) ParameterProvider.GetAsync<T>(String) ParameterProvider.GetMultiple(String) ParameterProvider.GetMultipleAsync(String) ParameterProvider.GetMultiple<T>(String) ParameterProvider.GetMultipleAsync<T>(String) Namespace : AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public class SsmProvider : ParameterProvider<SsmProviderConfigurationBuilder>, ISsmProvider, IParameterProvider<SsmProviderConfigurationBuilder>, IParameterProvider, IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig> Methods ConfigureClient(AmazonSimpleSystemsManagementConfig) Configure client with the credentials loaded from the application's default configuration. Declaration public ISsmProvider ConfigureClient(AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration public ISsmProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description ISsmProvider Provider instance ConfigureClient(AWSCredentials, AmazonSimpleSystemsManagementConfig) Configure client with AWS credentials and a client configuration object. Declaration public ISsmProvider ConfigureClient(AWSCredentials credentials, AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration public ISsmProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration public ISsmProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance ConfigureClient(String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key Returns Type Description ISsmProvider Provider instance ConfigureClient(String, String, AmazonSimpleSystemsManagementConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance ConfigureClient(String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance ConfigureClient(String, String, String) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token Returns Type Description ISsmProvider Provider instance ConfigureClient(String, String, String, AmazonSimpleSystemsManagementConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance ConfigureClient(String, String, String, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description System.String awsAccessKeyId AWS Access Key ID System.String awsSecretAccessKey AWS Secret Access Key System.String awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance GetAsync(String, ParameterProviderConfiguration) Get parameter value for the provided key. Declaration protected override Task<string?> GetAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < System.Nullable < System.String >> The parameter value. Overrides ParameterProvider.GetAsync(String, ParameterProviderConfiguration) GetMultipleAsync(String, ParameterProviderConfiguration) Get multiple parameter values for the provided key. Declaration protected override Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration config) Parameters Type Name Description System.String key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task < IDictionary < System.String , System.Nullable < System.String >>> Returns a collection parameter key/value pairs. Overrides ParameterProvider.GetMultipleAsync(String, ParameterProviderConfiguration) NewConfigurationBuilder() Creates and configures a new instance of SsmProviderConfigurationBuilder. Declaration protected override SsmProviderConfigurationBuilder NewConfigurationBuilder() Returns Type Description SsmProviderConfigurationBuilder A new instance of SsmProviderConfigurationBuilder. Overrides AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider<AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProviderConfigurationBuilder>.NewConfigurationBuilder() Recursive() Fetches all parameter values recursively based on a path prefix. For GetMultiple() only. Declaration public SsmProviderConfigurationBuilder Recursive() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. UseClient(IAmazonSimpleSystemsManagement) Use a custom client Declaration public ISsmProvider UseClient(IAmazonSimpleSystemsManagement client) Parameters Type Name Description IAmazonSimpleSystemsManagement client The custom client Returns Type Description ISsmProvider Provider instance WithDecryption() Automatically decrypt the parameter. Declaration public SsmProviderConfigurationBuilder WithDecryption() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. Implements ISsmProvider IParameterProvider<TConfigurationBuilder> IParameterProvider IParameterProviderConfigurableClient<TProvider, TClient, TConfig>"
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProviderConfigurationBuilder.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProviderConfigurationBuilder.html",
    "title": "Class SsmProviderConfigurationBuilder | Powertools for AWS Lambda (.NET)",
    "keywords": "Class SsmProviderConfigurationBuilder SsmProviderConfigurationBuilder class. Inheritance System.Object ParameterProviderConfigurationBuilder SsmProviderConfigurationBuilder Inherited Members ParameterProviderConfigurationBuilder.HasTransformation ParameterProviderConfigurationBuilder.Get(String) ParameterProviderConfigurationBuilder.GetAsync(String) ParameterProviderConfigurationBuilder.Get<T>(String) ParameterProviderConfigurationBuilder.GetAsync<T>(String) ParameterProviderConfigurationBuilder.GetMultiple(String) ParameterProviderConfigurationBuilder.GetMultipleAsync(String) ParameterProviderConfigurationBuilder.GetMultiple<T>(String) ParameterProviderConfigurationBuilder.GetMultipleAsync<T>(String) Namespace : AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public class SsmProviderConfigurationBuilder : ParameterProviderConfigurationBuilder Constructors SsmProviderConfigurationBuilder(ParameterProvider) SsmProviderConfigurationBuilder constructor. Declaration public SsmProviderConfigurationBuilder(ParameterProvider parameterProvider) Parameters Type Name Description ParameterProvider parameterProvider Methods NewConfiguration() Creates and configures a new instance of SsmProviderConfiguration. Declaration protected override ParameterProviderConfiguration NewConfiguration() Returns Type Description ParameterProviderConfiguration A new instance of SsmProviderConfiguration. Overrides ParameterProviderConfigurationBuilder.NewConfiguration() Recursive() Fetches all parameter values recursively based on a path prefix. For GetMultiple() only. Declaration public SsmProviderConfigurationBuilder Recursive() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. WithDecryption() Automatically decrypt the parameter. Declaration public SsmProviderConfigurationBuilder WithDecryption() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. Extension Methods ParameterProviderConfigurationExtensions.ForceFetch<TConfigurationBuilder>(TConfigurationBuilder) ParameterProviderConfigurationExtensions.WithMaxAge<TConfigurationBuilder>(TConfigurationBuilder, TimeSpan) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, Transformation) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, ITransformer) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, String)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Transform | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Transform Classes TransformationException Class TransformationException. Implements the Interfaces ITransformer Represents a type used to transform a parameter value. ITransformerManager Represents a type used to manage transformers. Enums Transformation Enum Transformation"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformer.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformer.html",
    "title": "Interface ITransformer | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface ITransformer Represents a type used to transform a parameter value. Namespace : AWS.Lambda.Powertools.Parameters.Transform Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface ITransformer Methods Transform<T>(String) Transforms the string value to specified type. Declaration T Transform<T>(string value) Parameters Type Name Description System.String value Parameter value. Returns Type Description T The transformed value. Type Parameters Name Description T Target transformation type."
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformerManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformerManager.html",
    "title": "Interface ITransformerManager | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface ITransformerManager Represents a type used to manage transformers. Namespace : AWS.Lambda.Powertools.Parameters.Transform Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public interface ITransformerManager Methods AddTransformer(String, ITransformer) Add an instance of a transformer by a unique name Declaration void AddTransformer(string transformerName, ITransformer transformer) Parameters Type Name Description System.String transformerName name of the transformer ITransformer transformer the transformer instance GetTransformer(Transformation) Gets an instance of transformer for the provided transformation type. Declaration ITransformer GetTransformer(Transformation transformation) Parameters Type Name Description Transformation transformation Type of the transformation. Returns Type Description ITransformer The transformer instance GetTransformer(String) Gets an instance of transformer for the provided transformer name. Declaration ITransformer GetTransformer(string transformerName) Parameters Type Name Description System.String transformerName The unique name for the transformer Returns Type Description ITransformer The transformer instance TryGetTransformer(Transformation, String) Gets an instance of transformer for the provided transformation type and parameter key. Declaration ITransformer TryGetTransformer(Transformation transformation, string key) Parameters Type Name Description Transformation transformation Type of the transformation. System.String key Parameter key, it's required for Transformation.Auto Returns Type Description ITransformer The transformer instance TryGetTransformer(String) Gets an instance of transformer for the provided transformer name. Declaration ITransformer TryGetTransformer(string transformerName) Parameters Type Name Description System.String transformerName The unique name for the transformer Returns Type Description ITransformer The transformer instance"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.Transformation.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.Transformation.html",
    "title": "Enum Transformation | Powertools for AWS Lambda (.NET)",
    "keywords": "Enum Transformation Enum Transformation Namespace : AWS.Lambda.Powertools.Parameters.Transform Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public enum Transformation : int Fields Name Description Auto Auto Base64 Base64 Json Json"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.TransformationException.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.TransformationException.html",
    "title": "Class TransformationException | Powertools for AWS Lambda (.NET)",
    "keywords": "Class TransformationException Class TransformationException. Implements the Inheritance System.Object TransformationException Namespace : AWS.Lambda.Powertools.Parameters.Transform Assembly : AWS.Lambda.Powertools.Parameters.dll Syntax public class TransformationException : Exception Constructors TransformationException(String) Initializes a new instance of the TransformationException class. Declaration public TransformationException(string message) Parameters Type Name Description System.String message The exception message. TransformationException(String, Exception) Initializes a new instance of the TransformationException class. Declaration public TransformationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. Exception innerException The inner exception."
  },
  "api/AWS.Lambda.Powertools.Tracing.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.html",
    "title": "Namespace AWS.Lambda.Powertools.Tracing | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Tracing Classes Tracing Class Tracing. TracingAttribute Creates an opinionated thin wrapper for AWS X-Ray .NET SDK which provides functionality to reduce the overhead of performing common tracing tasks. Key features --------------------- Helper methods to improve the developer experience for creating custom AWS X-Ray subsegments Capture cold start as annotation Capture function responses and full exceptions as metadata Better experience when developing with multiple threads Auto-patch supported modules by AWS X-Ray Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_TRACER_CAPTURE_RESPONSE bool, disable auto-capture response as metadata (e.g. true, false) POWERTOOLS_TRACER_CAPTURE_ERROR bool, disable auto-capture error as metadata (e.g. true, false) POWERTOOLS_TRACE_DISABLED bool, disable auto-capture error or response as metadata (e.g. true, false) Parameters ----------- Parameter name Description Service string, service name that will be appended in all tracing metadata SegmentName string, custom segment name for the operation, by default '## {MethodName}' Namespace string, namespace to current subsegment CaptureMode enum, capture mode to record method responses and errors (e.g. EnvironmentVariable, Response, and Error), by default EnvironmentVariable Enums TracingCaptureMode Enum TracingCaptureMode"
  },
  "api/AWS.Lambda.Powertools.Tracing.Internal.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.Internal.html",
    "title": "Namespace AWS.Lambda.Powertools.Tracing.Internal | Powertools for AWS Lambda (.NET)",
    "keywords": "Namespace AWS.Lambda.Powertools.Tracing.Internal Interfaces IXRayRecorder Interface IXRayRecorder"
  },
  "api/AWS.Lambda.Powertools.Tracing.Internal.IXRayRecorder.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.Internal.IXRayRecorder.html",
    "title": "Interface IXRayRecorder | Powertools for AWS Lambda (.NET)",
    "keywords": "Interface IXRayRecorder Interface IXRayRecorder Namespace : AWS.Lambda.Powertools.Tracing.Internal Assembly : AWS.Lambda.Powertools.Tracing.dll Syntax public interface IXRayRecorder Properties Emitter Gets the emitter. Declaration ISegmentEmitter Emitter { get; } Property Value Type Description ISegmentEmitter The emitter. StreamingStrategy Gets the streaming strategy. Declaration IStreamingStrategy StreamingStrategy { get; } Property Value Type Description IStreamingStrategy The streaming strategy. Methods AddAnnotation(String, Object) Adds the annotation. Declaration void AddAnnotation(string key, object value) Parameters Type Name Description System.String key The key. System.Object value The value. AddException(Exception) Adds the exception. Declaration void AddException(Exception exception) Parameters Type Name Description Exception exception The exception. AddHttpInformation(String, Object) Adds the HTTP information. Declaration void AddHttpInformation(string key, object value) Parameters Type Name Description System.String key The key. System.Object value The value. AddMetadata(String, String, Object) Adds the metadata. Declaration void AddMetadata(string nameSpace, string key, object value) Parameters Type Name Description System.String nameSpace The name space. System.String key The key. System.Object value The value. BeginSubsegment(String) Begins the subsegment. Declaration void BeginSubsegment(string name) Parameters Type Name Description System.String name The name. EndSubsegment() Ends the subsegment. Declaration void EndSubsegment() GetEntity() Gets the entity. Declaration Entity GetEntity() Returns Type Description Entity Entity. SetEntity(Entity) Sets the entity. Declaration void SetEntity(Entity entity) Parameters Type Name Description Entity entity The entity. SetNamespace(String) Sets the namespace. Declaration void SetNamespace(string value) Parameters Type Name Description System.String value The value."
  },
  "api/AWS.Lambda.Powertools.Tracing.Tracing.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.Tracing.html",
    "title": "Class Tracing | Powertools for AWS Lambda (.NET)",
    "keywords": "Class Tracing Class Tracing. Inheritance System.Object Tracing Namespace : AWS.Lambda.Powertools.Tracing Assembly : AWS.Lambda.Powertools.Tracing.dll Syntax public static class Tracing : object Methods AddAnnotation(String, Object) Adds the specified key and value as annotation to current segment. The type of value is restricted. Only System.String , System.Int32 , System.Int64 , System.Double and System.Boolean are supported. Declaration public static void AddAnnotation(string key, object value) Parameters Type Name Description System.String key The key of the annotation to add. System.Object value The value of the annotation to add. Exceptions Type Condition Amazon.XRay.Recorder.Core.Exceptions.EntityNotAvailableException Entity is not available in trace context. AddException(Exception) Add the exception to current segment and also mark current segment as fault. Declaration public static void AddException(Exception exception) Parameters Type Name Description Exception exception The exception to be added. Exceptions Type Condition Amazon.XRay.Recorder.Core.Exceptions.EntityNotAvailableException Entity is not available in trace context. AddHttpInformation(String, Object) Adds the specified key and value as http information to current segment. Declaration public static void AddHttpInformation(string key, object value) Parameters Type Name Description System.String key The key of the http information to add. System.Object value The value of the http information to add. Exceptions Type Condition System.ArgumentException Key is null or empty. System.ArgumentNullException Value is null. Amazon.XRay.Recorder.Core.Exceptions.EntityNotAvailableException Entity is not available in trace context. AddMetadata(String, Object) Adds the specified key and value to metadata with given namespace. Declaration public static void AddMetadata(string key, object value) Parameters Type Name Description System.String key The key. System.Object value The value. AddMetadata(String, String, Object) Adds the specified key and value to metadata with given namespace. Declaration public static void AddMetadata(string nameSpace, string key, object value) Parameters Type Name Description System.String nameSpace The namespace. System.String key The key. System.Object value The value. GetEntity() Gets entity (segment/subsegment) from the Amazon.XRay.Recorder.Core.AWSXRayRecorderImpl.TraceContext . Declaration public static Entity GetEntity() Returns Type Description Entity The entity (segment/subsegment) Exceptions Type Condition Amazon.XRay.Recorder.Core.Exceptions.EntityNotAvailableException Thrown when the entity is not available to get. SetEntity(Entity) Set the specified entity (segment/subsegment) into Amazon.XRay.Recorder.Core.AWSXRayRecorderImpl.TraceContext . Declaration public static void SetEntity(Entity entity) Parameters Type Name Description Entity entity The entity to be set Exceptions Type Condition Amazon.XRay.Recorder.Core.Exceptions.EntityNotAvailableException Thrown when the entity is not available to set WithSubsegment(String, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. The namespace used follows the flow as described in TracingAttribute Declaration public static void WithSubsegment(string name, Action<Subsegment> subsegment) Parameters Type Name Description System.String name The name of the subsegment. Action < Subsegment > subsegment The AWS X-Ray subsegment for the wrapped consumer. WithSubsegment(String, Entity, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. This method is intended for use with multi-threaded programming where the context is lost between threads. Declaration public static void WithSubsegment(string name, Entity entity, Action<Subsegment> subsegment) Parameters Type Name Description System.String name The name of the subsegment. Entity entity The current AWS X-Ray context. Action < Subsegment > subsegment The AWS X-Ray subsegment for the wrapped consumer. WithSubsegment(String, String, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. The namespace used follows the flow as described in TracingAttribute Declaration public static void WithSubsegment(string nameSpace, string name, Action<Subsegment> subsegment) Parameters Type Name Description System.String nameSpace The name space. System.String name The name of the subsegment. Action < Subsegment > subsegment The AWS X-Ray subsegment for the wrapped consumer. WithSubsegment(String, String, Entity, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. This method is intended for use with multi-threaded programming where the context is lost between threads. Declaration public static void WithSubsegment(string nameSpace, string name, Entity entity, Action<Subsegment> subsegment) Parameters Type Name Description System.String nameSpace The namespace of the subsegment. System.String name The name of the subsegment. Entity entity The current AWS X-Ray context. Action < Subsegment > subsegment The AWS X-Ray subsegment for the wrapped consumer."
  },
  "api/AWS.Lambda.Powertools.Tracing.TracingAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.TracingAttribute.html",
    "title": "Class TracingAttribute | Powertools for AWS Lambda (.NET)",
    "keywords": "Class TracingAttribute Creates an opinionated thin wrapper for AWS X-Ray .NET SDK which provides functionality to reduce the overhead of performing common tracing tasks. Key features --------------------- Helper methods to improve the developer experience for creating custom AWS X-Ray subsegments Capture cold start as annotation Capture function responses and full exceptions as metadata Better experience when developing with multiple threads Auto-patch supported modules by AWS X-Ray Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_TRACER_CAPTURE_RESPONSE bool, disable auto-capture response as metadata (e.g. true, false) POWERTOOLS_TRACER_CAPTURE_ERROR bool, disable auto-capture error as metadata (e.g. true, false) POWERTOOLS_TRACE_DISABLED bool, disable auto-capture error or response as metadata (e.g. true, false) Parameters ----------- Parameter name Description Service string, service name that will be appended in all tracing metadata SegmentName string, custom segment name for the operation, by default '## {MethodName}' Namespace string, namespace to current subsegment CaptureMode enum, capture mode to record method responses and errors (e.g. EnvironmentVariable, Response, and Error), by default EnvironmentVariable Inheritance System.Object UniversalWrapperAttribute MethodAspectAttribute TracingAttribute Inherited Members AWS.Lambda.Powertools.Common.MethodAspectAttribute.WrapSync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) AWS.Lambda.Powertools.Common.MethodAspectAttribute.WrapAsync<T>(Func<, >, System.Object[], AWS.Lambda.Powertools.Common.AspectEventArgs) Namespace : AWS.Lambda.Powertools.Tracing Assembly : AWS.Lambda.Powertools.Tracing.dll Syntax public class TracingAttribute : MethodAspectAttribute Examples [Tracing( SegmentName = \"ExampleSegment\", Namespace = \"ExampleNamespace\", CaptureMode = TracingCaptureMode.ResponseAndError) ] public async Task<APIGatewayProxyResponse> FunctionHandler (APIGatewayProxyRequest apigProxyEvent, ILambdaContext context) { ... } Properties CaptureMode Set capture mode to record method responses and errors. The defaults are the environment variables POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR . Declaration public TracingCaptureMode CaptureMode { get; set; } Property Value Type Description TracingCaptureMode The capture mode. Namespace Set namespace to current subsegment. The default is the environment variable POWERTOOLS_SERVICE_NAME . Declaration public string Namespace { get; set; } Property Value Type Description System.String The namespace. SegmentName Set custom segment name for the operation. The default is '## {MethodName}'. Declaration public string SegmentName { get; set; } Property Value Type Description System.String The name of the segment. Methods CreateHandler() Creates the handler. Declaration protected override IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. Overrides MethodAspectAttribute.CreateHandler()"
  },
  "api/AWS.Lambda.Powertools.Tracing.TracingCaptureMode.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.TracingCaptureMode.html",
    "title": "Enum TracingCaptureMode | Powertools for AWS Lambda (.NET)",
    "keywords": "Enum TracingCaptureMode Enum TracingCaptureMode Namespace : AWS.Lambda.Powertools.Tracing Assembly : AWS.Lambda.Powertools.Tracing.dll Syntax public enum TracingCaptureMode : int Fields Name Description Disabled Disables attribute to capture both response and error from the method. If this mode is explicitly overridden on TracingAttribute attribute, it will override values of environment variable POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR EnvironmentVariable Enables/Disables attribute to capture response and error from the method based on the value of environment variable POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR Error Enabled attribute to capture only error from the method. If this mode is explicitly overridden on TracingAttribute attribute, it will override value of environment variable POWERTOOLS_TRACER_CAPTURE_ERROR Response Enables attribute to capture only response. If this mode is explicitly overridden on { TracingAttribute attribute, it will override value of environment variable POWERTOOLS_TRACER_CAPTURE_RESPONSE ResponseAndError Enabled attribute to capture both response error from the method. If this mode is explicitly overridden on TracingAttribute attribute, it will override value of environment variables POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Powertools for AWS Lambda (.NET)",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "Powertools for AWS Lambda (.NET) API | Powertools for AWS Lambda (.NET)",
    "keywords": "Powertools for AWS Lambda (.NET) API Welcome to the Powertools for AWS Lambda (.NET) API reference. This documentation contains the API details for all supported utilities. To get started use the API Documentaion menu on the navigation bar, or search for specific keywords on the search box on top-right corner of your screen. Note Are you looking for documentation on how to use Powertools for AWS Lambda (.NET) utilities and code samples? 👉 Here is the perfect place to start. Feedback If you have any feedback, create a new issue in the Powertools for AWS Lambda (.NET) repository on GitHub ."
  }
}