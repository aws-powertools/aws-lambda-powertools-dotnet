{
  "api/AWS.Lambda.Powertools.Common.AspectEventArgs.html": {
    "href": "api/AWS.Lambda.Powertools.Common.AspectEventArgs.html",
    "title": "Class AspectEventArgs | AWS Lambda Powertools for .NET",
    "keywords": "Class AspectEventArgs Class AspectEventArgs. Implements the EventArgs Inheritance object EventArgs AspectEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public class AspectEventArgs : EventArgs Properties Args Gets the arguments. Declaration public IReadOnlyList<object> Args { get; } Property Value Type Description IReadOnlyList<object> The arguments. See Also EventArgs Instance Gets the instance. Declaration public object Instance { get; } Property Value Type Description object The instance. See Also EventArgs Method Gets the method. Declaration public MethodBase Method { get; } Property Value Type Description MethodBase The method. See Also EventArgs Name Gets the name. Declaration public string Name { get; } Property Value Type Description string The name. See Also EventArgs ReturnType Gets the type of the return. Declaration public Type ReturnType { get; } Property Value Type Description Type The type of the return. See Also EventArgs Triggers Gets the triggers. Declaration public Attribute[] Triggers { get; } Property Value Type Description Attribute[] The triggers. See Also EventArgs Type Gets the type. Declaration public Type Type { get; } Property Value Type Description Type The type. See Also EventArgs See Also EventArgs"
  },
  "api/AWS.Lambda.Powertools.Common.html": {
    "href": "api/AWS.Lambda.Powertools.Common.html",
    "title": "Namespace AWS.Lambda.Powertools.Common | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Common Classes AspectEventArgs Class AspectEventArgs. Implements the EventArgs MethodAspectAttribute Class MethodAspectAttribute. Implements the UniversalWrapperAttribute PascalCaseNamingPolicy Class PascalCaseNamingPolicy Implements the JsonNamingPolicy PowertoolsConfigurations Class PowertoolsConfigurations. Implements the IPowertoolsConfigurations PowertoolsEnvironment SnakeCaseNamingPolicy Class SnakeCaseNamingPolicy Implements the JsonNamingPolicy StringUtils Class StringUtils SystemWrapper Class SystemWrapper. Implements the ISystemWrapper UniversalWrapperAspect Class UniversalWrapperAspect. UniversalWrapperAttribute Class UniversalWrapperAttribute. Implements the Attribute Interfaces IMethodAspectHandler Interface IMethodAspectHandler IPowertoolsConfigurations Interface IPowertoolsConfigurations IPowertoolsEnvironment Interface for PowertoolsEnvironment ISystemWrapper Interface ISystemWrapper"
  },
  "api/AWS.Lambda.Powertools.Common.IMethodAspectHandler.html": {
    "href": "api/AWS.Lambda.Powertools.Common.IMethodAspectHandler.html",
    "title": "Interface IMethodAspectHandler | AWS Lambda Powertools for .NET",
    "keywords": "Interface IMethodAspectHandler Interface IMethodAspectHandler Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public interface IMethodAspectHandler Methods OnEntry(AspectEventArgs) Handles the Entry event. Declaration void OnEntry(AspectEventArgs eventArgs) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. OnException<T>(AspectEventArgs, Exception) Called when [exception]. Declaration T OnException<T>(AspectEventArgs eventArgs, Exception exception) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Exception exception The exception. Returns Type Description T T. Type Parameters Name Description T OnExit(AspectEventArgs) Handles the Exit event. Declaration void OnExit(AspectEventArgs eventArgs) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. OnSuccess(AspectEventArgs, object) Called when [success]. Declaration void OnSuccess(AspectEventArgs eventArgs, object result) Parameters Type Name Description AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. object result The result."
  },
  "api/AWS.Lambda.Powertools.Common.IPowertoolsConfigurations.html": {
    "href": "api/AWS.Lambda.Powertools.Common.IPowertoolsConfigurations.html",
    "title": "Interface IPowertoolsConfigurations | AWS Lambda Powertools for .NET",
    "keywords": "Interface IPowertoolsConfigurations Interface IPowertoolsConfigurations Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public interface IPowertoolsConfigurations Properties IsLambdaEnvironment Gets a value indicating whether this instance is Lambda. Declaration bool IsLambdaEnvironment { get; } Property Value Type Description bool true if this instance is Lambda; otherwise, false. IsSamLocal Gets a value indicating whether this instance is sam local. Declaration bool IsSamLocal { get; } Property Value Type Description bool true if this instance is sam local; otherwise, false. IsServiceDefined Gets a value indicating whether this instance is service defined. Declaration bool IsServiceDefined { get; } Property Value Type Description bool true if this instance is service defined; otherwise, false. LogLevel Gets the log level. Declaration string LogLevel { get; } Property Value Type Description string The log level. LoggerLogEvent Gets a value indicating whether [logger log event]. Declaration bool LoggerLogEvent { get; } Property Value Type Description bool true if [logger log event]; otherwise, false. LoggerOutputCase Gets the logger output casing. Declaration string LoggerOutputCase { get; } Property Value Type Description string The logger output casing. Defaults to snake case. LoggerSampleRate Gets the logger sample rate. Declaration double? LoggerSampleRate { get; } Property Value Type Description double? The logger sample rate. MetricsNamespace Gets the metrics namespace. Declaration string MetricsNamespace { get; } Property Value Type Description string The metrics namespace. Service Gets the service. Declaration string Service { get; } Property Value Type Description string The service. TracerCaptureError Gets a value indicating whether [tracer capture error]. Declaration bool TracerCaptureError { get; } Property Value Type Description bool true if [tracer capture error]; otherwise, false. TracerCaptureResponse Gets a value indicating whether [tracer capture response]. Declaration bool TracerCaptureResponse { get; } Property Value Type Description bool true if [tracer capture response]; otherwise, false. TracingDisabled Gets a value indicating whether [tracing is disabled]. Declaration bool TracingDisabled { get; } Property Value Type Description bool true if [tracing is disabled]; otherwise, false. XRayTraceId Gets the X-Ray trace identifier. Declaration string XRayTraceId { get; } Property Value Type Description string The X-Ray trace identifier. Methods GetEnvironmentVariable(string) Gets the environment variable. Declaration string GetEnvironmentVariable(string variable) Parameters Type Name Description string variable The variable. Returns Type Description string System.String. GetEnvironmentVariableOrDefault(string, bool) Gets the environment variable or default. Declaration bool GetEnvironmentVariableOrDefault(string variable, bool defaultValue) Parameters Type Name Description string variable The variable. bool defaultValue if set to true [default value]. Returns Type Description bool true if XXXX, false otherwise. GetEnvironmentVariableOrDefault(string, string) Gets the environment variable or default. Declaration string GetEnvironmentVariableOrDefault(string variable, string defaultValue) Parameters Type Name Description string variable The variable. string defaultValue The default value. Returns Type Description string System.String. SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T"
  },
  "api/AWS.Lambda.Powertools.Common.IPowertoolsEnvironment.html": {
    "href": "api/AWS.Lambda.Powertools.Common.IPowertoolsEnvironment.html",
    "title": "Interface IPowertoolsEnvironment | AWS Lambda Powertools for .NET",
    "keywords": "Interface IPowertoolsEnvironment Interface for PowertoolsEnvironment Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public interface IPowertoolsEnvironment Methods GetAssemblyName<T>(T) Get the calling Type Assembly Name Declaration string GetAssemblyName<T>(T type) Parameters Type Name Description T type Returns Type Description string Assembly Name Type Parameters Name Description T GetAssemblyVersion<T>(T) Get the calling Type Assembly Version Declaration string GetAssemblyVersion<T>(T type) Parameters Type Name Description T type Returns Type Description string Assembly Version in the Major.Minor.Build format Type Parameters Name Description T GetEnvironmentVariable(string) Get environment variable by variable name Declaration string GetEnvironmentVariable(string variableName) Parameters Type Name Description string variableName Returns Type Description string Environment variable SetEnvironmentVariable(string, string) Set environment variable Declaration void SetEnvironmentVariable(string variableName, string value) Parameters Type Name Description string variableName string value Setting this to null will remove environment variable with that name"
  },
  "api/AWS.Lambda.Powertools.Common.ISystemWrapper.html": {
    "href": "api/AWS.Lambda.Powertools.Common.ISystemWrapper.html",
    "title": "Interface ISystemWrapper | AWS Lambda Powertools for .NET",
    "keywords": "Interface ISystemWrapper Interface ISystemWrapper Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public interface ISystemWrapper Methods GetEnvironmentVariable(string) Gets the environment variable. Declaration string GetEnvironmentVariable(string variable) Parameters Type Name Description string variable The variable. Returns Type Description string System.String. GetRandom() Gets random number Declaration double GetRandom() Returns Type Description double System.Double. Log(string) Logs the specified value. Declaration void Log(string value) Parameters Type Name Description string value The value. LogLine(string) Logs the line. Declaration void LogLine(string value) Parameters Type Name Description string value The value. SetEnvironmentVariable(string, string) Sets the environment variable. Declaration void SetEnvironmentVariable(string variable, string value) Parameters Type Name Description string variable The variable. string value SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T"
  },
  "api/AWS.Lambda.Powertools.Common.MethodAspectAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Common.MethodAspectAttribute.html",
    "title": "Class MethodAspectAttribute | AWS Lambda Powertools for .NET",
    "keywords": "Class MethodAspectAttribute Class MethodAspectAttribute. Implements the UniversalWrapperAttribute Inheritance object Attribute UniversalWrapperAttribute MethodAspectAttribute LoggingAttribute MetricsAttribute TracingAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] [Injection(typeof(UniversalWrapperAspect), Inherited = true)] public abstract class MethodAspectAttribute : UniversalWrapperAttribute Methods CreateHandler() Creates the handler. Declaration protected abstract IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. See Also UniversalWrapperAttribute WrapAsync<T>(Func<object[], Task<T>>, object[], AspectEventArgs) Wrap as an asynchronous operation. Declaration protected override sealed Task<T> WrapAsync<T>(Func<object[], Task<T>> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func<object[], Task<T>> target The target. object[] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description Task<T> A Task<T> representing the asynchronous operation. Type Parameters Name Description T Overrides UniversalWrapperAttribute.WrapAsync<T>(Func<object[], Task<T>>, object[], AspectEventArgs) See Also UniversalWrapperAttribute WrapSync<T>(Func<object[], T>, object[], AspectEventArgs) Wraps as a synchronous operation. Declaration protected override sealed T WrapSync<T>(Func<object[], T> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func<object[], T> target The target. object[] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description T T. Type Parameters Name Description T Overrides UniversalWrapperAttribute.WrapSync<T>(Func<object[], T>, object[], AspectEventArgs) See Also UniversalWrapperAttribute See Also UniversalWrapperAttribute"
  },
  "api/AWS.Lambda.Powertools.Common.PascalCaseNamingPolicy.html": {
    "href": "api/AWS.Lambda.Powertools.Common.PascalCaseNamingPolicy.html",
    "title": "Class PascalCaseNamingPolicy | AWS Lambda Powertools for .NET",
    "keywords": "Class PascalCaseNamingPolicy Class PascalCaseNamingPolicy Implements the JsonNamingPolicy Inheritance object JsonNamingPolicy PascalCaseNamingPolicy Inherited Members JsonNamingPolicy.CamelCase object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public class PascalCaseNamingPolicy : JsonNamingPolicy Properties Instance Instance of PascalCaseNamingPolicy Declaration public static PascalCaseNamingPolicy Instance { get; } Property Value Type Description PascalCaseNamingPolicy Methods ConvertName(string) Converts key to pascal case Declaration public override string ConvertName(string name) Parameters Type Name Description string name Name of key Returns Type Description string Overrides JsonNamingPolicy.ConvertName(string)"
  },
  "api/AWS.Lambda.Powertools.Common.PowertoolsConfigurations.html": {
    "href": "api/AWS.Lambda.Powertools.Common.PowertoolsConfigurations.html",
    "title": "Class PowertoolsConfigurations | AWS Lambda Powertools for .NET",
    "keywords": "Class PowertoolsConfigurations Class PowertoolsConfigurations. Implements the IPowertoolsConfigurations Inheritance object PowertoolsConfigurations Implements IPowertoolsConfigurations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public class PowertoolsConfigurations : IPowertoolsConfigurations Fields MaxDimensions The maximum dimensions Declaration public const int MaxDimensions = 9 Field Value Type Description int See Also IPowertoolsConfigurations MaxMetrics The maximum metrics Declaration public const int MaxMetrics = 100 Field Value Type Description int See Also IPowertoolsConfigurations Properties Instance Gets the instance. Declaration public static IPowertoolsConfigurations Instance { get; } Property Value Type Description IPowertoolsConfigurations The instance. See Also IPowertoolsConfigurations IsLambdaEnvironment Gets a value indicating whether this instance is Lambda. Declaration public bool IsLambdaEnvironment { get; } Property Value Type Description bool true if this instance is Lambda; otherwise, false. See Also IPowertoolsConfigurations IsSamLocal Gets a value indicating whether this instance is sam local. Declaration public bool IsSamLocal { get; } Property Value Type Description bool true if this instance is sam local; otherwise, false. See Also IPowertoolsConfigurations IsServiceDefined Gets a value indicating whether this instance is service defined. Declaration public bool IsServiceDefined { get; } Property Value Type Description bool true if this instance is service defined; otherwise, false. See Also IPowertoolsConfigurations LogLevel Gets the log level. Declaration public string LogLevel { get; } Property Value Type Description string The log level. See Also IPowertoolsConfigurations LoggerLogEvent Gets a value indicating whether [logger log event]. Declaration public bool LoggerLogEvent { get; } Property Value Type Description bool true if [logger log event]; otherwise, false. See Also IPowertoolsConfigurations LoggerOutputCase Gets the logger output casing. Declaration public string LoggerOutputCase { get; } Property Value Type Description string The logger output casing. Defaults to snake case. See Also IPowertoolsConfigurations LoggerSampleRate Gets the logger sample rate. Declaration public double? LoggerSampleRate { get; } Property Value Type Description double? The logger sample rate. See Also IPowertoolsConfigurations MetricsNamespace Gets the metrics namespace. Declaration public string MetricsNamespace { get; } Property Value Type Description string The metrics namespace. See Also IPowertoolsConfigurations Service Gets the service. Declaration public string Service { get; } Property Value Type Description string The service. See Also IPowertoolsConfigurations TracerCaptureError Gets a value indicating whether [tracer capture error]. Declaration public bool TracerCaptureError { get; } Property Value Type Description bool true if [tracer capture error]; otherwise, false. See Also IPowertoolsConfigurations TracerCaptureResponse Gets a value indicating whether [tracer capture response]. Declaration public bool TracerCaptureResponse { get; } Property Value Type Description bool true if [tracer capture response]; otherwise, false. See Also IPowertoolsConfigurations TracingDisabled Gets a value indicating whether [tracing is disabled]. Declaration public bool TracingDisabled { get; } Property Value Type Description bool true if [tracing is disabled]; otherwise, false. See Also IPowertoolsConfigurations XRayTraceId Gets the X-Ray trace identifier. Declaration public string XRayTraceId { get; } Property Value Type Description string The X-Ray trace identifier. See Also IPowertoolsConfigurations Methods GetEnvironmentVariable(string) Gets the environment variable. Declaration public string GetEnvironmentVariable(string variable) Parameters Type Name Description string variable The variable. Returns Type Description string System.String. See Also IPowertoolsConfigurations GetEnvironmentVariableOrDefault(string, bool) Gets the environment variable or default. Declaration public bool GetEnvironmentVariableOrDefault(string variable, bool defaultValue) Parameters Type Name Description string variable The variable. bool defaultValue if set to true [default value]. Returns Type Description bool true if XXXX, false otherwise. See Also IPowertoolsConfigurations GetEnvironmentVariableOrDefault(string, string) Gets the environment variable or default. Declaration public string GetEnvironmentVariableOrDefault(string variable, string defaultValue) Parameters Type Name Description string variable The variable. string defaultValue The default value. Returns Type Description string System.String. See Also IPowertoolsConfigurations SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration public void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T See Also IPowertoolsConfigurations Implements IPowertoolsConfigurations See Also IPowertoolsConfigurations"
  },
  "api/AWS.Lambda.Powertools.Common.PowertoolsEnvironment.html": {
    "href": "api/AWS.Lambda.Powertools.Common.PowertoolsEnvironment.html",
    "title": "Class PowertoolsEnvironment | AWS Lambda Powertools for .NET",
    "keywords": "Class PowertoolsEnvironment Inheritance object PowertoolsEnvironment Implements IPowertoolsEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public class PowertoolsEnvironment : IPowertoolsEnvironment Properties Instance Gets the instance. Declaration public static IPowertoolsEnvironment Instance { get; } Property Value Type Description IPowertoolsEnvironment The instance. Methods GetAssemblyName<T>(T) Get the calling Type Assembly Name Declaration public string GetAssemblyName<T>(T type) Parameters Type Name Description T type Returns Type Description string Assembly Name Type Parameters Name Description T GetAssemblyVersion<T>(T) Get the calling Type Assembly Version Declaration public string GetAssemblyVersion<T>(T type) Parameters Type Name Description T type Returns Type Description string Assembly Version in the Major.Minor.Build format Type Parameters Name Description T GetEnvironmentVariable(string) Get environment variable by variable name Declaration public string GetEnvironmentVariable(string variableName) Parameters Type Name Description string variableName Returns Type Description string Environment variable SetEnvironmentVariable(string, string) Set environment variable Declaration public void SetEnvironmentVariable(string variableName, string value) Parameters Type Name Description string variableName string value Setting this to null will remove environment variable with that name Implements IPowertoolsEnvironment"
  },
  "api/AWS.Lambda.Powertools.Common.SnakeCaseNamingPolicy.html": {
    "href": "api/AWS.Lambda.Powertools.Common.SnakeCaseNamingPolicy.html",
    "title": "Class SnakeCaseNamingPolicy | AWS Lambda Powertools for .NET",
    "keywords": "Class SnakeCaseNamingPolicy Class SnakeCaseNamingPolicy Implements the JsonNamingPolicy Inheritance object JsonNamingPolicy SnakeCaseNamingPolicy Inherited Members JsonNamingPolicy.CamelCase object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public class SnakeCaseNamingPolicy : JsonNamingPolicy Properties Instance Instance of SnakeCaseNamingPolicy Declaration public static SnakeCaseNamingPolicy Instance { get; } Property Value Type Description SnakeCaseNamingPolicy Methods ConvertName(string) Converts key name to snake case Declaration public override string ConvertName(string name) Parameters Type Name Description string name Name of key Returns Type Description string Overrides JsonNamingPolicy.ConvertName(string)"
  },
  "api/AWS.Lambda.Powertools.Common.StringUtils.html": {
    "href": "api/AWS.Lambda.Powertools.Common.StringUtils.html",
    "title": "Class StringUtils | AWS Lambda Powertools for .NET",
    "keywords": "Class StringUtils Class StringUtils Inheritance object StringUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public static class StringUtils Methods ToPascalCase(string) Extension method to convert string to pascal case Declaration public static string ToPascalCase(this string str) Parameters Type Name Description string str string Returns Type Description string Pascal case formatted string ToSnakeCase(string) Extension method to convert string to snake case Declaration public static string ToSnakeCase(this string str) Parameters Type Name Description string str string Returns Type Description string Snake case formatted string"
  },
  "api/AWS.Lambda.Powertools.Common.SystemWrapper.html": {
    "href": "api/AWS.Lambda.Powertools.Common.SystemWrapper.html",
    "title": "Class SystemWrapper | AWS Lambda Powertools for .NET",
    "keywords": "Class SystemWrapper Class SystemWrapper. Implements the ISystemWrapper Inheritance object SystemWrapper Implements ISystemWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public class SystemWrapper : ISystemWrapper Constructors SystemWrapper(IPowertoolsEnvironment) Prevents a default instance of the SystemWrapper class from being created. Declaration public SystemWrapper(IPowertoolsEnvironment powertoolsEnvironment) Parameters Type Name Description IPowertoolsEnvironment powertoolsEnvironment See Also ISystemWrapper Properties Instance Gets the instance. Declaration public static ISystemWrapper Instance { get; } Property Value Type Description ISystemWrapper The instance. See Also ISystemWrapper Methods GetEnvironmentVariable(string) Gets the environment variable. Declaration public string GetEnvironmentVariable(string variable) Parameters Type Name Description string variable The variable. Returns Type Description string System.String. See Also ISystemWrapper GetRandom() Gets random number Declaration public double GetRandom() Returns Type Description double System.Double. See Also ISystemWrapper Log(string) Logs the specified value. Declaration public void Log(string value) Parameters Type Name Description string value The value. See Also ISystemWrapper LogLine(string) Logs the line. Declaration public void LogLine(string value) Parameters Type Name Description string value The value. See Also ISystemWrapper SetEnvironmentVariable(string, string) Sets the environment variable. Declaration public void SetEnvironmentVariable(string variable, string value) Parameters Type Name Description string variable The variable. string value See Also ISystemWrapper SetExecutionEnvironment<T>(T) Sets the execution Environment Variable (AWS_EXECUTION_ENV) Declaration public void SetExecutionEnvironment<T>(T type) Parameters Type Name Description T type Type Parameters Name Description T See Also ISystemWrapper Implements ISystemWrapper See Also ISystemWrapper"
  },
  "api/AWS.Lambda.Powertools.Common.UniversalWrapperAspect.html": {
    "href": "api/AWS.Lambda.Powertools.Common.UniversalWrapperAspect.html",
    "title": "Class UniversalWrapperAspect | AWS Lambda Powertools for .NET",
    "keywords": "Class UniversalWrapperAspect Class UniversalWrapperAspect. Inheritance object UniversalWrapperAspect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax [Aspect(Scope.Global)] public class UniversalWrapperAspect Methods Handle(object, Type, MethodBase, Func<object[], object>, string, object[], Type, Attribute[]) Handles the specified instance. Declaration [Advice(Kind.Around, Targets = Target.Method)] public object Handle(object instance, Type type, MethodBase method, Func<object[], object> target, string name, object[] args, Type returnType, Attribute[] triggers) Parameters Type Name Description object instance The instance. Type type The type. MethodBase method The method. Func<object[], object> target The target. string name The name. object[] args The arguments. Type returnType Type of the return. Attribute[] triggers The triggers. Returns Type Description object System.Object."
  },
  "api/AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Common.UniversalWrapperAttribute.html",
    "title": "Class UniversalWrapperAttribute | AWS Lambda Powertools for .NET",
    "keywords": "Class UniversalWrapperAttribute Class UniversalWrapperAttribute. Implements the Attribute Inheritance object Attribute UniversalWrapperAttribute MethodAspectAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Common Assembly: AWS.Lambda.Powertools.Common.dll Syntax public abstract class UniversalWrapperAttribute : Attribute Methods WrapAsync<T>(Func<object[], Task<T>>, object[], AspectEventArgs) Wraps as an asynchronous operation. Declaration protected virtual Task<T> WrapAsync<T>(Func<object[], Task<T>> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func<object[], Task<T>> target The target. object[] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description Task<T> Task<T>. Type Parameters Name Description T See Also Attribute WrapSync<T>(Func<object[], T>, object[], AspectEventArgs) Wraps as a synchronous operation. Declaration protected virtual T WrapSync<T>(Func<object[], T> target, object[] args, AspectEventArgs eventArgs) Parameters Type Name Description Func<object[], T> target The target. object[] args The arguments. AspectEventArgs eventArgs The AspectEventArgs instance containing the event data. Returns Type Description T T. Type Parameters Name Description T See Also Attribute See Also Attribute"
  },
  "api/AWS.Lambda.Powertools.Logging.CorrelationIdPaths.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.CorrelationIdPaths.html",
    "title": "Class CorrelationIdPaths | AWS Lambda Powertools for .NET",
    "keywords": "Class CorrelationIdPaths Supported Event types from which Correlation ID can be extracted Inheritance object CorrelationIdPaths Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Logging Assembly: AWS.Lambda.Powertools.Logging.dll Syntax public static class CorrelationIdPaths Fields ApiGatewayHttp To use when function is expecting API Gateway HTTP API request event Declaration public const string ApiGatewayHttp = \"/RequestContext/RequestId\" Field Value Type Description string ApiGatewayRest To use when function is expecting API Gateway Rest API request event Declaration public const string ApiGatewayRest = \"/RequestContext/RequestId\" Field Value Type Description string ApplicationLoadBalancer To use when function is expecting Application Load balancer request event Declaration public const string ApplicationLoadBalancer = \"/Headers/x-amzn-trace-id\" Field Value Type Description string EventBridge To use when function is expecting EventBridge request event Declaration public const string EventBridge = \"/Id\" Field Value Type Description string"
  },
  "api/AWS.Lambda.Powertools.Logging.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.html",
    "title": "Namespace AWS.Lambda.Powertools.Logging | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Logging Classes CorrelationIdPaths Supported Event types from which Correlation ID can be extracted Logger Class Logger. LoggerConfiguration Class LoggerConfiguration. Implements the Microsoft.Extensions.Options.IOptions{LoggerConfiguration} LoggerExtensions Class LoggerExtensions. LoggingAttribute Provides a Lambda optimized logger with output structured as JSON. Key features --------------------- Capture key fields from Lambda context and cold start Log Lambda event when instructed (disabled by default) Log sampling enables DEBUG log level for a percentage of requests (disabled by default) Append additional keys to structured log at any point in time Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_LOG_LEVEL string, logging level (e.g. Information, Debug, and Trace) POWERTOOLS_LOGGER_CASE string, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) POWERTOOLS_LOGGER_SAMPLE_RATE double, sampling rate ranging from 0 to 1, 1 being 100% sampling Parameters ----------- Parameter name Description Service string, service name to be appended in logs, by default \"service_undefined\" LogLevel enum, logging level (e.g. Information, Debug, and Trace), by default Information LoggerOutputCase enum, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) SamplingRate double, sample rate for debug calls within execution context defaults to 0.0 CorrelationIdPath string, pointer path to extract correlation id from input parameter ClearState bool, clear all custom keys on each request, by default false Enums LoggerOutputCase Enum LoggerOutputCase"
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.Converters.ConstantClassConverter.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.Converters.ConstantClassConverter.html",
    "title": "Class ConstantClassConverter | AWS Lambda Powertools for .NET",
    "keywords": "Class ConstantClassConverter JsonConvert to handle the AWS SDK for .NET custom enum classes that derive from the class called ConstantClass. Inheritance object JsonConverter JsonConverter<object> ConstantClassConverter Inherited Members JsonConverter<object>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<object>.WriteAsPropertyName(Utf8JsonWriter, object, JsonSerializerOptions) JsonConverter<object>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Logging.Internal.Converters Assembly: AWS.Lambda.Powertools.Logging.dll Syntax public class ConstantClassConverter : JsonConverter<object> Methods CanConvert(Type) Check to see if the type is derived from ConstantClass. Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type which should be converted. Returns Type Description bool True if the type is derived from ConstantClass, False otherwise. Overrides JsonConverter<object>.CanConvert(Type) Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Converter throws NotSupportedException. Deserializing ConstantClass is not allowed. Declaration public override object Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Reference to the JsonReader Type typeToConvert The type which should be converted. JsonSerializerOptions options The Json serializer options. Returns Type Description object Overrides JsonConverter<object>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Exceptions Type Condition NotSupportedException Write(Utf8JsonWriter, object, JsonSerializerOptions) Write the ConstantClass instance as JSON. Declaration public override void Write(Utf8JsonWriter writer, object value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The unicode JsonWriter. object value The exception instance. JsonSerializerOptions options The JsonSerializer options. Overrides JsonConverter<object>.Write(Utf8JsonWriter, object, JsonSerializerOptions)"
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.Converters.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.Converters.html",
    "title": "Namespace AWS.Lambda.Powertools.Logging.Internal.Converters | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Logging.Internal.Converters Classes ConstantClassConverter JsonConvert to handle the AWS SDK for .NET custom enum classes that derive from the class called ConstantClass."
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.html",
    "title": "Namespace AWS.Lambda.Powertools.Logging.Internal | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Logging.Internal Classes LoggerProvider Class LoggerProvider. This class cannot be inherited. Implements the ILoggerProvider"
  },
  "api/AWS.Lambda.Powertools.Logging.Internal.LoggerProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Internal.LoggerProvider.html",
    "title": "Class LoggerProvider | AWS Lambda Powertools for .NET",
    "keywords": "Class LoggerProvider Class LoggerProvider. This class cannot be inherited. Implements the ILoggerProvider Inheritance object LoggerProvider Implements ILoggerProvider IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Logging.Internal Assembly: AWS.Lambda.Powertools.Logging.dll Syntax public sealed class LoggerProvider : ILoggerProvider, IDisposable Constructors LoggerProvider(IOptions<LoggerConfiguration>) Initializes a new instance of the LoggerProvider class. Declaration public LoggerProvider(IOptions<LoggerConfiguration> config) Parameters Type Name Description IOptions<LoggerConfiguration> config The configuration. See Also ILoggerProvider Methods CreateLogger(string) Creates a new ILogger instance. Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description string categoryName The category name for messages produced by the logger. Returns Type Description ILogger The instance of ILogger that was created. See Also ILoggerProvider Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() See Also ILoggerProvider Implements ILoggerProvider IDisposable See Also ILoggerProvider"
  },
  "api/AWS.Lambda.Powertools.Logging.Logger.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.Logger.html",
    "title": "Class Logger | AWS Lambda Powertools for .NET",
    "keywords": "Class Logger Class Logger. Inheritance object Logger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Logging Assembly: AWS.Lambda.Powertools.Logging.dll Syntax public class Logger Methods AppendKey(string, object) Appending additional key to the log context. Declaration public static void AppendKey(string key, object value) Parameters Type Name Description string key The key. object value The value. Exceptions Type Condition ArgumentNullException key ArgumentNullException value AppendKeys(IEnumerable<KeyValuePair<string, object>>) Appending additional key to the log context. Declaration public static void AppendKeys(IEnumerable<KeyValuePair<string, object>> keys) Parameters Type Name Description IEnumerable<KeyValuePair<string, object>> keys The list of keys. AppendKeys(IEnumerable<KeyValuePair<string, string>>) Appending additional key to the log context. Declaration public static void AppendKeys(IEnumerable<KeyValuePair<string, string>> keys) Parameters Type Name Description IEnumerable<KeyValuePair<string, string>> keys The list of keys. Create(string) Creates a new ILogger instance. Declaration public static ILogger Create(string categoryName) Parameters Type Name Description string categoryName The category name for messages produced by the logger. Returns Type Description ILogger The instance of ILogger that was created. Exceptions Type Condition ArgumentNullException categoryName Create<T>() Creates a new ILogger instance. Declaration public static ILogger Create<T>() Returns Type Description ILogger The instance of ILogger that was created. Type Parameters Name Description T GetAllKeys() Returns all additional keys added to the log context. Declaration public static IEnumerable<KeyValuePair<string, object>> GetAllKeys() Returns Type Description IEnumerable<KeyValuePair<string, object>> IEnumerable<KeyValuePair<System.String, System.Object>>. Log(LogLevel, EventId, Exception, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. Log(LogLevel, EventId, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, EventId eventId, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. Log(LogLevel, Exception) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, Exception exception) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. Examples logger.Log(LogLevel.Information, exception) Log(LogLevel, Exception, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, Exception exception, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. Log(LogLevel, object) Formats and writes a log message as JSON at the specified log level. Declaration public static void Log(LogLevel logLevel, object message) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. object message The object to be serialized as JSON. Examples logger.Log(LogLevel.Information, new {User = user, Address = address}) Log(LogLevel, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(LogLevel logLevel, string message, params object[] args) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. LogCritical(EventId, Exception, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(0, exception, \"Error while processing request from {Address}\", address) LogCritical(EventId, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(0, \"Processing request from {Address}\", address) LogCritical(Exception) Formats and writes an critical log message. Declaration public static void LogCritical(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogCritical(exception) LogCritical(Exception, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(exception, \"Error while processing request from {Address}\", address) LogCritical(object) Formats and writes a critical log message as JSON. Declaration public static void LogCritical(object message) Parameters Type Name Description object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogCritical(string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical(string message, params object[] args) Parameters Type Name Description string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogCritical(\"Processing request from {Address}\", address) LogCritical<T>(T, EventId, Exception, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(T, EventId, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, \"Processing request from {Address}\", address) LogCritical<T>(T, Exception, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(T, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, \"Processing request from {Address}\", address) LogDebug(EventId, Exception, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(0, exception, \"Error while processing request from {Address}\", address) LogDebug(EventId, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(0, \"Processing request from {Address}\", address) LogDebug(Exception) Formats and writes an debug log message. Declaration public static void LogDebug(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogDebug(exception) LogDebug(Exception, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(exception, \"Error while processing request from {Address}\", address) LogDebug(object) Formats and writes a debug log message as JSON. Declaration public static void LogDebug(object message) Parameters Type Name Description object message The object to be serialized as JSON. Examples logger.LogDebug(new {User = user, Address = address}) LogDebug(string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug(string message, params object[] args) Parameters Type Name Description string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogDebug(\"Processing request from {Address}\", address) LogDebug<T>(T, EventId, Exception, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(T, EventId, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, \"Processing request from {Address}\", address) LogDebug<T>(T, Exception, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(T, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, \"Processing request from {Address}\", address) LogError(EventId, Exception, string, params object[]) Formats and writes an error log message. Declaration public static void LogError(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogError(0, exception, \"Error while processing request from {Address}\", address) LogError(EventId, string, params object[]) Formats and writes an error log message. Declaration public static void LogError(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogError(0, \"Processing request from {Address}\", address) LogError(Exception) Formats and writes an error log message. Declaration public static void LogError(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogError(exception) LogError(Exception, string, params object[]) Formats and writes an error log message. Declaration public static void LogError(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogError(exception, \"Error while processing request from {Address}\", address) LogError(object) Formats and writes a error log message as JSON. Declaration public static void LogError(object message) Parameters Type Name Description object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogError(string, params object[]) Formats and writes an error log message. Declaration public static void LogError(string message, params object[] args) Parameters Type Name Description string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogError(\"Processing request from {Address}\", address) LogError<T>(T, EventId, Exception, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogError<T>(T, EventId, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, \"Processing request from {Address}\", address) LogError<T>(T, Exception, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, exception, \"Error while processing request from {Address}\", address) LogError<T>(T, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, \"Processing request from {Address}\", address) LogInformation(EventId, Exception, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(0, exception, \"Error while processing request from {Address}\", address) LogInformation(EventId, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(0, \"Processing request from {Address}\", address) LogInformation(Exception) Formats and writes an information log message. Declaration public static void LogInformation(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogInformation(exception) LogInformation(Exception, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(exception, \"Error while processing request from {Address}\", address) LogInformation(object) Formats and writes an information log message as JSON. Declaration public static void LogInformation(object message) Parameters Type Name Description object message The object to be serialized as JSON. Examples logger.LogInformation(new {User = user, Address = address}) LogInformation(string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation(string message, params object[] args) Parameters Type Name Description string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogInformation(\"Processing request from {Address}\", address) LogInformation<T>(T, EventId, Exception, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(T, EventId, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, \"Processing request from {Address}\", address) LogInformation<T>(T, Exception, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(T, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, \"Processing request from {Address}\", address) LogTrace(EventId, Exception, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(0, exception, \"Error while processing request from {Address}\", address) LogTrace(EventId, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(0, \"Processing request from {Address}\", address) LogTrace(Exception) Formats and writes an trace log message. Declaration public static void LogTrace(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogTrace(exception) LogTrace(Exception, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(exception, \"Error while processing request from {Address}\", address) LogTrace(object) Formats and writes a trace log message as JSON. Declaration public static void LogTrace(object message) Parameters Type Name Description object message The object to be serialized as JSON. Examples logger.LogTrace(new {User = user, Address = address}) LogTrace(string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace(string message, params object[] args) Parameters Type Name Description string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogTrace(\"Processing request from {Address}\", address) LogTrace<T>(T, EventId, Exception, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(T, EventId, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, \"Processing request from {Address}\", address) LogTrace<T>(T, Exception, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(T, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, \"Processing request from {Address}\", address) LogWarning(EventId, Exception, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning(EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(0, exception, \"Error while processing request from {Address}\", address) LogWarning(EventId, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning(EventId eventId, string message, params object[] args) Parameters Type Name Description EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(0, \"Processing request from {Address}\", address) LogWarning(Exception) Formats and writes an warning log message. Declaration public static void LogWarning(Exception exception) Parameters Type Name Description Exception exception The exception to log. Examples logger.LogWarning(exception) LogWarning(Exception, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning(Exception exception, string message, params object[] args) Parameters Type Name Description Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(exception, \"Error while processing request from {Address}\", address) LogWarning(object) Formats and writes a warning log message as JSON. Declaration public static void LogWarning(object message) Parameters Type Name Description object message The object to be serialized as JSON. Examples logger.LogWarning(new {User = user, Address = address}) LogWarning(string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning(string message, params object[] args) Parameters Type Name Description string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples Logger.LogWarning(\"Processing request from {Address}\", address) LogWarning<T>(T, EventId, Exception, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(T, EventId, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, \"Processing request from {Address}\", address) LogWarning<T>(T, Exception, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(T, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, \"Processing request from {Address}\", address) Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Writes a log entry. Declaration public static void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Log<T>(LogLevel, T, EventId, Exception, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, exception, \"Error while processing request from {Address}\", address) Log<T>(LogLevel, T, EventId, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, \"Processing request from {Address}\", address) Log<T>(LogLevel, T, Exception, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, exception, \"Error while processing request from {Address}\", address) Log<T>(LogLevel, T, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(LogLevel logLevel, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, \"Processing request from {Address}\", address) RemoveKeys(params string[]) Remove additional keys from the log context. Declaration public static void RemoveKeys(params string[] keys) Parameters Type Name Description string[] keys The list of keys."
  },
  "api/AWS.Lambda.Powertools.Logging.LoggerConfiguration.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggerConfiguration.html",
    "title": "Class LoggerConfiguration | AWS Lambda Powertools for .NET",
    "keywords": "Class LoggerConfiguration Class LoggerConfiguration. Implements the Microsoft.Extensions.Options.IOptions{LoggerConfiguration} Inheritance object LoggerConfiguration Implements IOptions<LoggerConfiguration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Logging Assembly: AWS.Lambda.Powertools.Logging.dll Syntax public class LoggerConfiguration : IOptions<LoggerConfiguration> Properties LoggerOutputCase The logger output case. This can be also set using the environment variable POWERTOOLS_LOGGER_CASE. Declaration public LoggerOutputCase? LoggerOutputCase { get; set; } Property Value Type Description LoggerOutputCase? The logger output case. See Also Microsoft.Extensions.Options.IOptions{LoggerConfiguration} MinimumLevel Specify the minimum log level for logging (Information, by default). This can be also set using the environment variable POWERTOOLS_LOG_LEVEL. Declaration public LogLevel? MinimumLevel { get; set; } Property Value Type Description LogLevel? The minimum level. See Also Microsoft.Extensions.Options.IOptions{LoggerConfiguration} SamplingRate Dynamically set a percentage of logs to DEBUG level. This can be also set using the environment variable POWERTOOLS_LOGGER_SAMPLE_RATE. Declaration public double? SamplingRate { get; set; } Property Value Type Description double? The sampling rate. See Also Microsoft.Extensions.Options.IOptions{LoggerConfiguration} Service Service name is used for logging. This can be also set using the environment variable POWERTOOLS_SERVICE_NAME. Declaration public string Service { get; set; } Property Value Type Description string The service. See Also Microsoft.Extensions.Options.IOptions{LoggerConfiguration} Implements IOptions<TOptions> See Also Microsoft.Extensions.Options.IOptions{LoggerConfiguration}"
  },
  "api/AWS.Lambda.Powertools.Logging.LoggerExtensions.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggerExtensions.html",
    "title": "Class LoggerExtensions | AWS Lambda Powertools for .NET",
    "keywords": "Class LoggerExtensions Class LoggerExtensions. Inheritance object LoggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Logging Assembly: AWS.Lambda.Powertools.Logging.dll Syntax public static class LoggerExtensions Methods Log(ILogger, LogLevel, Exception) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, Exception exception) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. Examples logger.Log(LogLevel.Information, exception) Log(ILogger, LogLevel, object) Formats and writes a log message as JSON at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, object message) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. object message The object to be serialized as JSON. Examples logger.Log(LogLevel.Information, new {User = user, Address = address}) LogCritical(ILogger, Exception) Formats and writes an critical log message. Declaration public static void LogCritical(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. Examples logger.LogCritical(exception) LogCritical(ILogger, object) Formats and writes a critical log message as JSON. Declaration public static void LogCritical(this ILogger logger, object message) Parameters Type Name Description ILogger logger The ILogger to write to. object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogCritical<T>(ILogger, T, EventId, Exception, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(ILogger, T, EventId, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, 0, \"Processing request from {Address}\", address) LogCritical<T>(ILogger, T, Exception, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, exception, \"Error while processing request from {Address}\", address) LogCritical<T>(ILogger, T, string, params object[]) Formats and writes a critical log message. Declaration public static void LogCritical<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogCritical(extraKeys, \"Processing request from {Address}\", address) LogDebug(ILogger, Exception) Formats and writes an debug log message. Declaration public static void LogDebug(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. Examples logger.LogDebug(exception) LogDebug(ILogger, object) Formats and writes a debug log message as JSON. Declaration public static void LogDebug(this ILogger logger, object message) Parameters Type Name Description ILogger logger The ILogger to write to. object message The object to be serialized as JSON. Examples logger.LogDebug(new {User = user, Address = address}) LogDebug<T>(ILogger, T, EventId, Exception, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(ILogger, T, EventId, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, 0, \"Processing request from {Address}\", address) LogDebug<T>(ILogger, T, Exception, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, exception, \"Error while processing request from {Address}\", address) LogDebug<T>(ILogger, T, string, params object[]) Formats and writes a debug log message. Declaration public static void LogDebug<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogDebug(extraKeys, \"Processing request from {Address}\", address) LogError(ILogger, Exception) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. Examples logger.LogError(exception) LogError(ILogger, object) Formats and writes a error log message as JSON. Declaration public static void LogError(this ILogger logger, object message) Parameters Type Name Description ILogger logger The ILogger to write to. object message The object to be serialized as JSON. Examples logger.LogCritical(new {User = user, Address = address}) LogError<T>(ILogger, T, EventId, Exception, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogError<T>(ILogger, T, EventId, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, 0, \"Processing request from {Address}\", address) LogError<T>(ILogger, T, Exception, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, exception, \"Error while processing request from {Address}\", address) LogError<T>(ILogger, T, string, params object[]) Formats and writes an error log message. Declaration public static void LogError<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogError(extraKeys, \"Processing request from {Address}\", address) LogInformation(ILogger, Exception) Formats and writes an information log message. Declaration public static void LogInformation(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. Examples logger.LogInformation(exception) LogInformation(ILogger, object) Formats and writes an information log message as JSON. Declaration public static void LogInformation(this ILogger logger, object message) Parameters Type Name Description ILogger logger The ILogger to write to. object message The object to be serialized as JSON. Examples logger.LogInformation(new {User = user, Address = address}) LogInformation<T>(ILogger, T, EventId, Exception, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(ILogger, T, EventId, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, 0, \"Processing request from {Address}\", address) LogInformation<T>(ILogger, T, Exception, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, exception, \"Error while processing request from {Address}\", address) LogInformation<T>(ILogger, T, string, params object[]) Formats and writes an informational log message. Declaration public static void LogInformation<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogInformation(extraKeys, \"Processing request from {Address}\", address) LogTrace(ILogger, Exception) Formats and writes an trace log message. Declaration public static void LogTrace(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. Examples logger.LogTrace(exception) LogTrace(ILogger, object) Formats and writes a trace log message as JSON. Declaration public static void LogTrace(this ILogger logger, object message) Parameters Type Name Description ILogger logger The ILogger to write to. object message The object to be serialized as JSON. Examples logger.LogTrace(new {User = user, Address = address}) LogTrace<T>(ILogger, T, EventId, Exception, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(ILogger, T, EventId, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, 0, \"Processing request from {Address}\", address) LogTrace<T>(ILogger, T, Exception, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, exception, \"Error while processing request from {Address}\", address) LogTrace<T>(ILogger, T, string, params object[]) Formats and writes a trace log message. Declaration public static void LogTrace<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogTrace(extraKeys, \"Processing request from {Address}\", address) LogWarning(ILogger, Exception) Formats and writes an warning log message. Declaration public static void LogWarning(this ILogger logger, Exception exception) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. Examples logger.LogWarning(exception) LogWarning(ILogger, object) Formats and writes a warning log message as JSON. Declaration public static void LogWarning(this ILogger logger, object message) Parameters Type Name Description ILogger logger The ILogger to write to. object message The object to be serialized as JSON. Examples logger.LogWarning(new {User = user, Address = address}) LogWarning<T>(ILogger, T, EventId, Exception, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(ILogger, T, EventId, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, 0, \"Processing request from {Address}\", address) LogWarning<T>(ILogger, T, Exception, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, exception, \"Error while processing request from {Address}\", address) LogWarning<T>(ILogger, T, string, params object[]) Formats and writes a warning log message. Declaration public static void LogWarning<T>(this ILogger logger, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.LogWarning(extraKeys, \"Processing request from {Address}\", address) Log<T>(ILogger, LogLevel, T, EventId, Exception, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, EventId eventId, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, exception, \"Error while processing request from {Address}\", address) Log<T>(ILogger, LogLevel, T, EventId, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, EventId eventId, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, 0, \"Processing request from {Address}\", address) Log<T>(ILogger, LogLevel, T, Exception, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, Exception exception, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, exception, \"Error while processing request from {Address}\", address) Log<T>(ILogger, LogLevel, T, string, params object[]) Formats and writes a log message at the specified log level. Declaration public static void Log<T>(this ILogger logger, LogLevel logLevel, T extraKeys, string message, params object[] args) where T : class Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. T extraKeys Additional keys will be appended to the log entry. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Type Parameters Name Description T Examples logger.Log(LogLevel.Information, extraKeys, \"Processing request from {Address}\", address)"
  },
  "api/AWS.Lambda.Powertools.Logging.LoggerOutputCase.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggerOutputCase.html",
    "title": "Enum LoggerOutputCase | AWS Lambda Powertools for .NET",
    "keywords": "Enum LoggerOutputCase Enum LoggerOutputCase Namespace: AWS.Lambda.Powertools.Logging Assembly: AWS.Lambda.Powertools.Logging.dll Syntax public enum LoggerOutputCase Fields Name Description CamelCase Camel Case PascalCase Pascal Case SnakeCase Snake Case"
  },
  "api/AWS.Lambda.Powertools.Logging.LoggingAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Logging.LoggingAttribute.html",
    "title": "Class LoggingAttribute | AWS Lambda Powertools for .NET",
    "keywords": "Class LoggingAttribute Provides a Lambda optimized logger with output structured as JSON. Key features --------------------- Capture key fields from Lambda context and cold start Log Lambda event when instructed (disabled by default) Log sampling enables DEBUG log level for a percentage of requests (disabled by default) Append additional keys to structured log at any point in time Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_LOG_LEVEL string, logging level (e.g. Information, Debug, and Trace) POWERTOOLS_LOGGER_CASE string, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) POWERTOOLS_LOGGER_SAMPLE_RATE double, sampling rate ranging from 0 to 1, 1 being 100% sampling Parameters ----------- Parameter name Description Service string, service name to be appended in logs, by default \"service_undefined\" LogLevel enum, logging level (e.g. Information, Debug, and Trace), by default Information LoggerOutputCase enum, logger output case (e.g. CamelCase, PascalCase, and SnakeCase) SamplingRate double, sample rate for debug calls within execution context defaults to 0.0 CorrelationIdPath string, pointer path to extract correlation id from input parameter ClearState bool, clear all custom keys on each request, by default false Inheritance object Attribute UniversalWrapperAttribute MethodAspectAttribute LoggingAttribute Inherited Members MethodAspectAttribute.WrapSync<T>(Func<object[], T>, object[], AspectEventArgs) MethodAspectAttribute.WrapAsync<T>(Func<object[], Task<T>>, object[], AspectEventArgs) Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Logging Assembly: AWS.Lambda.Powertools.Logging.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class LoggingAttribute : MethodAspectAttribute Examples [Logging( Service = \"Example\", LogEvent = true, ClearState = true, LogLevel = LogLevel.Debug, LoggerOutputCase = LoggerOutputCase.SnakeCase, CorrelationIdPath = \"/headers/my_request_id_header\") ] public async Task<APIGatewayProxyResponse> FunctionHandler (APIGatewayProxyRequest apigProxyEvent, ILambdaContext context) { ... } Properties ClearState Logger is commonly initialized in the global scope. Due to Lambda Execution Context reuse, this means that custom keys can be persisted across invocations. Set this attribute to true if you want all custom keys to be deleted on each request. Declaration public bool ClearState { get; set; } Property Value Type Description bool true if [clear state]; otherwise, false. CorrelationIdPath Pointer path to extract correlation id from input parameter. The first handler parameter is the input to the handler, which can be event data (published by an event source) or custom input that you provide such as a string or any custom data object. Declaration public string CorrelationIdPath { get; set; } Property Value Type Description string The correlation identifier path. LogEvent Explicitly log any incoming event, The first handler parameter is the input to the handler, which can be event data (published by an event source) or custom input that you provide such as a string or any custom data object. Declaration public bool LogEvent { get; set; } Property Value Type Description bool true if [log event]; otherwise, false. LogLevel Specify the minimum log level for logging (Information, by default). This can be also set using the environment variable POWERTOOLS_LOG_LEVEL. Declaration public LogLevel LogLevel { get; set; } Property Value Type Description LogLevel The log level. LoggerOutputCase Specify output case for logging (SnakeCase, by default). This can be also set using the environment variable POWERTOOLS_LOGGER_CASE. Declaration public LoggerOutputCase LoggerOutputCase { get; set; } Property Value Type Description LoggerOutputCase The log level. SamplingRate Dynamically set a percentage of logs to DEBUG level. This can be also set using the environment variable POWERTOOLS_LOGGER_SAMPLE_RATE. Declaration public double SamplingRate { get; set; } Property Value Type Description double The sampling rate. Service Service name is used for logging. This can be also set using the environment variable POWERTOOLS_SERVICE_NAME. Declaration public string Service { get; set; } Property Value Type Description string The service. Methods CreateHandler() Creates the handler. Declaration protected override IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. Overrides MethodAspectAttribute.CreateHandler()"
  },
  "api/AWS.Lambda.Powertools.Metrics.DimensionSet.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.DimensionSet.html",
    "title": "Class DimensionSet | AWS Lambda Powertools for .NET",
    "keywords": "Class DimensionSet List of key-value pairs with Metric Dimensions Inheritance object DimensionSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class DimensionSet Constructors DimensionSet(string, string) Initializes a new instance of the DimensionSet class. Declaration public DimensionSet(string key, string value) Parameters Type Name Description string key The key. string value The value. Properties DimensionKeys Gets the dimension keys. Declaration public List<string> DimensionKeys { get; } Property Value Type Description List<string> The dimension keys."
  },
  "api/AWS.Lambda.Powertools.Metrics.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.html",
    "title": "Namespace AWS.Lambda.Powertools.Metrics | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Metrics Classes DimensionSet List of key-value pairs with Metric Dimensions JsonNamingPolicyDecorator Class JsonNamingPolicyDecorator Implements the JsonNamingPolicy Metadata Class Metadata. MetricDefinition Class MetricDefinition. MetricDirective Class MetricDirective. Metrics Class Metrics. Implements the IMetrics MetricsAttribute Creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF). Key features --------------------- Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob) Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc) Metrics are created asynchronously by CloudWatch service, no custom stacks needed Context manager to create a one off metric with a different dimension Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_METRICS_NAMESPACE string, metric namespace Parameters ----------- Parameter name Description Service string, service name is used for metric dimension across all metrics, by default service_undefined Namespace string, logical container where all metrics will be placed CaptureColdStart bool, captures cold start during Lambda execution, by default false RaiseOnEmptyMetrics bool, instructs metrics validation to throw exception if no metrics are provided, by default false MetricsContext Class MetricsContext. Implements the IDisposable RootNode Class RootNode. SchemaValidationException Class SchemaValidationException. Implements the Exception StringEnumConverter Class StringEnumConverter. Implements the JsonConverterFactory UnixMillisecondDateTimeConverter Class UnixMillisecondDateTimeConverter. Implements the JsonConverter Interfaces IMetrics Interface IMetrics Implements the IDisposable Enums MetricResolution Enum MetricResolution MetricUnit Enum MetricUnit"
  },
  "api/AWS.Lambda.Powertools.Metrics.IMetrics.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.IMetrics.html",
    "title": "Interface IMetrics | AWS Lambda Powertools for .NET",
    "keywords": "Interface IMetrics Interface IMetrics Implements the IDisposable Inherited Members IDisposable.Dispose() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public interface IMetrics : IDisposable Methods AddDimension(string, string) Adds a dimension Declaration void AddDimension(string key, string value) Parameters Type Name Description string key Dimension key string value Dimension value See Also IDisposable AddMetadata(string, object) Adds metadata Declaration void AddMetadata(string key, object value) Parameters Type Name Description string key Metadata key object value Metadata value See Also IDisposable AddMetric(string, double, MetricUnit, MetricResolution) Adds metric Declaration void AddMetric(string key, double value, MetricUnit unit, MetricResolution metricResolution) Parameters Type Name Description string key Metric key double value Metric value MetricUnit unit Metric unit MetricResolution metricResolution See Also IDisposable Flush(bool) Flushes metrics to CloudWatch Declaration void Flush(bool metricsOverflow = false) Parameters Type Name Description bool metricsOverflow if set to true [metrics overflow]. See Also IDisposable GetNamespace() Gets the namespace Declaration string GetNamespace() Returns Type Description string System.String. See Also IDisposable GetService() Gets the service Declaration string GetService() Returns Type Description string System.String. See Also IDisposable PushSingleMetric(string, double, MetricUnit, string, string, Dictionary<string, string>, MetricResolution) Pushes a single metric with custom namespace, service and dimensions. Declaration void PushSingleMetric(string metricName, double value, MetricUnit unit, string nameSpace = null, string service = null, Dictionary<string, string> defaultDimensions = null, MetricResolution metricResolution = MetricResolution.Default) Parameters Type Name Description string metricName Name of the metric double value Metric value MetricUnit unit Metric unit string nameSpace Metric namespace string service Metric service Dictionary<string, string> defaultDimensions Metric default dimensions MetricResolution metricResolution Metrics resolution See Also IDisposable Serialize() Serializes metrics instance Declaration string Serialize() Returns Type Description string System.String. See Also IDisposable SetDefaultDimensions(Dictionary<string, string>) Sets the default dimensions Declaration void SetDefaultDimensions(Dictionary<string, string> defaultDimension) Parameters Type Name Description Dictionary<string, string> defaultDimension Default dimensions See Also IDisposable SetNamespace(string) Sets the namespace Declaration void SetNamespace(string nameSpace) Parameters Type Name Description string nameSpace Metrics namespace See Also IDisposable See Also IDisposable"
  },
  "api/AWS.Lambda.Powertools.Metrics.JsonNamingPolicyDecorator.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.JsonNamingPolicyDecorator.html",
    "title": "Class JsonNamingPolicyDecorator | AWS Lambda Powertools for .NET",
    "keywords": "Class JsonNamingPolicyDecorator Class JsonNamingPolicyDecorator Implements the JsonNamingPolicy Inheritance object JsonNamingPolicy JsonNamingPolicyDecorator Inherited Members JsonNamingPolicy.CamelCase object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class JsonNamingPolicyDecorator : JsonNamingPolicy Constructors JsonNamingPolicyDecorator(JsonNamingPolicy) JsonNamingPolicy decorator Declaration protected JsonNamingPolicyDecorator(JsonNamingPolicy underlyingNamingPolicy) Parameters Type Name Description JsonNamingPolicy underlyingNamingPolicy Name of the underlying JsonNamingPolicy Methods ConvertName(string) When overridden in a derived class, converts the specified name according to the policy. Declaration public override string ConvertName(string name) Parameters Type Name Description string name The name to convert. Returns Type Description string The converted name. Overrides JsonNamingPolicy.ConvertName(string)"
  },
  "api/AWS.Lambda.Powertools.Metrics.Metadata.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.Metadata.html",
    "title": "Class Metadata | AWS Lambda Powertools for .NET",
    "keywords": "Class Metadata Class Metadata. Inheritance object Metadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class Metadata Constructors Metadata() Create Metadata object Declaration public Metadata() Properties CloudWatchMetrics Gets the cloud watch metrics. Declaration [JsonPropertyName(\"CloudWatchMetrics\")] public List<MetricDirective> CloudWatchMetrics { get; } Property Value Type Description List<MetricDirective> The cloud watch metrics. CustomMetadata Gets the custom metadata. Declaration [JsonIgnore] public Dictionary<string, object> CustomMetadata { get; } Property Value Type Description Dictionary<string, object> The custom metadata. Timestamp Gets the timestamp. Declaration [JsonConverter(typeof(UnixMillisecondDateTimeConverter))] public DateTime Timestamp { get; } Property Value Type Description DateTime The timestamp."
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricDefinition.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricDefinition.html",
    "title": "Class MetricDefinition | AWS Lambda Powertools for .NET",
    "keywords": "Class MetricDefinition Class MetricDefinition. Inheritance object MetricDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class MetricDefinition Constructors MetricDefinition(string, MetricUnit, List<double>, MetricResolution) Creates a MetricDefinition object with multiple values Declaration public MetricDefinition(string name, MetricUnit unit, List<double> values, MetricResolution metricResolution) Parameters Type Name Description string name Metric name MetricUnit unit Metric unit List<double> values List of metric values MetricResolution metricResolution Metric resolution MetricDefinition(string, MetricUnit, double, MetricResolution) Creates a MetricDefinition object Declaration public MetricDefinition(string name, MetricUnit unit, double value, MetricResolution metricResolution) Parameters Type Name Description string name Metric name MetricUnit unit Metric unit double value Metric value MetricResolution metricResolution Metric resolution MetricDefinition(string, double) Creates a MetricDefinition object. MetricUnit is set to NONE since it is not provided. Declaration public MetricDefinition(string name, double value) Parameters Type Name Description string name Metric name double value Metric value Properties Name Gets or sets the name. Declaration [JsonPropertyName(\"Name\")] public string Name { get; set; } Property Value Type Description string The name. StorageResolution Gets or sets the StorageResolution. Declaration [JsonPropertyName(\"StorageResolution\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)] public MetricResolution StorageResolution { get; set; } Property Value Type Description MetricResolution The unit. Unit Gets or sets the unit. Declaration [JsonPropertyName(\"Unit\")] public MetricUnit Unit { get; set; } Property Value Type Description MetricUnit The unit. Values Gets the values. Declaration [JsonIgnore] public List<double> Values { get; } Property Value Type Description List<double> The values. Methods AddValue(double) Adds value to existing metric with same key Declaration public void AddValue(double value) Parameters Type Name Description double value Metric value to add to existing key"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricDirective.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricDirective.html",
    "title": "Class MetricDirective | AWS Lambda Powertools for .NET",
    "keywords": "Class MetricDirective Class MetricDirective. Inheritance object MetricDirective Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class MetricDirective Constructors MetricDirective() Creates empty MetricDirective object Declaration public MetricDirective() MetricDirective(string) Creates MetricDirective object with specific namespace identifier Declaration public MetricDirective(string nameSpace) Parameters Type Name Description string nameSpace Metrics namespace identifier MetricDirective(string, List<DimensionSet>) Creates MetricDirective object with specific namespace identifier and default dimensions list Declaration public MetricDirective(string nameSpace, List<DimensionSet> defaultDimensions) Parameters Type Name Description string nameSpace Metrics namespace identifier List<DimensionSet> defaultDimensions Default dimensions list Properties AllDimensionKeys Creates list with all dimensions. Needed for correct EMF payload creation Declaration [JsonPropertyName(\"Dimensions\")] public List<List<string>> AllDimensionKeys { get; } Property Value Type Description List<List<string>> All dimension keys. DefaultDimensions Gets the default dimensions. Declaration [JsonIgnore] public List<DimensionSet> DefaultDimensions { get; } Property Value Type Description List<DimensionSet> The default dimensions. Dimensions Gets the dimensions. Declaration [JsonIgnore] public List<DimensionSet> Dimensions { get; } Property Value Type Description List<DimensionSet> The dimensions. Metrics Gets the metrics. Declaration [JsonPropertyName(\"Metrics\")] public List<MetricDefinition> Metrics { get; } Property Value Type Description List<MetricDefinition> The metrics. Namespace Gets the namespace. Declaration [JsonPropertyName(\"Namespace\")] public string Namespace { get; } Property Value Type Description string The namespace. Service Gets the service. Declaration [JsonIgnore] public string Service { get; } Property Value Type Description string The service. Methods AddMetric(string, double, MetricUnit, MetricResolution) Adds metric to memory Declaration public void AddMetric(string name, double value, MetricUnit unit, MetricResolution metricResolution) Parameters Type Name Description string name Metric name. Cannot be null, empty or whitespace double value Metric value MetricUnit unit Metric unit MetricResolution metricResolution Metric Resolution, Standard (default), High Exceptions Type Condition ArgumentOutOfRangeException Metrics - Cannot add more than 100 metrics at the same time."
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricResolution.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricResolution.html",
    "title": "Enum MetricResolution | AWS Lambda Powertools for .NET",
    "keywords": "Enum MetricResolution Enum MetricResolution Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public enum MetricResolution Fields Name Description Default When not set default to not sending metric resolution High High resolution, with data at a granularity of one second Standard Standard resolution, with data having a one-minute granularity"
  },
  "api/AWS.Lambda.Powertools.Metrics.Metrics.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.Metrics.html",
    "title": "Class Metrics | AWS Lambda Powertools for .NET",
    "keywords": "Class Metrics Class Metrics. Implements the IMetrics Inheritance object Metrics Implements IMetrics IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class Metrics : IMetrics, IDisposable Methods AddDimension(string, string) Adds new dimension to memory. Declaration public static void AddDimension(string key, string value) Parameters Type Name Description string key Dimension key. Must not be null, empty or whitespace. string value Dimension value See Also IMetrics AddMetadata(string, object) Adds metadata to memory. Declaration public static void AddMetadata(string key, object value) Parameters Type Name Description string key Metadata key. Must not be null, empty or whitespace object value Metadata value See Also IMetrics AddMetric(string, double, MetricUnit, MetricResolution) Adds new metric to memory. Declaration public static void AddMetric(string key, double value, MetricUnit unit = MetricUnit.None, MetricResolution metricResolution = MetricResolution.Default) Parameters Type Name Description string key Metric Key. Must not be null, empty or whitespace double value Metric Value MetricUnit unit Metric Unit MetricResolution metricResolution See Also IMetrics Dispose() Implementation of IDisposable interface Declaration public void Dispose() See Also IMetrics GetNamespace() Retrieves namespace identifier. Declaration public static string GetNamespace() Returns Type Description string Namespace identifier See Also IMetrics PushSingleMetric(string, double, MetricUnit, string, string, Dictionary<string, string>, MetricResolution) Pushes single metric to CloudWatch using Embedded Metric Format. This can be used to push metrics with a different context. Declaration public static void PushSingleMetric(string metricName, double value, MetricUnit unit, string nameSpace = null, string service = null, Dictionary<string, string> defaultDimensions = null, MetricResolution metricResolution = MetricResolution.Default) Parameters Type Name Description string metricName Metric Name. Metric key cannot be null, empty or whitespace double value Metric Value MetricUnit unit Metric Unit string nameSpace Metric Namespace string service Service Name Dictionary<string, string> defaultDimensions Default dimensions list MetricResolution metricResolution Metrics resolution See Also IMetrics Serialize() Serialize global context object Declaration public string Serialize() Returns Type Description string Serialized global context object See Also IMetrics SetDefaultDimensions(Dictionary<string, string>) Set default dimension list Declaration public static void SetDefaultDimensions(Dictionary<string, string> defaultDimensions) Parameters Type Name Description Dictionary<string, string> defaultDimensions Default Dimension List See Also IMetrics SetNamespace(string) Sets metrics namespace identifier. Declaration public static void SetNamespace(string nameSpace) Parameters Type Name Description string nameSpace Metrics Namespace Identifier See Also IMetrics Implements IMetrics IDisposable See Also IMetrics"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricsAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricsAttribute.html",
    "title": "Class MetricsAttribute | AWS Lambda Powertools for .NET",
    "keywords": "Class MetricsAttribute Creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF). Key features --------------------- Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob) Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc) Metrics are created asynchronously by CloudWatch service, no custom stacks needed Context manager to create a one off metric with a different dimension Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_METRICS_NAMESPACE string, metric namespace Parameters ----------- Parameter name Description Service string, service name is used for metric dimension across all metrics, by default service_undefined Namespace string, logical container where all metrics will be placed CaptureColdStart bool, captures cold start during Lambda execution, by default false RaiseOnEmptyMetrics bool, instructs metrics validation to throw exception if no metrics are provided, by default false Inheritance object Attribute UniversalWrapperAttribute MethodAspectAttribute MetricsAttribute Inherited Members MethodAspectAttribute.WrapSync<T>(Func<object[], T>, object[], AspectEventArgs) MethodAspectAttribute.WrapAsync<T>(Func<object[], Task<T>>, object[], AspectEventArgs) Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class MetricsAttribute : MethodAspectAttribute Examples [Metrics( Service = \"Example\", Namespace = \"ExampleNamespace\", CaptureColdStart = true, RaiseOnEmptyMetrics = true) ] public async Task<APIGatewayProxyResponse> FunctionHandler (APIGatewayProxyRequest apigProxyEvent, ILambdaContext context) { ... } Properties CaptureColdStart Captures cold start during Lambda execution Declaration public bool CaptureColdStart { get; set; } Property Value Type Description bool true if [capture cold start]; otherwise, false. Namespace Set namespace. The default is the environment variable POWERTOOLS_METRICS_NAMESPACE. Declaration public string Namespace { get; set; } Property Value Type Description string The namespace. RaiseOnEmptyMetrics Instructs metrics validation to throw exception if no metrics are provided. Declaration public bool RaiseOnEmptyMetrics { get; set; } Property Value Type Description bool true if [raise on empty metrics]; otherwise, false. Service Service name is used for metric dimension across all metrics. This can be also set using the environment variable POWERTOOLS_SERVICE_NAME. Declaration public string Service { get; set; } Property Value Type Description string The service. Methods CreateHandler() Creates the handler. Declaration protected override IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. Overrides MethodAspectAttribute.CreateHandler()"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricsContext.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricsContext.html",
    "title": "Class MetricsContext | AWS Lambda Powertools for .NET",
    "keywords": "Class MetricsContext Class MetricsContext. Implements the IDisposable Inheritance object MetricsContext Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class MetricsContext : IDisposable Constructors MetricsContext() Creates empty MetricsContext object Declaration public MetricsContext() See Also IDisposable Methods AddDimension(string, string) Adds new dimension to memory Declaration public void AddDimension(string key, string value) Parameters Type Name Description string key Dimension key. Cannot be null, empty or whitespace string value Dimension value See Also IDisposable AddMetadata(string, object) Adds metadata to memory Declaration public void AddMetadata(string key, object value) Parameters Type Name Description string key Metadata key object value Metadata value See Also IDisposable AddMetric(string, double, MetricUnit, MetricResolution) Adds Metric to memory Declaration public void AddMetric(string key, double value, MetricUnit unit, MetricResolution metricResolution) Parameters Type Name Description string key Metric key. Cannot be null, empty or whitespace double value Metric value MetricUnit unit Metric unit MetricResolution metricResolution Metric Resolution, Standard (default), High See Also IDisposable ClearMetrics() Clears all metrics from memory Declaration public void ClearMetrics() See Also IDisposable Dispose() Implements IDisposable interface Declaration public void Dispose() See Also IDisposable GetMetrics() Retrieves all metrics stored in memory Declaration public List<MetricDefinition> GetMetrics() Returns Type Description List<MetricDefinition> List of Metrics See Also IDisposable Serialize() Serializes metrics object to string using Embedded Metric Format (EMF) Declaration public string Serialize() Returns Type Description string String object representing all metrics in memory See Also IDisposable SetDefaultDimensions(List<DimensionSet>) Sets default dimensions list Declaration public void SetDefaultDimensions(List<DimensionSet> defaultDimensions) Parameters Type Name Description List<DimensionSet> defaultDimensions Default dimensions list See Also IDisposable SetNamespace(string) Sets metrics namespace identifier Declaration public void SetNamespace(string metricNamespace) Parameters Type Name Description string metricNamespace Metrics namespace identifier See Also IDisposable SetService(string) Sets service name identifier Declaration public void SetService(string service) Parameters Type Name Description string service Service name See Also IDisposable Implements IDisposable See Also IDisposable"
  },
  "api/AWS.Lambda.Powertools.Metrics.MetricUnit.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.MetricUnit.html",
    "title": "Enum MetricUnit | AWS Lambda Powertools for .NET",
    "keywords": "Enum MetricUnit Enum MetricUnit Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax [JsonConverter(typeof(StringEnumConverter))] public enum MetricUnit Fields Name Description Bits Metrics unit in bits BitsPerSecond Metrics unit in bits per second Bytes Metrics unit in bytes BytesPerSecond Metrics unit in bytes per second Count Metrics unit count CountPerSecond Metrics unit in count per second Gigabits Metrics unit in gigabits GigabitsPerSecond Metrics unit in gigabits per second Gigabytes Metrics unit in gigabytes GigabytesPerSecond Metrics unit in gigabytes per second Kilobits Metrics unit in kilobits KilobitsPerSecond Metrics unit in kilobits per second Kilobytes Metrics unit in kilobytes KilobytesPerSecond Metrics unit in kilobytes per second Megabits Metrics unit in megabits MegabitsPerSecond Metrics unit in megabits per second Megabytes Metrics unit in megabytes MegabytesPerSecond Metrics unit in megabytes per second Microseconds Metrics unit in microseconds Milliseconds Metrics unit in milliseconds None Metrics unit none Percent Metrics unit in percent Seconds Metrics unit in seconds Terabits Metrics unit in terabits TerabitsPerSecond Metrics unit in terabits per second Terabytes Metrics unit in terabytes TerabytesPerSecond Metrics unit in terabytes per second"
  },
  "api/AWS.Lambda.Powertools.Metrics.RootNode.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.RootNode.html",
    "title": "Class RootNode | AWS Lambda Powertools for .NET",
    "keywords": "Class RootNode Class RootNode. Inheritance object RootNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class RootNode Properties AWS Gets the aws. Declaration [JsonPropertyName(\"_aws\")] public Metadata AWS { get; } Property Value Type Description Metadata The aws. MetricData Gets the metric data. Declaration [JsonExtensionData] public Dictionary<string, object> MetricData { get; } Property Value Type Description Dictionary<string, object> The metric data. Methods Serialize() Serializes metrics object to a valid string in JSON format Declaration public string Serialize() Returns Type Description string JSON EMF payload in string format Exceptions Type Condition SchemaValidationException namespace"
  },
  "api/AWS.Lambda.Powertools.Metrics.SchemaValidationException.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.SchemaValidationException.html",
    "title": "Class SchemaValidationException | AWS Lambda Powertools for .NET",
    "keywords": "Class SchemaValidationException Class SchemaValidationException. Implements the Exception Inheritance object Exception SchemaValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax [Serializable] public class SchemaValidationException : Exception, ISerializable Constructors SchemaValidationException(bool) Initializes a new instance of the SchemaValidationException class. Declaration public SchemaValidationException(bool raiseEmptyMetrics) Parameters Type Name Description bool raiseEmptyMetrics if set to true [raise empty metrics]. See Also Exception SchemaValidationException(string) Thrown when required property is missing on Metrics Object Declaration public SchemaValidationException(string propertyName) Parameters Type Name Description string propertyName Missing property name See Also Exception Implements ISerializable See Also Exception"
  },
  "api/AWS.Lambda.Powertools.Metrics.StringEnumConverter.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.StringEnumConverter.html",
    "title": "Class StringEnumConverter | AWS Lambda Powertools for .NET",
    "keywords": "Class StringEnumConverter Class StringEnumConverter. Implements the JsonConverterFactory Inheritance object JsonConverter JsonConverterFactory StringEnumConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class StringEnumConverter : JsonConverterFactory Constructors StringEnumConverter() Initializes a new instance of the StringEnumConverter class. Declaration public StringEnumConverter() See Also JsonConverterFactory Methods CanConvert(Type) When overridden in a derived class, determines whether the converter instance can convert the specified object type. Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type of the object to check whether it can be converted by this converter instance. Returns Type Description bool true if the instance can convert the specified object type; otherwise, false. Overrides JsonConverter.CanConvert(Type) See Also JsonConverterFactory CreateConverter(Type, JsonSerializerOptions) Creates a converter for a specified type. Declaration public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Type typeToConvert The type handled by the converter. JsonSerializerOptions options The serialization options to use. Returns Type Description JsonConverter A converter for which type is compatible with typeToConvert. Overrides JsonConverterFactory.CreateConverter(Type, JsonSerializerOptions) See Also JsonConverterFactory See Also JsonConverterFactory"
  },
  "api/AWS.Lambda.Powertools.Metrics.UnixMillisecondDateTimeConverter.html": {
    "href": "api/AWS.Lambda.Powertools.Metrics.UnixMillisecondDateTimeConverter.html",
    "title": "Class UnixMillisecondDateTimeConverter | AWS Lambda Powertools for .NET",
    "keywords": "Class UnixMillisecondDateTimeConverter Class UnixMillisecondDateTimeConverter. Implements the JsonConverter Inheritance object JsonConverter JsonConverter<DateTime> UnixMillisecondDateTimeConverter Inherited Members JsonConverter<DateTime>.CanConvert(Type) JsonConverter<DateTime>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateTime>.WriteAsPropertyName(Utf8JsonWriter, DateTime, JsonSerializerOptions) JsonConverter<DateTime>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Metrics Assembly: AWS.Lambda.Powertools.Metrics.dll Syntax public class UnixMillisecondDateTimeConverter : JsonConverter<DateTime> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to DateTime />. Declaration public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description DateTime The converted value. Overrides JsonConverter<DateTime>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Exceptions Type Condition NotImplementedException See Also JsonConverter Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) Writes a specified value as JSON. Declaration public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The writer to write to. DateTime value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use. Overrides JsonConverter<DateTime>.Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) Exceptions Type Condition JsonException Invalid date See Also JsonConverter See Also JsonConverter"
  },
  "api/AWS.Lambda.Powertools.Parameters.Cache.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Cache.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Cache | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Cache Interfaces ICacheManager Represents a type used to manage cache. IDateTimeWrapper Represents a type used to wrap datetime."
  },
  "api/AWS.Lambda.Powertools.Parameters.Cache.ICacheManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Cache.ICacheManager.html",
    "title": "Interface ICacheManager | AWS Lambda Powertools for .NET",
    "keywords": "Interface ICacheManager Represents a type used to manage cache. Namespace: AWS.Lambda.Powertools.Parameters.Cache Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface ICacheManager Methods Get(string) Retrieves a cached value by key. Declaration object? Get(string key) Parameters Type Name Description string key The key to retrieve. Returns Type Description object The cached object. Set(string, object?, TimeSpan) Adds a value to the cache by key for a specific duration. Declaration void Set(string key, object? value, TimeSpan duration) Parameters Type Name Description string key The key to store the value. object value The value to store. TimeSpan duration The expiry duration."
  },
  "api/AWS.Lambda.Powertools.Parameters.Cache.IDateTimeWrapper.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Cache.IDateTimeWrapper.html",
    "title": "Interface IDateTimeWrapper | AWS Lambda Powertools for .NET",
    "keywords": "Interface IDateTimeWrapper Represents a type used to wrap datetime. Namespace: AWS.Lambda.Powertools.Parameters.Cache Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface IDateTimeWrapper Properties UtcNow Gets the current UTC time. Declaration DateTime UtcNow { get; } Property Value Type Description DateTime"
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Configuration | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Configuration Classes ParameterProviderConfiguration ParameterProviderConfiguration class. ParameterProviderConfigurationBuilder ParameterProviderConfigurationBuilder class. ParameterProviderConfigurationExtensions ParameterProviderConfigurationExtensions class extensions."
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfiguration.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfiguration.html",
    "title": "Class ParameterProviderConfiguration | AWS Lambda Powertools for .NET",
    "keywords": "Class ParameterProviderConfiguration ParameterProviderConfiguration class. Inheritance object ParameterProviderConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.Configuration Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public class ParameterProviderConfiguration Properties ForceFetch Fetches the latest value from the store regardless if already available in cache. Declaration public bool ForceFetch { get; set; } Property Value Type Description bool MaxAge The cache maximum age. Declaration public TimeSpan? MaxAge { get; set; } Property Value Type Description TimeSpan? Transformer The transformer instance. Declaration public ITransformer? Transformer { get; set; } Property Value Type Description ITransformer"
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationBuilder.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationBuilder.html",
    "title": "Class ParameterProviderConfigurationBuilder | AWS Lambda Powertools for .NET",
    "keywords": "Class ParameterProviderConfigurationBuilder ParameterProviderConfigurationBuilder class. Inheritance object ParameterProviderConfigurationBuilder SsmProviderConfigurationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.Configuration Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public class ParameterProviderConfigurationBuilder Constructors ParameterProviderConfigurationBuilder(ParameterProvider) ParameterProviderConfigurationBuilder Constructor. Declaration public ParameterProviderConfigurationBuilder(ParameterProvider parameterProvider) Parameters Type Name Description ParameterProvider parameterProvider The parameter provider instance Properties HasTransformation Has transformation or custom transformer Declaration protected bool HasTransformation { get; } Property Value Type Description bool Methods Get(string) Get parameter value for the provided key. Declaration public string? Get(string key) Parameters Type Name Description string key The parameter key. Returns Type Description string The parameter value. GetAsync(string) Get parameter value for the provided key. Declaration public Task<string?> GetAsync(string key) Parameters Type Name Description string key The parameter key. Returns Type Description Task<string> The parameter value. GetAsync<T>(string) Get parameter transformed value for the provided key. Declaration public virtual Task<T?> GetAsync<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description Task<T> The parameter transformed value. Type Parameters Name Description T Target transformation type. GetMultiple(string) Get multiple parameter values for the provided key. Declaration public IDictionary<string, string?> GetMultiple(string key) Parameters Type Name Description string key The parameter key. Returns Type Description IDictionary<string, string> Returns a collection parameter key/value pairs. GetMultipleAsync(string) Get multiple parameter values for the provided key. Declaration public Task<IDictionary<string, string?>> GetMultipleAsync(string key) Parameters Type Name Description string key The parameter key. Returns Type Description Task<IDictionary<string, string>> Returns a collection parameter key/value pairs. GetMultipleAsync<T>(string) Get multiple transformed parameter values for the provided key. Declaration public virtual Task<IDictionary<string, T?>> GetMultipleAsync<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description Task<IDictionary<string, T>> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T GetMultiple<T>(string) Get multiple transformed parameter values for the provided key. Declaration public IDictionary<string, T?> GetMultiple<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description IDictionary<string, T> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T Get<T>(string) Get parameter transformed value for the provided key. Declaration public T? Get<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description T The parameter transformed value. Type Parameters Name Description T Target transformation type. NewConfiguration() Creates and returns an instance of parameter provider configuration. Declaration protected virtual ParameterProviderConfiguration NewConfiguration() Returns Type Description ParameterProviderConfiguration The parameter provider configuration Extension Methods ParameterProviderConfigurationExtensions.ForceFetch<TConfigurationBuilder>(TConfigurationBuilder) ParameterProviderConfigurationExtensions.WithMaxAge<TConfigurationBuilder>(TConfigurationBuilder, TimeSpan) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, ITransformer) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, Transformation) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, string)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationExtensions.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Configuration.ParameterProviderConfigurationExtensions.html",
    "title": "Class ParameterProviderConfigurationExtensions | AWS Lambda Powertools for .NET",
    "keywords": "Class ParameterProviderConfigurationExtensions ParameterProviderConfigurationExtensions class extensions. Inheritance object ParameterProviderConfigurationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.Configuration Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public static class ParameterProviderConfigurationExtensions Methods ForceFetch<TConfigurationBuilder>(TConfigurationBuilder) Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration public static TConfigurationBuilder ForceFetch<TConfigurationBuilder>(this TConfigurationBuilder builder) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithMaxAge<TConfigurationBuilder>(TConfigurationBuilder, TimeSpan) Set the cache maximum age. Declaration public static TConfigurationBuilder WithMaxAge<TConfigurationBuilder>(this TConfigurationBuilder builder, TimeSpan maxAge) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. TimeSpan maxAge The maximum cache age Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, ITransformer) Transforms the latest value from after retrieved from the store. Declaration public static TConfigurationBuilder WithTransformation<TConfigurationBuilder>(this TConfigurationBuilder builder, ITransformer transformer) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. ITransformer transformer The instance of the transformer. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, Transformation) Transforms the latest value from after retrieved from the store. Declaration public static TConfigurationBuilder WithTransformation<TConfigurationBuilder>(this TConfigurationBuilder builder, Transformation transformation) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. Transformation transformation The transformation type. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type. WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, string) Transforms the latest value from after retrieved from the store. Declaration public static TConfigurationBuilder WithTransformation<TConfigurationBuilder>(this TConfigurationBuilder builder, string transformerName) where TConfigurationBuilder : ParameterProviderConfigurationBuilder Parameters Type Name Description TConfigurationBuilder builder The configuration builder instance. string transformerName The name of the registered transformer. Returns Type Description TConfigurationBuilder The configuration builder instance. Type Parameters Name Description TConfigurationBuilder The configuration builder type."
  },
  "api/AWS.Lambda.Powertools.Parameters.DynamoDB.DynamoDBProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.DynamoDB.DynamoDBProvider.html",
    "title": "Class DynamoDBProvider | AWS Lambda Powertools for .NET",
    "keywords": "Class DynamoDBProvider Provider to retrieve parameter values from Amazon DynamoDB table. Inheritance object ParameterProvider DynamoDBProvider Implements IDynamoDBProvider IParameterProvider IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig> Inherited Members ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(string) ParameterProvider.GetAsync(string) ParameterProvider.Get<T>(string) ParameterProvider.GetAsync<T>(string) ParameterProvider.GetMultiple(string) ParameterProvider.GetMultipleAsync(string) ParameterProvider.GetMultiple<T>(string) ParameterProvider.GetMultipleAsync<T>(string) ParameterProvider.WithMaxAge(TimeSpan) ParameterProvider.ForceFetch() ParameterProvider.WithTransformation(Transformation) ParameterProvider.WithTransformation(ITransformer) ParameterProvider.WithTransformation(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.DynamoDB Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public class DynamoDBProvider : ParameterProvider, IDynamoDBProvider, IParameterProvider, IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig> Methods ConfigureClient(AmazonDynamoDBConfig) Configure client with the credentials loaded from the application's default configuration. Declaration public IDynamoDBProvider ConfigureClient(AmazonDynamoDBConfig config) Parameters Type Name Description AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration public IDynamoDBProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration public IDynamoDBProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(AWSCredentials, AmazonDynamoDBConfig) Configure client with AWS credentials and a client configuration object. Declaration public IDynamoDBProvider ConfigureClient(AWSCredentials credentials, AmazonDynamoDBConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration public IDynamoDBProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(string, string, AmazonDynamoDBConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonDynamoDBConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(string, string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(string, string, string, AmazonDynamoDBConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonDynamoDBConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token AmazonDynamoDBConfig config The client configuration object. Returns Type Description IDynamoDBProvider Provider instance ConfigureClient(string, string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public IDynamoDBProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description IDynamoDBProvider Provider instance GetAsync(string, ParameterProviderConfiguration?) Get parameter value for the provided key. Declaration protected override Task<string?> GetAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<string> The parameter value. Overrides ParameterProvider.GetAsync(string, ParameterProviderConfiguration?) GetMultipleAsync(string, ParameterProviderConfiguration?) Get multiple parameter values for the provided key. Declaration protected override Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<IDictionary<string, string>> Returns a collection parameter key/value pairs. Overrides ParameterProvider.GetMultipleAsync(string, ParameterProviderConfiguration?) UseClient(IAmazonDynamoDB) Use a custom client Declaration public IDynamoDBProvider UseClient(IAmazonDynamoDB client) Parameters Type Name Description IAmazonDynamoDB client The custom client Returns Type Description IDynamoDBProvider Provider instance UseTable(string) Specify the DynamoDB table Declaration public IDynamoDBProvider UseTable(string tableName) Parameters Type Name Description string tableName DynamoDB table name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(string, string, string) Specify the DynamoDB table Declaration public IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string valueAttribute) Parameters Type Name Description string tableName DynamoDB table name. string primaryKeyAttribute The primary key attribute name. string valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(string, string, string, string) Specify the DynamoDB table Declaration public IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string sortKeyAttribute, string valueAttribute) Parameters Type Name Description string tableName DynamoDB table name. string primaryKeyAttribute The primary key attribute name. string sortKeyAttribute The sort key attribute name. string valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. Implements IDynamoDBProvider IParameterProvider IParameterProviderConfigurableClient<TProvider, TClient, TConfig> Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.DynamoDB.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.DynamoDB.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.DynamoDB | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.DynamoDB Classes DynamoDBProvider Provider to retrieve parameter values from Amazon DynamoDB table. Interfaces IDynamoDBProvider Represents a type used to retrieve parameter values from Amazon DynamoDB table."
  },
  "api/AWS.Lambda.Powertools.Parameters.DynamoDB.IDynamoDBProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.DynamoDB.IDynamoDBProvider.html",
    "title": "Interface IDynamoDBProvider | AWS Lambda Powertools for .NET",
    "keywords": "Interface IDynamoDBProvider Represents a type used to retrieve parameter values from Amazon DynamoDB table. Inherited Members IParameterProvider.Get(string) IParameterProvider.GetAsync(string) IParameterProvider.Get<T>(string) IParameterProvider.GetAsync<T>(string) IParameterProvider.GetMultiple(string) IParameterProvider.GetMultipleAsync(string) IParameterProvider.GetMultiple<T>(string) IParameterProvider.GetMultipleAsync<T>(string) IParameterProvider.WithMaxAge(TimeSpan) IParameterProvider.ForceFetch() IParameterProvider.WithTransformation(Transformation) IParameterProvider.WithTransformation(ITransformer) IParameterProvider.WithTransformation(string) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.UseClient(IAmazonDynamoDB) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AmazonDynamoDBConfig) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AWSCredentials) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AWSCredentials, RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(AWSCredentials, AmazonDynamoDBConfig) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(string, string) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(string, string, RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(string, string, AmazonDynamoDBConfig) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(string, string, string) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(string, string, string, RegionEndpoint) IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig>.ConfigureClient(string, string, string, AmazonDynamoDBConfig) Namespace: AWS.Lambda.Powertools.Parameters.DynamoDB Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface IDynamoDBProvider : IParameterProvider, IParameterProviderConfigurableClient<IDynamoDBProvider, IAmazonDynamoDB, AmazonDynamoDBConfig> Methods UseTable(string) Specify the DynamoDB table Declaration IDynamoDBProvider UseTable(string tableName) Parameters Type Name Description string tableName DynamoDB table name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(string, string, string) Specify the DynamoDB table Declaration IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string valueAttribute) Parameters Type Name Description string tableName DynamoDB table name. string primaryKeyAttribute The primary key attribute name. string valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. UseTable(string, string, string, string) Specify the DynamoDB table Declaration IDynamoDBProvider UseTable(string tableName, string primaryKeyAttribute, string sortKeyAttribute, string valueAttribute) Parameters Type Name Description string tableName DynamoDB table name. string primaryKeyAttribute The primary key attribute name. string sortKeyAttribute The sort key attribute name. string valueAttribute The value attribute name. Returns Type Description IDynamoDBProvider Provider instance. Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters Classes ParametersManager Class ParametersManager"
  },
  "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Internal.Provider | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Internal.Provider Interfaces IParameterProviderBaseHandler Represents a type used to retrieve parameter values from a store. IParameterProviderConfigurableClient<TProvider, TClient, TConfig> Represents a type that has an internal configurable client to retrieve data from AWS services."
  },
  "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderBaseHandler.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderBaseHandler.html",
    "title": "Interface IParameterProviderBaseHandler | AWS Lambda Powertools for .NET",
    "keywords": "Interface IParameterProviderBaseHandler Represents a type used to retrieve parameter values from a store. Namespace: AWS.Lambda.Powertools.Parameters.Internal.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProviderBaseHandler Methods AddCustomTransformer(string, ITransformer) Registers a new transformer instance by name. Declaration void AddCustomTransformer(string name, ITransformer transformer) Parameters Type Name Description string name The transformer unique name. ITransformer transformer The transformer instance. GetAsync<T>(string, ParameterProviderConfiguration?, Transformation?, string?) Gets parameter value for the provided key and configuration. Declaration Task<T?> GetAsync<T>(string key, ParameterProviderConfiguration? config, Transformation? transformation, string? transformerName) where T : class Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The optional parameter provider configuration. Transformation? transformation The optional transformation. string transformerName The optional transformer name. Returns Type Description Task<T> The parameter value. Type Parameters Name Description T Target transformation type. GetCacheManager() Gets the CacheManager instance. Declaration ICacheManager GetCacheManager() Returns Type Description ICacheManager The CacheManager instance GetDefaultMaxAge() Gets the maximum age or default value. Declaration TimeSpan? GetDefaultMaxAge() Returns Type Description TimeSpan? the maxAge GetMaxAge(ParameterProviderConfiguration?) Gets the maximum age or default value. Declaration TimeSpan GetMaxAge(ParameterProviderConfiguration? config) Parameters Type Name Description ParameterProviderConfiguration config Returns Type Description TimeSpan the maxAge GetMultipleAsync<T>(string, ParameterProviderConfiguration?, Transformation?, string?) Gets multiple parameter values for the provided key and configuration. Declaration Task<IDictionary<string, T?>> GetMultipleAsync<T>(string key, ParameterProviderConfiguration? config, Transformation? transformation, string? transformerName) where T : class Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The optional parameter provider configuration. Transformation? transformation The optional transformation. string transformerName The optional transformer name. Returns Type Description Task<IDictionary<string, T>> Returns a collection parameter key/value pairs. Type Parameters Name Description T Target transformation type. SetCacheManager(ICacheManager) Sets the CacheManager. Declaration void SetCacheManager(ICacheManager cacheManager) Parameters Type Name Description ICacheManager cacheManager The CacheManager instance. SetDefaultMaxAge(TimeSpan) Sets the cache maximum age. Declaration void SetDefaultMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The cache maximum age SetRaiseTransformationError(bool) Configure the transformer to raise exception or return Null on transformation error Declaration void SetRaiseTransformationError(bool raiseError) Parameters Type Name Description bool raiseError true for raise error, false for return Null. SetTransformerManager(ITransformerManager) Sets the TransformerManager. Declaration void SetTransformerManager(ITransformerManager transformerManager) Parameters Type Name Description ITransformerManager transformerManager The TransformerManager instance."
  },
  "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderConfigurableClient-3.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Internal.Provider.IParameterProviderConfigurableClient-3.html",
    "title": "Interface IParameterProviderConfigurableClient<TProvider, TClient, TConfig> | AWS Lambda Powertools for .NET",
    "keywords": "Interface IParameterProviderConfigurableClient<TProvider, TClient, TConfig> Represents a type that has an internal configurable client to retrieve data from AWS services. Namespace: AWS.Lambda.Powertools.Parameters.Internal.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProviderConfigurableClient<out TProvider, in TClient, in TConfig> Type Parameters Name Description TProvider TClient TConfig Methods ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration TProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration TProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description TProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration TProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance ConfigureClient(AWSCredentials, TConfig) Configure client with AWS credentials and a client configuration object. Declaration TProvider ConfigureClient(AWSCredentials credentials, TConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. TConfig config The client configuration object. Returns Type Description TProvider Provider instance ConfigureClient(string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key Returns Type Description TProvider Provider instance ConfigureClient(string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance ConfigureClient(string, string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token Returns Type Description TProvider Provider instance ConfigureClient(string, string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description TProvider Provider instance ConfigureClient(string, string, string, TConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, TConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token TConfig config The client configuration object. Returns Type Description TProvider Provider instance ConfigureClient(string, string, TConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration TProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, TConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key TConfig config The client configuration object. Returns Type Description TProvider Provider instance ConfigureClient(TConfig) Configure client with the credentials loaded from the application's default configuration. Declaration TProvider ConfigureClient(TConfig config) Parameters Type Name Description TConfig config The client configuration object. Returns Type Description TProvider Provider instance UseClient(TClient) Use a custom client Declaration TProvider UseClient(TClient client) Parameters Type Name Description TClient client The custom client Returns Type Description TProvider Provider instance"
  },
  "api/AWS.Lambda.Powertools.Parameters.ParametersManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.ParametersManager.html",
    "title": "Class ParametersManager | AWS Lambda Powertools for .NET",
    "keywords": "Class ParametersManager Class ParametersManager Inheritance object ParametersManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public static class ParametersManager Properties DynamoDBProvider Gets the DynamoDBProvider instance. Declaration public static IDynamoDBProvider DynamoDBProvider { get; } Property Value Type Description IDynamoDBProvider The DynamoDBProvider instance. SecretsProvider Gets the SecretsProvider instance. Declaration public static ISecretsProvider SecretsProvider { get; } Property Value Type Description ISecretsProvider The SecretsProvider instance. SsmProvider Gets the SsmProvider instance. Declaration public static ISsmProvider SsmProvider { get; } Property Value Type Description ISsmProvider The SsmProvider instance. Methods AddTransformer(string, ITransformer) Registers a new transformer instance by name for all providers. Declaration public static void AddTransformer(string name, ITransformer transformer) Parameters Type Name Description string name The transformer unique name. ITransformer transformer The transformer instance. CreateDynamoDBProvider() Create a new instance of DynamoDBProvider. Declaration public static IDynamoDBProvider CreateDynamoDBProvider() Returns Type Description IDynamoDBProvider The DynamoDBProvider instance. CreateSecretsProvider() Create a new instance of SecretsProvider. Declaration public static ISecretsProvider CreateSecretsProvider() Returns Type Description ISecretsProvider The SecretsProvider instance. CreateSsmProvider() Create a new instance of SsmProvider. Declaration public static ISsmProvider CreateSsmProvider() Returns Type Description ISsmProvider The SsmProvider instance. DefaultMaxAge(TimeSpan) Set the caching default maximum age for all providers. Declaration public static void DefaultMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum age. Exceptions Type Condition ArgumentOutOfRangeException maxAge RaiseTransformationError() Configure the transformer to raise exception on transformation error Declaration public static void RaiseTransformationError() RaiseTransformationError(bool) Configure the transformer to raise exception or return Null on transformation error Declaration public static void RaiseTransformationError(bool raiseError) Parameters Type Name Description bool raiseError true for raise error, false for return Null. UseCacheManager(ICacheManager) Set the CacheManager instance for all providers. Declaration public static void UseCacheManager(ICacheManager cacheManager) Parameters Type Name Description ICacheManager cacheManager The CacheManager instance. UseTransformerManager(ITransformerManager) Set the TransformerManager instance for all providers. Declaration public static void UseTransformerManager(ITransformerManager transformerManager) Parameters Type Name Description ITransformerManager transformerManager The TransformerManager instance."
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Provider | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Provider Classes ParameterProvider Provide a generic view of a parameter provider. This is an abstract class. ParameterProviderExtensions Class ParameterProviderExtensions. ParameterProvider<TConfigurationBuilder> Provide a generic view of a parameter provider. This is an abstract class. Interfaces IParameterProvider Represents a type used to retrieve parameter values from a store. IParameterProvider<TConfigurationBuilder> Represents a type used to retrieve parameter values from a store. Enums ParameterProviderCacheMode Enum ParameterProviderCacheMode"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider-1.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider-1.html",
    "title": "Interface IParameterProvider<TConfigurationBuilder> | AWS Lambda Powertools for .NET",
    "keywords": "Interface IParameterProvider<TConfigurationBuilder> Represents a type used to retrieve parameter values from a store. Inherited Members IParameterProvider.Get(string) IParameterProvider.GetAsync(string) IParameterProvider.Get<T>(string) IParameterProvider.GetAsync<T>(string) IParameterProvider.GetMultiple(string) IParameterProvider.GetMultipleAsync(string) IParameterProvider.GetMultiple<T>(string) IParameterProvider.GetMultipleAsync<T>(string) Namespace: AWS.Lambda.Powertools.Parameters.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProvider<out TConfigurationBuilder> : IParameterProvider where TConfigurationBuilder : ParameterProviderConfigurationBuilder Type Parameters Name Description TConfigurationBuilder The type of ConfigurationBuilder Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration TConfigurationBuilder ForceFetch() Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithMaxAge(TimeSpan) Set the cache maximum age Declaration TConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration TConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration TConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(string) Transforms the latest value from after retrieved from the store. Declaration TConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description string transformerName The name of the registered transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.IParameterProvider.html",
    "title": "Interface IParameterProvider | AWS Lambda Powertools for .NET",
    "keywords": "Interface IParameterProvider Represents a type used to retrieve parameter values from a store. Namespace: AWS.Lambda.Powertools.Parameters.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface IParameterProvider Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration ParameterProviderConfigurationBuilder ForceFetch() Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Get(string) Get parameter value for the provided key. Declaration string? Get(string key) Parameters Type Name Description string key The parameter key. Returns Type Description string The parameter value. GetAsync(string) Get parameter value for the provided key. Declaration Task<string?> GetAsync(string key) Parameters Type Name Description string key The parameter key. Returns Type Description Task<string> The parameter value. GetAsync<T>(string) Get parameter transformed value for the provided key. Declaration Task<T?> GetAsync<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description Task<T> The parameter transformed value. Type Parameters Name Description T Target transformation type. GetMultiple(string) Get multiple parameter values for the provided key. Declaration IDictionary<string, string?> GetMultiple(string key) Parameters Type Name Description string key The parameter key. Returns Type Description IDictionary<string, string> Returns a collection parameter key/value pairs. GetMultipleAsync(string) Get multiple parameter values for the provided key. Declaration Task<IDictionary<string, string?>> GetMultipleAsync(string key) Parameters Type Name Description string key The parameter key. Returns Type Description Task<IDictionary<string, string>> Returns a collection parameter key/value pairs. GetMultipleAsync<T>(string) Get multiple transformed parameter values for the provided key. Declaration Task<IDictionary<string, T?>> GetMultipleAsync<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description Task<IDictionary<string, T>> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T GetMultiple<T>(string) Get multiple transformed parameter values for the provided key. Declaration IDictionary<string, T?> GetMultiple<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description IDictionary<string, T> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T Get<T>(string) Get parameter transformed value for the provided key. Declaration T? Get<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description T The parameter transformed value. Type Parameters Name Description T Target transformation type. WithMaxAge(TimeSpan) Set the cache maximum age Declaration ParameterProviderConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration ParameterProviderConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration ParameterProviderConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(string) Transforms the latest value from after retrieved from the store. Declaration ParameterProviderConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description string transformerName The name of the registered transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider-1.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider-1.html",
    "title": "Class ParameterProvider<TConfigurationBuilder> | AWS Lambda Powertools for .NET",
    "keywords": "Class ParameterProvider<TConfigurationBuilder> Provide a generic view of a parameter provider. This is an abstract class. Inheritance object ParameterProvider ParameterProvider<TConfigurationBuilder> SsmProvider Implements IParameterProvider Inherited Members ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(string) ParameterProvider.GetAsync(string) ParameterProvider.Get<T>(string) ParameterProvider.GetAsync<T>(string) ParameterProvider.GetMultiple(string) ParameterProvider.GetMultipleAsync(string) ParameterProvider.GetMultiple<T>(string) ParameterProvider.GetMultipleAsync<T>(string) ParameterProvider.GetAsync(string, ParameterProviderConfiguration) ParameterProvider.GetMultipleAsync(string, ParameterProviderConfiguration) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public abstract class ParameterProvider<TConfigurationBuilder> : ParameterProvider, IParameterProvider where TConfigurationBuilder : ParameterProviderConfigurationBuilder Type Parameters Name Description TConfigurationBuilder Type of the ConfigurationBuilder for the parameter provider. Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration public TConfigurationBuilder ForceFetch() Returns Type Description TConfigurationBuilder Provider Configuration Builder instance NewConfigurationBuilder() Creates a new instance of the specified type ConfigurationBuilder. Declaration protected abstract TConfigurationBuilder NewConfigurationBuilder() Returns Type Description TConfigurationBuilder A new instance of ConfigurationBuilder. WithMaxAge(TimeSpan) Set the cache maximum age. Declaration public TConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration public TConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration public TConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance WithTransformation(string) Transforms the latest value from after retrieved from the store. Declaration public TConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description string transformerName The name of the registered transformer. Returns Type Description TConfigurationBuilder Provider Configuration Builder instance Implements IParameterProvider Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProvider.html",
    "title": "Class ParameterProvider | AWS Lambda Powertools for .NET",
    "keywords": "Class ParameterProvider Provide a generic view of a parameter provider. This is an abstract class. Inheritance object ParameterProvider DynamoDBProvider ParameterProvider<TConfigurationBuilder> SecretsProvider Implements IParameterProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public abstract class ParameterProvider : IParameterProvider Properties Cache Gets the CacheManager instance. Declaration protected ICacheManager Cache { get; } Property Value Type Description ICacheManager CacheMode Gets parameter provider cache mode. Declaration protected virtual ParameterProviderCacheMode CacheMode { get; } Property Value Type Description ParameterProviderCacheMode Methods ForceFetch() Forces provider to fetch the latest value from the store regardless if already available in cache. Declaration public ParameterProviderConfigurationBuilder ForceFetch() Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Get(string) Get parameter value for the provided key. Declaration public string? Get(string key) Parameters Type Name Description string key The parameter key. Returns Type Description string The parameter value. GetAsync(string) Get parameter value for the provided key. Declaration public Task<string?> GetAsync(string key) Parameters Type Name Description string key The parameter key. Returns Type Description Task<string> The parameter value. GetAsync(string, ParameterProviderConfiguration?) Get parameter value for the provided key. Declaration protected abstract Task<string?> GetAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<string> The parameter value. GetAsync<T>(string) Get parameter transformed value for the provided key. Declaration public virtual Task<T?> GetAsync<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description Task<T> The parameter transformed value. Type Parameters Name Description T Target transformation type. GetMaxAge(ParameterProviderConfiguration?) Get the cache maximum age based on provided configuration. Declaration protected TimeSpan GetMaxAge(ParameterProviderConfiguration? config) Parameters Type Name Description ParameterProviderConfiguration config The parameter provider configuration Returns Type Description TimeSpan The cache maximum age. GetMultiple(string) Get multiple parameter values for the provided key. Declaration public IDictionary<string, string?> GetMultiple(string key) Parameters Type Name Description string key The parameter key. Returns Type Description IDictionary<string, string> Returns a collection parameter key/value pairs. GetMultipleAsync(string) Get multiple parameter values for the provided key. Declaration public Task<IDictionary<string, string?>> GetMultipleAsync(string key) Parameters Type Name Description string key The parameter key. Returns Type Description Task<IDictionary<string, string>> Returns a collection parameter key/value pairs. GetMultipleAsync(string, ParameterProviderConfiguration?) Get multiple parameter values for the provided key. Declaration protected abstract Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<IDictionary<string, string>> Returns a collection parameter key/value pairs. GetMultipleAsync<T>(string) Get multiple transformed parameter values for the provided key. Declaration public virtual Task<IDictionary<string, T?>> GetMultipleAsync<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description Task<IDictionary<string, T>> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T GetMultiple<T>(string) Get multiple transformed parameter values for the provided key. Declaration public IDictionary<string, T?> GetMultiple<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description IDictionary<string, T> Returns a collection parameter key/transformed value pairs. Type Parameters Name Description T Get<T>(string) Get parameter transformed value for the provided key. Declaration public T? Get<T>(string key) where T : class Parameters Type Name Description string key The parameter key. Returns Type Description T The parameter transformed value. Type Parameters Name Description T Target transformation type. WithMaxAge(TimeSpan) Set the cache maximum age. Declaration public ParameterProviderConfigurationBuilder WithMaxAge(TimeSpan maxAge) Parameters Type Name Description TimeSpan maxAge The maximum cache age Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(ITransformer) Transforms the latest value from after retrieved from the store. Declaration public ParameterProviderConfigurationBuilder WithTransformation(ITransformer transformer) Parameters Type Name Description ITransformer transformer The instance of the transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(Transformation) Transforms the latest value from after retrieved from the store. Declaration public ParameterProviderConfigurationBuilder WithTransformation(Transformation transformation) Parameters Type Name Description Transformation transformation The transformation type. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance WithTransformation(string) Transforms the latest value from after retrieved from the store. Declaration public ParameterProviderConfigurationBuilder WithTransformation(string transformerName) Parameters Type Name Description string transformerName The name of the registered transformer. Returns Type Description ParameterProviderConfigurationBuilder Provider Configuration Builder instance Implements IParameterProvider Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderCacheMode.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderCacheMode.html",
    "title": "Enum ParameterProviderCacheMode | AWS Lambda Powertools for .NET",
    "keywords": "Enum ParameterProviderCacheMode Enum ParameterProviderCacheMode Namespace: AWS.Lambda.Powertools.Parameters.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public enum ParameterProviderCacheMode Fields Name Description All All Disabled Disabled GetMultipleResultOnly GetMultipleResultOnly GetResultOnly GetResultOnly"
  },
  "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderExtensions.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Provider.ParameterProviderExtensions.html",
    "title": "Class ParameterProviderExtensions | AWS Lambda Powertools for .NET",
    "keywords": "Class ParameterProviderExtensions Class ParameterProviderExtensions. Inheritance object ParameterProviderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.Provider Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public static class ParameterProviderExtensions Methods AddTransformer<TProvider>(TProvider, string, ITransformer) Registers a new transformer instance by name. Declaration public static TProvider AddTransformer<TProvider>(this TProvider provider, string name, ITransformer transformer) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. string name The transformer name. ITransformer transformer The transformer instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. DefaultMaxAge<TProvider>(TProvider, TimeSpan) Set the cache maximum age. Declaration public static TProvider DefaultMaxAge<TProvider>(this TProvider provider, TimeSpan maxAge) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. TimeSpan maxAge The cache maximum age. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. RaiseTransformationError<TProvider>(TProvider) Configure the transformer to raise exception on transformation error Declaration public static TProvider RaiseTransformationError<TProvider>(this TProvider provider) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. RaiseTransformationError<TProvider>(TProvider, bool) Configure the transformer to raise exception or return Null on transformation error Declaration public static TProvider RaiseTransformationError<TProvider>(this TProvider provider, bool raiseError) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. bool raiseError true for raise error, false for return Null. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. UseCacheManager<TProvider>(TProvider, ICacheManager) Set the CacheManager instance. Declaration public static TProvider UseCacheManager<TProvider>(this TProvider provider, ICacheManager cacheManager) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. ICacheManager cacheManager The CacheManager instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type. UseTransformerManager<TProvider>(TProvider, ITransformerManager) Set the TransformerManager instance. Declaration public static TProvider UseTransformerManager<TProvider>(this TProvider provider, ITransformerManager transformerManager) where TProvider : IParameterProvider Parameters Type Name Description TProvider provider The provider instance. ITransformerManager transformerManager The TransformerManager instance. Returns Type Description TProvider The provider instance. Type Parameters Name Description TProvider The provider type."
  },
  "api/AWS.Lambda.Powertools.Parameters.SecretsManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SecretsManager.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.SecretsManager | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.SecretsManager Classes SecretsProvider Provider to retrieve parameter values from SAWS Secrets Manager. Interfaces ISecretsProvider Represents a type used to retrieve parameter values from SAWS Secrets Manager."
  },
  "api/AWS.Lambda.Powertools.Parameters.SecretsManager.ISecretsProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SecretsManager.ISecretsProvider.html",
    "title": "Interface ISecretsProvider | AWS Lambda Powertools for .NET",
    "keywords": "Interface ISecretsProvider Represents a type used to retrieve parameter values from SAWS Secrets Manager. Inherited Members IParameterProvider.Get(string) IParameterProvider.GetAsync(string) IParameterProvider.Get<T>(string) IParameterProvider.GetAsync<T>(string) IParameterProvider.GetMultiple(string) IParameterProvider.GetMultipleAsync(string) IParameterProvider.GetMultiple<T>(string) IParameterProvider.GetMultipleAsync<T>(string) IParameterProvider.WithMaxAge(TimeSpan) IParameterProvider.ForceFetch() IParameterProvider.WithTransformation(Transformation) IParameterProvider.WithTransformation(ITransformer) IParameterProvider.WithTransformation(string) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.UseClient(IAmazonSecretsManager) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AmazonSecretsManagerConfig) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AWSCredentials) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AWSCredentials, RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(AWSCredentials, AmazonSecretsManagerConfig) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(string, string) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(string, string, RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(string, string, AmazonSecretsManagerConfig) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(string, string, string) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(string, string, string, RegionEndpoint) IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig>.ConfigureClient(string, string, string, AmazonSecretsManagerConfig) Namespace: AWS.Lambda.Powertools.Parameters.SecretsManager Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface ISecretsProvider : IParameterProvider, IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig> Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.SecretsManager.SecretsProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SecretsManager.SecretsProvider.html",
    "title": "Class SecretsProvider | AWS Lambda Powertools for .NET",
    "keywords": "Class SecretsProvider Provider to retrieve parameter values from SAWS Secrets Manager. Inheritance object ParameterProvider SecretsProvider Implements ISecretsProvider IParameterProvider IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig> Inherited Members ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(string) ParameterProvider.GetAsync(string) ParameterProvider.Get<T>(string) ParameterProvider.GetAsync<T>(string) ParameterProvider.GetMultiple(string) ParameterProvider.GetMultipleAsync(string) ParameterProvider.GetMultiple<T>(string) ParameterProvider.GetMultipleAsync<T>(string) ParameterProvider.WithMaxAge(TimeSpan) ParameterProvider.ForceFetch() ParameterProvider.WithTransformation(Transformation) ParameterProvider.WithTransformation(ITransformer) ParameterProvider.WithTransformation(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.SecretsManager Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public class SecretsProvider : ParameterProvider, ISecretsProvider, IParameterProvider, IParameterProviderConfigurableClient<ISecretsProvider, IAmazonSecretsManager, AmazonSecretsManagerConfig> Methods ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration public ISecretsProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration public ISecretsProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description ISecretsProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration public ISecretsProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance ConfigureClient(AWSCredentials, AmazonSecretsManagerConfig) Configure client with AWS credentials and a client configuration object. Declaration public ISecretsProvider ConfigureClient(AWSCredentials credentials, AmazonSecretsManagerConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance ConfigureClient(AmazonSecretsManagerConfig) Configure client with the credentials loaded from the application's default configuration. Declaration public ISecretsProvider ConfigureClient(AmazonSecretsManagerConfig config) Parameters Type Name Description AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance ConfigureClient(string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key Returns Type Description ISecretsProvider Provider instance ConfigureClient(string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance ConfigureClient(string, string, AmazonSecretsManagerConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonSecretsManagerConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance ConfigureClient(string, string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token Returns Type Description ISecretsProvider Provider instance ConfigureClient(string, string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description ISecretsProvider Provider instance ConfigureClient(string, string, string, AmazonSecretsManagerConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISecretsProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonSecretsManagerConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token AmazonSecretsManagerConfig config The client configuration object. Returns Type Description ISecretsProvider Provider instance GetAsync(string, ParameterProviderConfiguration?) Get parameter value for the provided key. Declaration protected override Task<string?> GetAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<string> The parameter value. Overrides ParameterProvider.GetAsync(string, ParameterProviderConfiguration?) GetMultipleAsync(string, ParameterProviderConfiguration?) Get multiple parameter values for the provided key. Declaration protected override Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<IDictionary<string, string>> Returns a collection parameter key/value pairs. Overrides ParameterProvider.GetMultipleAsync(string, ParameterProviderConfiguration?) UseClient(IAmazonSecretsManager) Use a custom client Declaration public ISecretsProvider UseClient(IAmazonSecretsManager client) Parameters Type Name Description IAmazonSecretsManager client The custom client Returns Type Description ISecretsProvider Provider instance Implements ISecretsProvider IParameterProvider IParameterProviderConfigurableClient<TProvider, TClient, TConfig> Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Classes SsmProvider Provider to retrieve parameter values from AWS Systems Manager Parameter Store. SsmProviderConfigurationBuilder SsmProviderConfigurationBuilder class. Interfaces ISsmProvider Represents a type used to retrieve parameter values from AWS Systems Manager Parameter Store."
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.ISsmProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.ISsmProvider.html",
    "title": "Interface ISsmProvider | AWS Lambda Powertools for .NET",
    "keywords": "Interface ISsmProvider Represents a type used to retrieve parameter values from AWS Systems Manager Parameter Store. Inherited Members IParameterProvider<SsmProviderConfigurationBuilder>.WithMaxAge(TimeSpan) IParameterProvider<SsmProviderConfigurationBuilder>.ForceFetch() IParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(Transformation) IParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(ITransformer) IParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(string) IParameterProvider.Get(string) IParameterProvider.GetAsync(string) IParameterProvider.Get<T>(string) IParameterProvider.GetAsync<T>(string) IParameterProvider.GetMultiple(string) IParameterProvider.GetMultipleAsync(string) IParameterProvider.GetMultiple<T>(string) IParameterProvider.GetMultipleAsync<T>(string) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.UseClient(IAmazonSimpleSystemsManagement) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AmazonSimpleSystemsManagementConfig) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AWSCredentials) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AWSCredentials, RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(AWSCredentials, AmazonSimpleSystemsManagementConfig) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(string, string) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(string, string, RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(string, string, AmazonSimpleSystemsManagementConfig) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(string, string, string) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(string, string, string, RegionEndpoint) IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig>.ConfigureClient(string, string, string, AmazonSimpleSystemsManagementConfig) Namespace: AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface ISsmProvider : IParameterProvider<SsmProviderConfigurationBuilder>, IParameterProvider, IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig> Methods Recursive() Fetches all parameter values recursively based on a path prefix. For GetMultiple() only. Declaration SsmProviderConfigurationBuilder Recursive() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. WithDecryption() Automatically decrypt the parameter. Declaration SsmProviderConfigurationBuilder WithDecryption() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProvider.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProvider.html",
    "title": "Class SsmProvider | AWS Lambda Powertools for .NET",
    "keywords": "Class SsmProvider Provider to retrieve parameter values from AWS Systems Manager Parameter Store. Inheritance object ParameterProvider ParameterProvider<SsmProviderConfigurationBuilder> SsmProvider Implements ISsmProvider IParameterProvider<SsmProviderConfigurationBuilder> IParameterProvider IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig> Inherited Members ParameterProvider<SsmProviderConfigurationBuilder>.WithMaxAge(TimeSpan) ParameterProvider<SsmProviderConfigurationBuilder>.ForceFetch() ParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(Transformation) ParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(ITransformer) ParameterProvider<SsmProviderConfigurationBuilder>.WithTransformation(string) ParameterProvider.Cache ParameterProvider.CacheMode ParameterProvider.GetMaxAge(ParameterProviderConfiguration) ParameterProvider.Get(string) ParameterProvider.GetAsync(string) ParameterProvider.Get<T>(string) ParameterProvider.GetAsync<T>(string) ParameterProvider.GetMultiple(string) ParameterProvider.GetMultipleAsync(string) ParameterProvider.GetMultiple<T>(string) ParameterProvider.GetMultipleAsync<T>(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public class SsmProvider : ParameterProvider<SsmProviderConfigurationBuilder>, ISsmProvider, IParameterProvider<SsmProviderConfigurationBuilder>, IParameterProvider, IParameterProviderConfigurableClient<ISsmProvider, IAmazonSimpleSystemsManagement, AmazonSimpleSystemsManagementConfig> Methods ConfigureClient(RegionEndpoint) Configure client with the credentials loaded from the application's default configuration. Declaration public ISsmProvider ConfigureClient(RegionEndpoint region) Parameters Type Name Description RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance ConfigureClient(AWSCredentials) Configure client with AWS credentials. Declaration public ISsmProvider ConfigureClient(AWSCredentials credentials) Parameters Type Name Description AWSCredentials credentials AWS credentials. Returns Type Description ISsmProvider Provider instance ConfigureClient(AWSCredentials, RegionEndpoint) Configure client with AWS credentials. Declaration public ISsmProvider ConfigureClient(AWSCredentials credentials, RegionEndpoint region) Parameters Type Name Description AWSCredentials credentials AWS credentials. RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance ConfigureClient(AWSCredentials, AmazonSimpleSystemsManagementConfig) Configure client with AWS credentials and a client configuration object. Declaration public ISsmProvider ConfigureClient(AWSCredentials credentials, AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description AWSCredentials credentials AWS credentials. AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance ConfigureClient(AmazonSimpleSystemsManagementConfig) Configure client with the credentials loaded from the application's default configuration. Declaration public ISsmProvider ConfigureClient(AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance ConfigureClient(string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key Returns Type Description ISsmProvider Provider instance ConfigureClient(string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance ConfigureClient(string, string, AmazonSimpleSystemsManagementConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance ConfigureClient(string, string, string) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token Returns Type Description ISsmProvider Provider instance ConfigureClient(string, string, string, RegionEndpoint) Configure client with AWS Access Key ID and AWS Secret Key. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token RegionEndpoint region The region to connect. Returns Type Description ISsmProvider Provider instance ConfigureClient(string, string, string, AmazonSimpleSystemsManagementConfig) Configure client with AWS Access Key ID and AWS Secret Key and a client configuration object. Declaration public ISsmProvider ConfigureClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonSimpleSystemsManagementConfig config) Parameters Type Name Description string awsAccessKeyId AWS Access Key ID string awsSecretAccessKey AWS Secret Access Key string awsSessionToken AWS Session Token AmazonSimpleSystemsManagementConfig config The client configuration object. Returns Type Description ISsmProvider Provider instance GetAsync(string, ParameterProviderConfiguration?) Get parameter value for the provided key. Declaration protected override Task<string?> GetAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<string> The parameter value. Overrides ParameterProvider.GetAsync(string, ParameterProviderConfiguration?) GetMultipleAsync(string, ParameterProviderConfiguration?) Get multiple parameter values for the provided key. Declaration protected override Task<IDictionary<string, string?>> GetMultipleAsync(string key, ParameterProviderConfiguration? config) Parameters Type Name Description string key The parameter key. ParameterProviderConfiguration config The parameter provider configuration Returns Type Description Task<IDictionary<string, string>> Returns a collection parameter key/value pairs. Overrides ParameterProvider.GetMultipleAsync(string, ParameterProviderConfiguration?) NewConfigurationBuilder() Creates and configures a new instance of SsmProviderConfigurationBuilder. Declaration protected override SsmProviderConfigurationBuilder NewConfigurationBuilder() Returns Type Description SsmProviderConfigurationBuilder A new instance of SsmProviderConfigurationBuilder. Overrides ParameterProvider<SsmProviderConfigurationBuilder>.NewConfigurationBuilder() Recursive() Fetches all parameter values recursively based on a path prefix. For GetMultiple() only. Declaration public SsmProviderConfigurationBuilder Recursive() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. UseClient(IAmazonSimpleSystemsManagement) Use a custom client Declaration public ISsmProvider UseClient(IAmazonSimpleSystemsManagement client) Parameters Type Name Description IAmazonSimpleSystemsManagement client The custom client Returns Type Description ISsmProvider Provider instance WithDecryption() Automatically decrypt the parameter. Declaration public SsmProviderConfigurationBuilder WithDecryption() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. Implements ISsmProvider IParameterProvider<TConfigurationBuilder> IParameterProvider IParameterProviderConfigurableClient<TProvider, TClient, TConfig> Extension Methods ParameterProviderExtensions.AddTransformer<TProvider>(TProvider, string, ITransformer) ParameterProviderExtensions.DefaultMaxAge<TProvider>(TProvider, TimeSpan) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider) ParameterProviderExtensions.RaiseTransformationError<TProvider>(TProvider, bool) ParameterProviderExtensions.UseCacheManager<TProvider>(TProvider, ICacheManager) ParameterProviderExtensions.UseTransformerManager<TProvider>(TProvider, ITransformerManager)"
  },
  "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProviderConfigurationBuilder.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement.SsmProviderConfigurationBuilder.html",
    "title": "Class SsmProviderConfigurationBuilder | AWS Lambda Powertools for .NET",
    "keywords": "Class SsmProviderConfigurationBuilder SsmProviderConfigurationBuilder class. Inheritance object ParameterProviderConfigurationBuilder SsmProviderConfigurationBuilder Inherited Members ParameterProviderConfigurationBuilder.HasTransformation ParameterProviderConfigurationBuilder.Get(string) ParameterProviderConfigurationBuilder.GetAsync(string) ParameterProviderConfigurationBuilder.Get<T>(string) ParameterProviderConfigurationBuilder.GetAsync<T>(string) ParameterProviderConfigurationBuilder.GetMultiple(string) ParameterProviderConfigurationBuilder.GetMultipleAsync(string) ParameterProviderConfigurationBuilder.GetMultiple<T>(string) ParameterProviderConfigurationBuilder.GetMultipleAsync<T>(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Parameters.SimpleSystemsManagement Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public class SsmProviderConfigurationBuilder : ParameterProviderConfigurationBuilder Constructors SsmProviderConfigurationBuilder(ParameterProvider) SsmProviderConfigurationBuilder constructor. Declaration public SsmProviderConfigurationBuilder(ParameterProvider parameterProvider) Parameters Type Name Description ParameterProvider parameterProvider Methods NewConfiguration() Creates and configures a new instance of SsmProviderConfiguration. Declaration protected override ParameterProviderConfiguration NewConfiguration() Returns Type Description ParameterProviderConfiguration A new instance of SsmProviderConfiguration. Overrides ParameterProviderConfigurationBuilder.NewConfiguration() Recursive() Fetches all parameter values recursively based on a path prefix. For GetMultiple() only. Declaration public SsmProviderConfigurationBuilder Recursive() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. WithDecryption() Automatically decrypt the parameter. Declaration public SsmProviderConfigurationBuilder WithDecryption() Returns Type Description SsmProviderConfigurationBuilder The provider configuration builder. Extension Methods ParameterProviderConfigurationExtensions.ForceFetch<TConfigurationBuilder>(TConfigurationBuilder) ParameterProviderConfigurationExtensions.WithMaxAge<TConfigurationBuilder>(TConfigurationBuilder, TimeSpan) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, ITransformer) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, Transformation) ParameterProviderConfigurationExtensions.WithTransformation<TConfigurationBuilder>(TConfigurationBuilder, string)"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.html",
    "title": "Namespace AWS.Lambda.Powertools.Parameters.Transform | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Parameters.Transform Classes TransformationException Class TransformationException. Implements the Exception Interfaces ITransformer Represents a type used to transform a parameter value. ITransformerManager Represents a type used to manage transformers. Enums Transformation Enum Transformation"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformer.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformer.html",
    "title": "Interface ITransformer | AWS Lambda Powertools for .NET",
    "keywords": "Interface ITransformer Represents a type used to transform a parameter value. Namespace: AWS.Lambda.Powertools.Parameters.Transform Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface ITransformer Methods Transform<T>(string) Transforms the string value to specified type. Declaration T? Transform<T>(string value) Parameters Type Name Description string value Parameter value. Returns Type Description T The transformed value. Type Parameters Name Description T Target transformation type."
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformerManager.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.ITransformerManager.html",
    "title": "Interface ITransformerManager | AWS Lambda Powertools for .NET",
    "keywords": "Interface ITransformerManager Represents a type used to manage transformers. Namespace: AWS.Lambda.Powertools.Parameters.Transform Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public interface ITransformerManager Methods AddTransformer(string, ITransformer) Add an instance of a transformer by a unique name Declaration void AddTransformer(string transformerName, ITransformer transformer) Parameters Type Name Description string transformerName name of the transformer ITransformer transformer the transformer instance Exceptions Type Condition ArgumentException GetTransformer(Transformation) Gets an instance of transformer for the provided transformation type. Declaration ITransformer GetTransformer(Transformation transformation) Parameters Type Name Description Transformation transformation Type of the transformation. Returns Type Description ITransformer The transformer instance Exceptions Type Condition NotSupportedException GetTransformer(string) Gets an instance of transformer for the provided transformer name. Declaration ITransformer GetTransformer(string transformerName) Parameters Type Name Description string transformerName The unique name for the transformer Returns Type Description ITransformer The transformer instance Exceptions Type Condition KeyNotFoundException TryGetTransformer(Transformation, string) Gets an instance of transformer for the provided transformation type and parameter key. Declaration ITransformer? TryGetTransformer(Transformation transformation, string key) Parameters Type Name Description Transformation transformation Type of the transformation. string key Parameter key, it's required for Transformation.Auto Returns Type Description ITransformer The transformer instance TryGetTransformer(string) Gets an instance of transformer for the provided transformer name. Declaration ITransformer? TryGetTransformer(string transformerName) Parameters Type Name Description string transformerName The unique name for the transformer Returns Type Description ITransformer The transformer instance Exceptions Type Condition ArgumentException"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.Transformation.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.Transformation.html",
    "title": "Enum Transformation | AWS Lambda Powertools for .NET",
    "keywords": "Enum Transformation Enum Transformation Namespace: AWS.Lambda.Powertools.Parameters.Transform Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax public enum Transformation Fields Name Description Auto Auto Base64 Base64 Json Json"
  },
  "api/AWS.Lambda.Powertools.Parameters.Transform.TransformationException.html": {
    "href": "api/AWS.Lambda.Powertools.Parameters.Transform.TransformationException.html",
    "title": "Class TransformationException | AWS Lambda Powertools for .NET",
    "keywords": "Class TransformationException Class TransformationException. Implements the Exception Inheritance object Exception TransformationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AWS.Lambda.Powertools.Parameters.Transform Assembly: AWS.Lambda.Powertools.Parameters.dll Syntax [Serializable] public class TransformationException : Exception, ISerializable Constructors TransformationException(string) Initializes a new instance of the TransformationException class. Declaration public TransformationException(string message) Parameters Type Name Description string message The exception message. See Also Exception TransformationException(string, Exception) Initializes a new instance of the TransformationException class. Declaration public TransformationException(string message, Exception innerException) Parameters Type Name Description string message The exception message. Exception innerException The inner exception. See Also Exception Implements ISerializable See Also Exception"
  },
  "api/AWS.Lambda.Powertools.Tracing.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.html",
    "title": "Namespace AWS.Lambda.Powertools.Tracing | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Tracing Classes Tracing Class Tracing. TracingAttribute Creates an opinionated thin wrapper for AWS X-Ray .NET SDK which provides functionality to reduce the overhead of performing common tracing tasks. Key features --------------------- Helper methods to improve the developer experience for creating custom AWS X-Ray subsegments Capture cold start as annotation Capture function responses and full exceptions as metadata Better experience when developing with multiple threads Auto-patch supported modules by AWS X-Ray Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_TRACER_CAPTURE_RESPONSE bool, disable auto-capture response as metadata (e.g. true, false) POWERTOOLS_TRACER_CAPTURE_ERROR bool, disable auto-capture error as metadata (e.g. true, false) POWERTOOLS_TRACE_DISABLED bool, disable auto-capture error or response as metadata (e.g. true, false) Parameters ----------- Parameter name Description Service string, service name that will be appended in all tracing metadata SegmentName string, custom segment name for the operation, by default '## {MethodName}' Namespace string, namespace to current subsegment CaptureMode enum, capture mode to record method responses and errors (e.g. EnvironmentVariable, Response, and Error), by default EnvironmentVariable Enums TracingCaptureMode Enum TracingCaptureMode"
  },
  "api/AWS.Lambda.Powertools.Tracing.Internal.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.Internal.html",
    "title": "Namespace AWS.Lambda.Powertools.Tracing.Internal | AWS Lambda Powertools for .NET",
    "keywords": "Namespace AWS.Lambda.Powertools.Tracing.Internal Interfaces IXRayRecorder Interface IXRayRecorder"
  },
  "api/AWS.Lambda.Powertools.Tracing.Internal.IXRayRecorder.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.Internal.IXRayRecorder.html",
    "title": "Interface IXRayRecorder | AWS Lambda Powertools for .NET",
    "keywords": "Interface IXRayRecorder Interface IXRayRecorder Namespace: AWS.Lambda.Powertools.Tracing.Internal Assembly: AWS.Lambda.Powertools.Tracing.dll Syntax public interface IXRayRecorder Properties Emitter Gets the emitter. Declaration ISegmentEmitter Emitter { get; } Property Value Type Description ISegmentEmitter The emitter. StreamingStrategy Gets the streaming strategy. Declaration IStreamingStrategy StreamingStrategy { get; } Property Value Type Description IStreamingStrategy The streaming strategy. Methods AddAnnotation(string, object) Adds the annotation. Declaration void AddAnnotation(string key, object value) Parameters Type Name Description string key The key. object value The value. AddException(Exception) Adds the exception. Declaration void AddException(Exception exception) Parameters Type Name Description Exception exception The exception. AddHttpInformation(string, object) Adds the HTTP information. Declaration void AddHttpInformation(string key, object value) Parameters Type Name Description string key The key. object value The value. AddMetadata(string, string, object) Adds the metadata. Declaration void AddMetadata(string nameSpace, string key, object value) Parameters Type Name Description string nameSpace The name space. string key The key. object value The value. BeginSubsegment(string) Begins the subsegment. Declaration void BeginSubsegment(string name) Parameters Type Name Description string name The name. EndSubsegment() Ends the subsegment. Declaration void EndSubsegment() GetEntity() Gets the entity. Declaration Entity GetEntity() Returns Type Description Entity Entity. SetEntity(Entity) Sets the entity. Declaration void SetEntity(Entity entity) Parameters Type Name Description Entity entity The entity. SetNamespace(string) Sets the namespace. Declaration void SetNamespace(string value) Parameters Type Name Description string value The value."
  },
  "api/AWS.Lambda.Powertools.Tracing.Tracing.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.Tracing.html",
    "title": "Class Tracing | AWS Lambda Powertools for .NET",
    "keywords": "Class Tracing Class Tracing. Inheritance object Tracing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Tracing Assembly: AWS.Lambda.Powertools.Tracing.dll Syntax public static class Tracing Methods AddAnnotation(string, object) Adds the specified key and value as annotation to current segment. The type of value is restricted. Only string, int, long, double and bool are supported. Declaration public static void AddAnnotation(string key, object value) Parameters Type Name Description string key The key of the annotation to add. object value The value of the annotation to add. Exceptions Type Condition EntityNotAvailableException Entity is not available in trace context. AddException(Exception) Add the exception to current segment and also mark current segment as fault. Declaration public static void AddException(Exception exception) Parameters Type Name Description Exception exception The exception to be added. Exceptions Type Condition EntityNotAvailableException Entity is not available in trace context. AddHttpInformation(string, object) Adds the specified key and value as http information to current segment. Declaration public static void AddHttpInformation(string key, object value) Parameters Type Name Description string key The key of the http information to add. object value The value of the http information to add. Exceptions Type Condition ArgumentException Key is null or empty. ArgumentNullException Value is null. EntityNotAvailableException Entity is not available in trace context. AddMetadata(string, object) Adds the specified key and value to metadata with given namespace. Declaration public static void AddMetadata(string key, object value) Parameters Type Name Description string key The key. object value The value. AddMetadata(string, string, object) Adds the specified key and value to metadata with given namespace. Declaration public static void AddMetadata(string nameSpace, string key, object value) Parameters Type Name Description string nameSpace The namespace. string key The key. object value The value. GetEntity() Gets entity (segment/subsegment) from the Amazon.XRay.Recorder.Core.AWSXRayRecorderImpl.TraceContext. Declaration public static Entity GetEntity() Returns Type Description Entity The entity (segment/subsegment) Exceptions Type Condition EntityNotAvailableException Thrown when the entity is not available to get. SetEntity(Entity) Set the specified entity (segment/subsegment) into Amazon.XRay.Recorder.Core.AWSXRayRecorderImpl.TraceContext. Declaration public static void SetEntity(Entity entity) Parameters Type Name Description Entity entity The entity to be set Exceptions Type Condition EntityNotAvailableException Thrown when the entity is not available to set WithSubsegment(string, Entity, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. This method is intended for use with multi-threaded programming where the context is lost between threads. Declaration public static void WithSubsegment(string name, Entity entity, Action<Subsegment> subsegment) Parameters Type Name Description string name The name of the subsegment. Entity entity The current AWS X-Ray context. Action<Subsegment> subsegment The AWS X-Ray subsegment for the wrapped consumer. Exceptions Type Condition ArgumentNullException Thrown when the name is not provided. ArgumentNullException Thrown when the entity is not provided. WithSubsegment(string, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. The namespace used follows the flow as described in TracingAttribute Declaration public static void WithSubsegment(string name, Action<Subsegment> subsegment) Parameters Type Name Description string name The name of the subsegment. Action<Subsegment> subsegment The AWS X-Ray subsegment for the wrapped consumer. Exceptions Type Condition ArgumentNullException Thrown when the name is not provided. WithSubsegment(string, string, Entity, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. This method is intended for use with multi-threaded programming where the context is lost between threads. Declaration public static void WithSubsegment(string nameSpace, string name, Entity entity, Action<Subsegment> subsegment) Parameters Type Name Description string nameSpace The namespace of the subsegment. string name The name of the subsegment. Entity entity The current AWS X-Ray context. Action<Subsegment> subsegment The AWS X-Ray subsegment for the wrapped consumer. Exceptions Type Condition ArgumentNullException name ArgumentNullException entity WithSubsegment(string, string, Action<Subsegment>) Adds a new subsegment around the passed consumer. This also provides access to the newly created subsegment. The namespace used follows the flow as described in TracingAttribute Declaration public static void WithSubsegment(string nameSpace, string name, Action<Subsegment> subsegment) Parameters Type Name Description string nameSpace The name space. string name The name of the subsegment. Action<Subsegment> subsegment The AWS X-Ray subsegment for the wrapped consumer. Exceptions Type Condition ArgumentNullException name"
  },
  "api/AWS.Lambda.Powertools.Tracing.TracingAttribute.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.TracingAttribute.html",
    "title": "Class TracingAttribute | AWS Lambda Powertools for .NET",
    "keywords": "Class TracingAttribute Creates an opinionated thin wrapper for AWS X-Ray .NET SDK which provides functionality to reduce the overhead of performing common tracing tasks. Key features --------------------- Helper methods to improve the developer experience for creating custom AWS X-Ray subsegments Capture cold start as annotation Capture function responses and full exceptions as metadata Better experience when developing with multiple threads Auto-patch supported modules by AWS X-Ray Environment variables --------------------- Variable name Description POWERTOOLS_SERVICE_NAME string, service name POWERTOOLS_TRACER_CAPTURE_RESPONSE bool, disable auto-capture response as metadata (e.g. true, false) POWERTOOLS_TRACER_CAPTURE_ERROR bool, disable auto-capture error as metadata (e.g. true, false) POWERTOOLS_TRACE_DISABLED bool, disable auto-capture error or response as metadata (e.g. true, false) Parameters ----------- Parameter name Description Service string, service name that will be appended in all tracing metadata SegmentName string, custom segment name for the operation, by default '## {MethodName}' Namespace string, namespace to current subsegment CaptureMode enum, capture mode to record method responses and errors (e.g. EnvironmentVariable, Response, and Error), by default EnvironmentVariable Inheritance object Attribute UniversalWrapperAttribute MethodAspectAttribute TracingAttribute Inherited Members MethodAspectAttribute.WrapSync<T>(Func<object[], T>, object[], AspectEventArgs) MethodAspectAttribute.WrapAsync<T>(Func<object[], Task<T>>, object[], AspectEventArgs) Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AWS.Lambda.Powertools.Tracing Assembly: AWS.Lambda.Powertools.Tracing.dll Syntax public class TracingAttribute : MethodAspectAttribute Examples [Tracing( SegmentName = \"ExampleSegment\", Namespace = \"ExampleNamespace\", CaptureMode = TracingCaptureMode.ResponseAndError) ] public async Task<APIGatewayProxyResponse> FunctionHandler (APIGatewayProxyRequest apigProxyEvent, ILambdaContext context) { ... } Properties CaptureMode Set capture mode to record method responses and errors. The defaults are the environment variables POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR. Declaration public TracingCaptureMode CaptureMode { get; set; } Property Value Type Description TracingCaptureMode The capture mode. Namespace Set namespace to current subsegment. The default is the environment variable POWERTOOLS_SERVICE_NAME. Declaration public string Namespace { get; set; } Property Value Type Description string The namespace. SegmentName Set custom segment name for the operation. The default is '## {MethodName}'. Declaration public string SegmentName { get; set; } Property Value Type Description string The name of the segment. Methods CreateHandler() Creates the handler. Declaration protected override IMethodAspectHandler CreateHandler() Returns Type Description IMethodAspectHandler IMethodAspectHandler. Overrides MethodAspectAttribute.CreateHandler()"
  },
  "api/AWS.Lambda.Powertools.Tracing.TracingCaptureMode.html": {
    "href": "api/AWS.Lambda.Powertools.Tracing.TracingCaptureMode.html",
    "title": "Enum TracingCaptureMode | AWS Lambda Powertools for .NET",
    "keywords": "Enum TracingCaptureMode Enum TracingCaptureMode Namespace: AWS.Lambda.Powertools.Tracing Assembly: AWS.Lambda.Powertools.Tracing.dll Syntax public enum TracingCaptureMode Fields Name Description Disabled Disables attribute to capture both response and error from the method. If this mode is explicitly overridden on TracingAttribute attribute, it will override values of environment variable POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR EnvironmentVariable Enables/Disables attribute to capture response and error from the method based on the value of environment variable POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR Error Enabled attribute to capture only error from the method. If this mode is explicitly overridden on TracingAttribute attribute, it will override value of environment variable POWERTOOLS_TRACER_CAPTURE_ERROR Response Enables attribute to capture only response. If this mode is explicitly overridden on {TracingAttribute attribute, it will override value of environment variable POWERTOOLS_TRACER_CAPTURE_RESPONSE ResponseAndError Enabled attribute to capture both response error from the method. If this mode is explicitly overridden on TracingAttribute attribute, it will override value of environment variables POWERTOOLS_TRACER_CAPTURE_RESPONSE and POWERTOOLS_TRACER_CAPTURE_ERROR"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| AWS Lambda Powertools for .NET",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "AWS Lambda Powertools for .NET API | AWS Lambda Powertools for .NET",
    "keywords": "AWS Lambda Powertools for .NET API Welcome to the AWS Lambda Powertools for .NET API reference. This documentation contains the API details for all supported utilities. To get started use the API Documentaion menu on the navigation bar, or search for specific keywords on the search box on top-right corner of your screen. Note Are you looking for documentation on how to use AWS Lambda Powertools for .NET utilities and code samples? 👉 Here is the perfect place to start. Feedback If you have any feedback, create a new issue in the AWS Lambda Powertools for .NET repository on GitHub."
  }
}