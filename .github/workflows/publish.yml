name: Publish new package version

on:
  push:
    paths:
      - 'version.json'

jobs:
  release:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Read AWS.Lambda.Powertools.Common version
      id: common-version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'version.json'
        prop_path: 'Core.Common'
    - name: Read AWS.Lambda.Powertools.Logging version
      id: logging-version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'version.json'
        prop_path: 'Core.Logging'
    - name: Read AWS.Lambda.Powertools.Tracing version
      id: tracing-version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'version.json'
        prop_path: 'Core.Tracing'
    - name: Read AWS.Lambda.Powertools.Metrics version
      id: metrics-version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'version.json'
        prop_path: 'Core.Metrics'
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Setup semver
      run: dotnet tool install -g dotnet-setversion
    - name: Set assembly version in all projects
      run: |       
        setversion ${{steps.common-version.outputs.prop}} libraries/src/AWS.Lambda.Powertools.Common/AWS.Lambda.Powertools.Common.csproj
        setversion ${{steps.logging-version.outputs.prop}} libraries/src/AWS.Lambda.Powertools.Logging/AWS.Lambda.Powertools.Logging.csproj
        setversion ${{steps.metrics-version.outputs.prop}} libraries/src/AWS.Lambda.Powertools.Metrics/AWS.Lambda.Powertools.Metrics.csproj
        setversion ${{steps.tracing-version.outputs.prop}} libraries/src/AWS.Lambda.Powertools.Tracing/AWS.Lambda.Powertools.Tracing.csproj
    - name: Authenticate to GitHub packages # Temporary package repository for publishing validation
      run: dotnet nuget add source --username ${{ secrets.PUBLISH_USERNAME }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name nuget ${{ secrets.NUGET_SOURCE }}
    - name: Generate NuGet Packages
      run: |
        cd buildtools
        dotnet build -c Release        
    - name: Publish NuGet Packages
      run: |
        cd deploy/nuget-packages
        dotnet nuget push "*.nupkg" -k ${{ secrets.NUGET_API_KEY }} --skip-duplicate -s nuget

